"use strict";(self.webpackChunknuclear_docs=self.webpackChunknuclear_docs||[]).push([[294],{7792:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"development/troubleshooting","title":"Troubleshooting","description":"Complete guide to diagnosing and resolving common issues in the Nuclear application development environment.","source":"@site/docs/development/troubleshooting.md","sourceDirName":"development","slug":"/development/troubleshooting","permalink":"/docs/development/troubleshooting","draft":false,"unlisted":false,"editUrl":"https://github.com/nuclear-app/doc/tree/main/docs/development/troubleshooting.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"tutorialSidebar","previous":{"title":"Deployment Guide","permalink":"/docs/development/deployment"},"next":{"title":"Contributing Guide","permalink":"/docs/development/contributing"}}');var i=s(4848),o=s(8453);const a={sidebar_position:10},l="Troubleshooting",t={},c=[{value:"\ud83d\udea8 Common Issues &amp; Solutions",id:"-common-issues--solutions",level:2},{value:"Development Server Issues",id:"development-server-issues",level:3},{value:"Port Already in Use",id:"port-already-in-use",level:4},{value:"Development Server Won&#39;t Start",id:"development-server-wont-start",level:4},{value:"Hot Reloading Not Working",id:"hot-reloading-not-working",level:4},{value:"Database Issues",id:"database-issues",level:3},{value:"Prisma Client Errors",id:"prisma-client-errors",level:4},{value:"Database Connection Failed",id:"database-connection-failed",level:4},{value:"Migration Issues",id:"migration-issues",level:4},{value:"TypeScript Issues",id:"typescript-issues",level:3},{value:"Type Errors",id:"type-errors",level:4},{value:"Missing Type Definitions",id:"missing-type-definitions",level:4},{value:"Build Issues",id:"build-issues",level:3},{value:"Build Failures",id:"build-failures",level:4},{value:"Memory Issues During Build",id:"memory-issues-during-build",level:4},{value:"Dependency Issues",id:"dependency-issues",level:3},{value:"Package Installation Problems",id:"package-installation-problems",level:4},{value:"Version Conflicts",id:"version-conflicts",level:4},{value:"\ud83d\udd0d Debugging Techniques",id:"-debugging-techniques",level:2},{value:"Console Debugging",id:"console-debugging",level:3},{value:"Structured Logging",id:"structured-logging",level:4},{value:"Debug Levels",id:"debug-levels",level:4},{value:"Browser Debugging",id:"browser-debugging",level:3},{value:"React DevTools",id:"react-devtools",level:4},{value:"Network Tab Debugging",id:"network-tab-debugging",level:4},{value:"Database Debugging",id:"database-debugging",level:3},{value:"Prisma Query Logging",id:"prisma-query-logging",level:4},{value:"Prisma Studio",id:"prisma-studio",level:4},{value:"\ud83d\udee0\ufe0f Performance Issues",id:"\ufe0f-performance-issues",level:2},{value:"Slow Development Server",id:"slow-development-server",level:3},{value:"File Watching Issues",id:"file-watching-issues",level:4},{value:"Large Bundle Size",id:"large-bundle-size",level:4},{value:"Database Performance",id:"database-performance",level:3},{value:"Slow Queries",id:"slow-queries",level:4},{value:"Missing Indexes",id:"missing-indexes",level:4},{value:"\ud83d\udd27 Environment Issues",id:"-environment-issues",level:2},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Missing Environment Variables",id:"missing-environment-variables",level:4},{value:"Environment Variable Types",id:"environment-variable-types",level:4},{value:"Platform-Specific Issues",id:"platform-specific-issues",level:3},{value:"Windows Issues",id:"windows-issues",level:4},{value:"macOS Issues",id:"macos-issues",level:4},{value:"Linux Issues",id:"linux-issues",level:4},{value:"\ud83d\ude80 Advanced Debugging",id:"-advanced-debugging",level:2},{value:"Error Boundaries",id:"error-boundaries",level:3},{value:"Custom Hooks for Debugging",id:"custom-hooks-for-debugging",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:3},{value:"\ud83d\udcde Getting Help",id:"-getting-help",level:2},{value:"Before Asking for Help",id:"before-asking-for-help",level:3},{value:"When Creating Issues",id:"when-creating-issues",level:3},{value:"Issue Template",id:"issue-template",level:4},{value:"Useful Commands for Debugging",id:"useful-commands-for-debugging",level:3},{value:"\ud83d\udcda Related Documentation",id:"-related-documentation",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"troubleshooting",children:"Troubleshooting"})}),"\n",(0,i.jsx)(n.p,{children:"Complete guide to diagnosing and resolving common issues in the Nuclear application development environment."}),"\n",(0,i.jsx)(n.h2,{id:"-common-issues--solutions",children:"\ud83d\udea8 Common Issues & Solutions"}),"\n",(0,i.jsx)(n.h3,{id:"development-server-issues",children:"Development Server Issues"}),"\n",(0,i.jsx)(n.h4,{id:"port-already-in-use",children:"Port Already in Use"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Development server won't start because port 3000 is occupied."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check what's using port 3000\nlsof -i :3000  # macOS/Linux\nnetstat -ano | findstr :3000  # Windows\n\n# Kill the process\nkill -9 <PID>  # macOS/Linux\ntaskkill /PID <PID> /F  # Windows\n\n# Alternative: Use different port\nbun coolDev --port 3001\n"})}),"\n",(0,i.jsx)(n.h4,{id:"development-server-wont-start",children:"Development Server Won't Start"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": ",(0,i.jsx)(n.code,{children:"bun coolDev"})," fails to start or crashes immediately."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Clear cache and restart\nbun run clean\nrm -rf .next\nbun install\nbun coolDev\n\n# Check for TypeScript errors\nbun run type-check\n\n# Check for missing dependencies\nbun install --force\n"})}),"\n",(0,i.jsx)(n.h4,{id:"hot-reloading-not-working",children:"Hot Reloading Not Working"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Changes don't reflect automatically in the browser."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Clear Next.js cache\nrm -rf .next\n\n# Restart development server\nbun coolDev\n\n# Check file watching limits (Linux)\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n"})}),"\n",(0,i.jsx)(n.h3,{id:"database-issues",children:"Database Issues"}),"\n",(0,i.jsx)(n.h4,{id:"prisma-client-errors",children:"Prisma Client Errors"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": TypeScript shows Prisma client errors or missing types."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Regenerate Prisma client\nbunx prisma generate\n\n# Clear Prisma cache\nrm -rf node_modules/.prisma\n\n# Reinstall and regenerate\nbun install\nbunx prisma generate\n"})}),"\n",(0,i.jsx)(n.h4,{id:"database-connection-failed",children:"Database Connection Failed"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Cannot connect to database."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Test database connection\nbunx prisma db pull\n\n# Check environment variables\necho $DATABASE_URL\n\n# Verify database is running\n# For local PostgreSQL:\nbrew services list | grep postgresql  # macOS\nsudo systemctl status postgresql      # Linux\n\n# For Supabase:\n# Check project status in Supabase dashboard\n"})}),"\n",(0,i.jsx)(n.h4,{id:"migration-issues",children:"Migration Issues"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Database migrations fail or are out of sync."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check migration status\nbunx prisma migrate status\n\n# Reset database (development only)\nbunx prisma migrate reset\n\n# Force push schema (development only)\nbunx prisma db push --force-reset\n\n# Create fresh migration\nbunx prisma migrate dev --name fresh_start\n"})}),"\n",(0,i.jsx)(n.h3,{id:"typescript-issues",children:"TypeScript Issues"}),"\n",(0,i.jsx)(n.h4,{id:"type-errors",children:"Type Errors"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": TypeScript compilation fails with type errors."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Check for type errors\nbun run type-check\n\n# Clear TypeScript cache\nrm -rf .next tsconfig.tsbuildinfo\n\n# Restart TypeScript server in VS Code\n# Cmd+Shift+P -> "TypeScript: Restart TS Server"\n\n# Check tsconfig.json configuration\ncat tsconfig.json\n'})}),"\n",(0,i.jsx)(n.h4,{id:"missing-type-definitions",children:"Missing Type Definitions"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": TypeScript can't find type definitions for packages."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install missing type definitions\nbun add -d @types/node @types/react @types/react-dom\n\n# Check if package has built-in types\nbun add package-name\n\n# Create custom type definitions\n# Create types/package-name.d.ts\ndeclare module 'package-name' {\n  // Type definitions\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"build-issues",children:"Build Issues"}),"\n",(0,i.jsx)(n.h4,{id:"build-failures",children:"Build Failures"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": ",(0,i.jsx)(n.code,{children:"bun run build"})," fails with errors."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Clean and rebuild\nbun run clean\nbun install\nbun run build\n\n# Check for specific errors\nbun run build 2>&1 | grep -i error\n\n# Check bundle size\nbun run build\n# Check .next/analyze for bundle analysis\n"})}),"\n",(0,i.jsx)(n.h4,{id:"memory-issues-during-build",children:"Memory Issues During Build"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Build process runs out of memory."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Increase Node.js memory limit\nNODE_OPTIONS="--max-old-space-size=4096" bun run build\n\n# For Windows\nset NODE_OPTIONS=--max-old-space-size=4096\nbun run build\n'})}),"\n",(0,i.jsx)(n.h3,{id:"dependency-issues",children:"Dependency Issues"}),"\n",(0,i.jsx)(n.h4,{id:"package-installation-problems",children:"Package Installation Problems"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": ",(0,i.jsx)(n.code,{children:"bun install"})," fails or packages are missing."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Clear cache and reinstall\nrm -rf node_modules bun.lockb\nbun install\n\n# Update Bun\nbun upgrade\n\n# Check for conflicting dependencies\nbun pm ls\n\n# Install specific version\nbun add package-name@version\n"})}),"\n",(0,i.jsx)(n.h4,{id:"version-conflicts",children:"Version Conflicts"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Package version conflicts or peer dependency warnings."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Check for conflicts\nbun pm ls\n\n# Resolve conflicts manually\nbun add package-name@compatible-version\n\n# Use resolution in package.json\n{\n  "resolutions": {\n    "package-name": "specific-version"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"-debugging-techniques",children:"\ud83d\udd0d Debugging Techniques"}),"\n",(0,i.jsx)(n.h3,{id:"console-debugging",children:"Console Debugging"}),"\n",(0,i.jsx)(n.h4,{id:"structured-logging",children:"Structured Logging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good - Structured logging\nconsole.log('User creation:', {\n  email: data.email,\n  mode: data.mode,\n  timestamp: new Date().toISOString()\n});\n\n// \u2705 Good - Error logging with context\nconsole.error('Failed to create user:', {\n  error: error.message,\n  data: data,\n  stack: error.stack\n});\n\n// \u274c Avoid - Generic logging\nconsole.log('Something happened');\n"})}),"\n",(0,i.jsx)(n.h4,{id:"debug-levels",children:"Debug Levels"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Development debugging\nconst DEBUG = process.env.NODE_ENV === 'development';\n\nif (DEBUG) {\n  console.log('Debug info:', data);\n}\n\n// Production logging\nconsole.error('Production error:', error);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"browser-debugging",children:"Browser Debugging"}),"\n",(0,i.jsx)(n.h4,{id:"react-devtools",children:"React DevTools"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install React DevTools browser extension\n# Chrome: React Developer Tools\n# Firefox: React Developer Tools\n\n# Use in browser:\n# - Component tree inspection\n# - Props and state viewing\n# - Performance profiling\n"})}),"\n",(0,i.jsx)(n.h4,{id:"network-tab-debugging",children:"Network Tab Debugging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Monitor API calls\nfetch('/api/users', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify(data)\n})\n.then(response => {\n  console.log('Response status:', response.status);\n  return response.json();\n})\n.then(data => {\n  console.log('Response data:', data);\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"database-debugging",children:"Database Debugging"}),"\n",(0,i.jsx)(n.h4,{id:"prisma-query-logging",children:"Prisma Query Logging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Enable query logging in development\nconst prisma = new PrismaClient({\n  log: ['query', 'info', 'warn', 'error'],\n});\n\n// Monitor specific queries\nconst start = Date.now();\nconst users = await prisma.user.findMany();\nconst duration = Date.now() - start;\nconsole.log(`Query took ${duration}ms`);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"prisma-studio",children:"Prisma Studio"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Open database browser\nbunx prisma studio\n\n# Useful for:\n# - Viewing data relationships\n# - Debugging database issues\n# - Manual data inspection\n# - Testing queries\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-performance-issues",children:"\ud83d\udee0\ufe0f Performance Issues"}),"\n",(0,i.jsx)(n.h3,{id:"slow-development-server",children:"Slow Development Server"}),"\n",(0,i.jsx)(n.h4,{id:"file-watching-issues",children:"File Watching Issues"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check file watching limits\ncat /proc/sys/fs/inotify/max_user_watches  # Linux\n\n# Increase limits\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# For macOS\necho kern.maxfiles=65536 | sudo tee -a /etc/sysctl.conf\necho kern.maxfilesperproc=65536 | sudo tee -a /etc/sysctl.conf\n"})}),"\n",(0,i.jsx)(n.h4,{id:"large-bundle-size",children:"Large Bundle Size"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Analyze bundle size\nbun run build\n# Check .next/analyze for detailed breakdown\n\n# Identify large packages\nbun pm ls --depth=0\n\n# Use dynamic imports\nconst HeavyComponent = dynamic(() => import('./HeavyComponent'));\n"})}),"\n",(0,i.jsx)(n.h3,{id:"database-performance",children:"Database Performance"}),"\n",(0,i.jsx)(n.h4,{id:"slow-queries",children:"Slow Queries"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Monitor query performance\nconst start = Date.now();\nconst result = await prisma.user.findMany({\n  include: { blocks: true, folders: true }\n});\nconst duration = Date.now() - start;\nconsole.log(`Query took ${duration}ms`);\n\n// Optimize queries\nconst users = await prisma.user.findMany({\n  select: { id: true, name: true }, // Only select needed fields\n  take: 20, // Use pagination\n  orderBy: { createdAt: 'desc' }\n});\n"})}),"\n",(0,i.jsx)(n.h4,{id:"missing-indexes",children:"Missing Indexes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"-- Add indexes for frequently queried fields\nCREATE INDEX idx_blocks_author_id ON blocks(author_id);\nCREATE INDEX idx_blocks_published_created ON blocks(published, created_at);\nCREATE INDEX idx_users_email ON users(email);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-environment-issues",children:"\ud83d\udd27 Environment Issues"}),"\n",(0,i.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,i.jsx)(n.h4,{id:"missing-environment-variables",children:"Missing Environment Variables"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Application fails due to missing environment variables."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Check environment file\ncat .env\n\n# Verify variables are loaded\necho $DATABASE_URL\n\n# Set variables manually\nexport DATABASE_URL="your-database-url"\nexport NEXTAUTH_SECRET="your-secret"\n\n# Restart development server\nbun coolDev\n'})}),"\n",(0,i.jsx)(n.h4,{id:"environment-variable-types",children:"Environment Variable Types"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": TypeScript errors for environment variables."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Create environment type definitions\n// types/env.d.ts\ndeclare global {\n  namespace NodeJS {\n    interface ProcessEnv {\n      DATABASE_URL: string;\n      NEXTAUTH_SECRET: string;\n      NEXTAUTH_URL: string;\n      SUPABASE_URL?: string;\n      SUPABASE_ANON_KEY?: string;\n    }\n  }\n}\n\nexport {};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"platform-specific-issues",children:"Platform-Specific Issues"}),"\n",(0,i.jsx)(n.h4,{id:"windows-issues",children:"Windows Issues"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Path issues\n# Use forward slashes in imports\nimport { Button } from '@/components/ui/Button';\n\n# Line ending issues\ngit config --global core.autocrlf true\n\n# Permission issues\n# Run terminal as administrator\n"})}),"\n",(0,i.jsx)(n.h4,{id:"macos-issues",children:"macOS Issues"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Permission issues\nsudo chown -R $(whoami) /usr/local/lib/node_modules\n\n# File watching limits\necho kern.maxfiles=65536 | sudo tee -a /etc/sysctl.conf\necho kern.maxfilesperproc=65536 | sudo tee -a /etc/sysctl.conf\n"})}),"\n",(0,i.jsx)(n.h4,{id:"linux-issues",children:"Linux Issues"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# File watching limits\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Permission issues\nsudo chown -R $USER:$USER ~/.npm\nsudo chown -R $USER:$USER ~/.bun\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-advanced-debugging",children:"\ud83d\ude80 Advanced Debugging"}),"\n",(0,i.jsx)(n.h3,{id:"error-boundaries",children:"Error Boundaries"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// components/ErrorBoundary.tsx\nimport React from 'react';\n\nclass ErrorBoundary extends React.Component<\n  { children: React.ReactNode },\n  { hasError: boolean; error?: Error }\n> {\n  constructor(props: { children: React.ReactNode }) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('Error caught by boundary:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\n          <h2 className=\"text-red-800 font-semibold\">Something went wrong</h2>\n          <p className=\"text-red-600 mt-2\">\n            {this.state.error?.message || 'An error occurred'}\n          </p>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"custom-hooks-for-debugging",children:"Custom Hooks for Debugging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// hooks/useDebug.ts\nimport { useEffect, useRef } from 'react';\n\nexport function useDebug(componentName: string, props: any) {\n  const renderCount = useRef(0);\n  \n  useEffect(() => {\n    renderCount.current += 1;\n    console.log(`${componentName} rendered ${renderCount.current} times`);\n  });\n\n  useEffect(() => {\n    console.log(`${componentName} props changed:`, props);\n  }, [componentName, props]);\n}\n\n// Usage\nfunction MyComponent(props: any) {\n  useDebug('MyComponent', props);\n  return <div>Component content</div>;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// utils/performance.ts\nexport function measurePerformance<T>(\n  name: string,\n  fn: () => T | Promise<T>\n): T | Promise<T> {\n  const start = performance.now();\n  \n  const result = fn();\n  \n  if (result instanceof Promise) {\n    return result.finally(() => {\n      const end = performance.now();\n      console.log(`${name} took ${end - start}ms`);\n    });\n  } else {\n    const end = performance.now();\n    console.log(`${name} took ${end - start}ms`);\n    return result;\n  }\n}\n\n// Usage\nconst users = await measurePerformance('Fetch users', () => \n  prisma.user.findMany()\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-getting-help",children:"\ud83d\udcde Getting Help"}),"\n",(0,i.jsx)(n.h3,{id:"before-asking-for-help",children:"Before Asking for Help"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Check the logs"})," - Look for error messages in terminal and browser console"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Search existing issues"})," - Check GitHub issues for similar problems"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Try basic troubleshooting"})," - Restart server, clear cache, reinstall dependencies"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Document the issue"})," - Note exact error messages, steps to reproduce, environment details"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"when-creating-issues",children:"When Creating Issues"}),"\n",(0,i.jsx)(n.h4,{id:"issue-template",children:"Issue Template"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"## Description\nBrief description of the problem.\n\n## Steps to Reproduce\n1. Step 1\n2. Step 2\n3. Step 3\n\n## Expected Behavior\nWhat should happen.\n\n## Actual Behavior\nWhat actually happens.\n\n## Environment\n- OS: [e.g., macOS 12.0]\n- Node.js: [e.g., 18.0.0]\n- Bun: [e.g., 1.0.0]\n- Database: [e.g., PostgreSQL 14]\n\n## Error Messages\n"})}),"\n",(0,i.jsx)(n.p,{children:"Exact error messages from console/logs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\n## Additional Context\nAny other relevant information.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"useful-commands-for-debugging",children:"Useful Commands for Debugging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# System information\nuname -a                    # Linux/macOS\nsysteminfo                  # Windows\n\n# Node.js information\nnode --version\nbun --version\n\n# Package information\nbun pm ls\nbun pm ls --depth=0\n\n# Environment information\necho $NODE_ENV\necho $DATABASE_URL\n\n# Process information\nps aux | grep node          # Linux/macOS\ntasklist | findstr node     # Windows\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-related-documentation",children:"\ud83d\udcda Related Documentation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"./setup",children:"Development Setup"})})," - Initial environment setup"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"./scripts",children:"Available Scripts"})})," - Development commands"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"./database",children:"Database & Prisma"})})," - Database operations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"./workflow",children:"Development Workflow"})})," - Daily development practices"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Master these troubleshooting techniques to become a debugging expert!"})," \ud83d\udd27"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var r=s(6540);const i={},o=r.createContext(i);function a(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);