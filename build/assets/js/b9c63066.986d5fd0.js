"use strict";(self.webpackChunknuclear_docs=self.webpackChunknuclear_docs||[]).push([[834],{4758:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>a});const l=JSON.parse('{"id":"prisma-abstraction/block","title":"Block Management","description":"The Block module provides comprehensive type-safe CRUD operations and utility functions for managing content blocks (posts) in the Nuclear application. This module handles block creation, updates, deletion, and complex relationship queries.","source":"@site/docs/prisma-abstraction/block.md","sourceDirName":"prisma-abstraction","slug":"/prisma-abstraction/block","permalink":"/docs/prisma-abstraction/block","draft":false,"unlisted":false,"editUrl":"https://github.com/nuclear-app/doc/tree/main/docs/prisma-abstraction/block.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"User Management","permalink":"/docs/prisma-abstraction/user"},"next":{"title":"Folder Organization","permalink":"/docs/prisma-abstraction/folder"}}');var t=o(4848),i=o(8453);const s={sidebar_position:3},c="Block Management",r={},a=[{value:"Overview",id:"overview",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"Core CRUD Functions",id:"core-crud-functions",level:3},{value:"<code>getBlockById(id: string): Promise&lt;Block | null&gt;</code>",id:"getblockbyidid-string-promiseblock--null",level:4},{value:"<code>getAllBlocks(): Promise&lt;Block[]&gt;</code>",id:"getallblocks-promiseblock",level:4},{value:"<code>createBlock(data: CreateBlockData): Promise&lt;Block&gt;</code>",id:"createblockdata-createblockdata-promiseblock",level:4},{value:"<code>updateBlock(id: string, data: Partial&lt;Block&gt;): Promise&lt;Block&gt;</code>",id:"updateblockid-string-data-partialblock-promiseblock",level:4},{value:"<code>deleteBlock(id: string): Promise&lt;Block&gt;</code>",id:"deleteblockid-string-promiseblock",level:4},{value:"Utility Functions",id:"utility-functions",level:3},{value:"<code>blockExists(id: string): Promise&lt;boolean&gt;</code>",id:"blockexistsid-string-promiseboolean",level:4},{value:"Relationship Queries",id:"relationship-queries",level:3},{value:"<code>getBlockAuthor(id: string): Promise&lt;User | null&gt;</code>",id:"getblockauthorid-string-promiseuser--null",level:4},{value:"<code>getBlockFolder(id: string): Promise&lt;Folder | null&gt;</code>",id:"getblockfolderid-string-promisefolder--null",level:4},{value:"Content Association Queries",id:"content-association-queries",level:3},{value:"<code>getBlockFillInTheBlanks(id: string): Promise&lt;FillInTheBlank[]&gt;</code>",id:"getblockfillintheblanksid-string-promisefillintheblank",level:4},{value:"<code>getBlockPointsUpdates(id: string): Promise&lt;PointsUpdate[]&gt;</code>",id:"getblockpointsupdatesid-string-promisepointsupdate",level:4},{value:"<code>getBlockQuestions(id: string): Promise&lt;Question[]&gt;</code>",id:"getblockquestionsid-string-promisequestion",level:4},{value:"<code>getBlockQuizzes(id: string): Promise&lt;Quiz[]&gt;</code>",id:"getblockquizzesid-string-promisequiz",level:4},{value:"<code>getBlockTopics(id: string): Promise&lt;Topic[]&gt;</code>",id:"getblocktopicsid-string-promisetopic",level:4},{value:"Data Types",id:"data-types",level:2},{value:"Block Model",id:"block-model",level:3},{value:"CreateBlockData",id:"createblockdata",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Common Error Scenarios",id:"common-error-scenarios",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Complete Block Management Workflow",id:"complete-block-management-workflow",level:3},{value:"Content Analysis Workflow",id:"content-analysis-workflow",level:3},{value:"Bulk Block Operations",id:"bulk-block-operations",level:3},{value:"Content Publishing Workflow",id:"content-publishing-workflow",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Validate Content Before Creation",id:"1-validate-content-before-creation",level:3},{value:"2. Handle Relationships Properly",id:"2-handle-relationships-properly",level:3},{value:"3. Use Efficient Queries",id:"3-use-efficient-queries",level:3},{value:"4. Implement Content Validation",id:"4-implement-content-validation",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Related Modules",id:"related-modules",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"block-management",children:"Block Management"})}),"\n",(0,t.jsx)(n.p,{children:"The Block module provides comprehensive type-safe CRUD operations and utility functions for managing content blocks (posts) in the Nuclear application. This module handles block creation, updates, deletion, and complex relationship queries."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The Block module is located in ",(0,t.jsx)(n.code,{children:"lib/block.ts"})," and provides functions for:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"CRUD Operations"}),": Create, read, update, and delete content blocks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Relationship Queries"}),": Get block authors, folders, and related content"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Content Associations"}),": Manage fill-in-the-blanks, points updates, questions, quizzes, and topics"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validation"}),": Input validation and existence checks"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,t.jsx)(n.h3,{id:"core-crud-functions",children:"Core CRUD Functions"}),"\n",(0,t.jsx)(n.h4,{id:"getblockbyidid-string-promiseblock--null",children:(0,t.jsx)(n.code,{children:"getBlockById(id: string): Promise<Block | null>"})}),"\n",(0,t.jsx)(n.p,{children:"Get a block by its unique ID."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const block = await getBlockById('block-123');\nif (block) {\n  console.log(`Found block: ${block.title}`);\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"getallblocks-promiseblock",children:(0,t.jsx)(n.code,{children:"getAllBlocks(): Promise<Block[]>"})}),"\n",(0,t.jsx)(n.p,{children:"Get all blocks in the system."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const allBlocks = await getAllBlocks();\nconsole.log(`Total blocks: ${allBlocks.length}`);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"createblockdata-createblockdata-promiseblock",children:(0,t.jsx)(n.code,{children:"createBlock(data: CreateBlockData): Promise<Block>"})}),"\n",(0,t.jsx)(n.p,{children:"Create a new content block with validated input data."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"data.title"})," (required): Block title"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"data.content"})," (required): Block content"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"data.authorId"})," (required): ID of the block author"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"data.folderId"})," (optional): ID of the containing folder"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"data.published"})," (optional): Publication status"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const newBlock = await createBlock({\n  title: 'Introduction to Nuclear Physics',\n  content: 'Nuclear physics is the study of atomic nuclei...',\n  authorId: 'user-123',\n  folderId: 'folder-456',\n  published: true\n});\n\nconsole.log(`Created block: ${newBlock.id}`);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"updateblockid-string-data-partialblock-promiseblock",children:(0,t.jsx)(n.code,{children:"updateBlock(id: string, data: Partial<Block>): Promise<Block>"})}),"\n",(0,t.jsx)(n.p,{children:"Update an existing block's information."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const updatedBlock = await updateBlock('block-123', {\n  title: 'Updated Nuclear Physics Introduction',\n  content: 'Revised content about nuclear physics...',\n  published: false\n});\n\nconsole.log(`Updated block: ${updatedBlock.title}`);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"deleteblockid-string-promiseblock",children:(0,t.jsx)(n.code,{children:"deleteBlock(id: string): Promise<Block>"})}),"\n",(0,t.jsx)(n.p,{children:"Delete a block by its ID."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const deletedBlock = await deleteBlock('block-123');\nconsole.log(`Deleted block: ${deletedBlock.title}`);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,t.jsx)(n.h4,{id:"blockexistsid-string-promiseboolean",children:(0,t.jsx)(n.code,{children:"blockExists(id: string): Promise<boolean>"})}),"\n",(0,t.jsx)(n.p,{children:"Check if a block exists by its ID."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"if (await blockExists('block-123')) {\n  console.log('Block exists');\n} else {\n  console.log('Block not found');\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"relationship-queries",children:"Relationship Queries"}),"\n",(0,t.jsx)(n.h4,{id:"getblockauthorid-string-promiseuser--null",children:(0,t.jsx)(n.code,{children:"getBlockAuthor(id: string): Promise<User | null>"})}),"\n",(0,t.jsx)(n.p,{children:"Get the author of a block."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const author = await getBlockAuthor('block-123');\nif (author) {\n  console.log(`Block author: ${author.name}`);\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"getblockfolderid-string-promisefolder--null",children:(0,t.jsx)(n.code,{children:"getBlockFolder(id: string): Promise<Folder | null>"})}),"\n",(0,t.jsx)(n.p,{children:"Get the folder containing a block."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const folder = await getBlockFolder('block-123');\nif (folder) {\n  console.log(`Block folder: ${folder.name}`);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"content-association-queries",children:"Content Association Queries"}),"\n",(0,t.jsx)(n.h4,{id:"getblockfillintheblanksid-string-promisefillintheblank",children:(0,t.jsx)(n.code,{children:"getBlockFillInTheBlanks(id: string): Promise<FillInTheBlank[]>"})}),"\n",(0,t.jsx)(n.p,{children:"Get all fill-in-the-blank items for a block."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const fillInTheBlanks = await getBlockFillInTheBlanks('block-123');\nconsole.log(`Block has ${fillInTheBlanks.length} fill-in-the-blank items`);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"getblockpointsupdatesid-string-promisepointsupdate",children:(0,t.jsx)(n.code,{children:"getBlockPointsUpdates(id: string): Promise<PointsUpdate[]>"})}),"\n",(0,t.jsx)(n.p,{children:"Get all points updates for a block."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const pointsUpdates = await getBlockPointsUpdates('block-123');\nconsole.log(`Block has ${pointsUpdates.length} points updates`);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"getblockquestionsid-string-promisequestion",children:(0,t.jsx)(n.code,{children:"getBlockQuestions(id: string): Promise<Question[]>"})}),"\n",(0,t.jsx)(n.p,{children:"Get all questions for a block."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const questions = await getBlockQuestions('block-123');\nconsole.log(`Block has ${questions.length} questions`);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"getblockquizzesid-string-promisequiz",children:(0,t.jsx)(n.code,{children:"getBlockQuizzes(id: string): Promise<Quiz[]>"})}),"\n",(0,t.jsx)(n.p,{children:"Get all quizzes for a block."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const quizzes = await getBlockQuizzes('block-123');\nconsole.log(`Block has ${quizzes.length} quizzes`);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"getblocktopicsid-string-promisetopic",children:(0,t.jsx)(n.code,{children:"getBlockTopics(id: string): Promise<Topic[]>"})}),"\n",(0,t.jsx)(n.p,{children:"Get all topics for a block."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const topics = await getBlockTopics('block-123');\nconsole.log(`Block has ${topics.length} topics`);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"data-types",children:"Data Types"}),"\n",(0,t.jsx)(n.h3,{id:"block-model",children:"Block Model"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface Block {\n  id: string;\n  title: string;\n  content: string;\n  authorId: string;\n  folderId?: string;\n  published: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"createblockdata",children:"CreateBlockData"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface CreateBlockData {\n  title: string;\n  content: string;\n  authorId: string;\n  folderId?: string;\n  published?: boolean;\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.p,{children:"The Block module defines a custom error class for consistent error handling:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class BlockError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BlockError';\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"common-error-scenarios",children:"Common Error Scenarios"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Block Not Found"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"try {\n  const block = await getBlockById('non-existent-id');\n  if (!block) {\n    throw new BlockError('Block not found');\n  }\n} catch (error) {\n  if (error instanceof BlockError) {\n    console.error('Block error:', error.message);\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Invalid Author"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"try {\n  const block = await createBlock({\n    title: 'Test Block',\n    content: 'Test content',\n    authorId: 'non-existent-user'\n  });\n} catch (error) {\n  if (error instanceof BlockError) {\n    console.error('Author validation error:', error.message);\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Missing Required Fields"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"try {\n  const block = await createBlock({\n    title: '', // Empty title\n    content: 'Test content',\n    authorId: 'user-123'\n  });\n} catch (error) {\n  if (error instanceof BlockError) {\n    console.error('Validation error:', error.message);\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,t.jsx)(n.h3,{id:"complete-block-management-workflow",children:"Complete Block Management Workflow"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"async function manageBlock() {\n  try {\n    // Create a new block\n    const newBlock = await createBlock({\n      title: 'Advanced Nuclear Physics',\n      content: 'This block covers advanced concepts...',\n      authorId: 'user-123',\n      folderId: 'folder-456',\n      published: false\n    });\n\n    // Update block content\n    const updatedBlock = await updateBlock(newBlock.id, {\n      content: 'Updated advanced nuclear physics content...',\n      published: true\n    });\n\n    // Get block relationships\n    const author = await getBlockAuthor(updatedBlock.id);\n    const folder = await getBlockFolder(updatedBlock.id);\n    const topics = await getBlockTopics(updatedBlock.id);\n\n    console.log(`Block \"${updatedBlock.title}\" by ${author?.name} in ${folder?.name}`);\n    console.log(`Contains ${topics.length} topics`);\n\n    // Check if block exists before operations\n    if (await blockExists(updatedBlock.id)) {\n      const block = await getBlockById(updatedBlock.id);\n      console.log(`Block is ${block?.published ? 'published' : 'draft'}`);\n    }\n\n  } catch (error) {\n    if (error instanceof BlockError) {\n      console.error('Block management error:', error.message);\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"content-analysis-workflow",children:"Content Analysis Workflow"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"async function analyzeBlockContent(blockId: string) {\n  try {\n    const block = await getBlockById(blockId);\n    if (!block) {\n      throw new BlockError('Block not found');\n    }\n\n    // Get all associated content\n    const [fillInTheBlanks, pointsUpdates, questions, quizzes, topics] = await Promise.all([\n      getBlockFillInTheBlanks(blockId),\n      getBlockPointsUpdates(blockId),\n      getBlockQuestions(blockId),\n      getBlockQuizzes(blockId),\n      getBlockTopics(blockId)\n    ]);\n\n    // Analyze content\n    const analysis = {\n      title: block.title,\n      contentLength: block.content.length,\n      wordCount: block.content.split(' ').length,\n      interactiveElements: {\n        fillInTheBlanks: fillInTheBlanks.length,\n        questions: questions.length,\n        quizzes: quizzes.length,\n        topics: topics.length\n      },\n      totalPoints: pointsUpdates.reduce((sum, update) => sum + update.points, 0),\n      author: await getBlockAuthor(blockId),\n      folder: await getBlockFolder(blockId)\n    };\n\n    console.log('Block Analysis:', analysis);\n    return analysis;\n\n  } catch (error) {\n    if (error instanceof BlockError) {\n      console.error('Analysis error:', error.message);\n    }\n    throw error;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"bulk-block-operations",children:"Bulk Block Operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"async function bulkBlockOperations() {\n  try {\n    // Get all blocks\n    const allBlocks = await getAllBlocks();\n    \n    // Filter by publication status\n    const publishedBlocks = allBlocks.filter(block => block.published);\n    const draftBlocks = allBlocks.filter(block => !block.published);\n    \n    console.log(`Total blocks: ${allBlocks.length}`);\n    console.log(`Published: ${publishedBlocks.length}`);\n    console.log(`Drafts: ${draftBlocks.length}`);\n\n    // Analyze each block\n    for (const block of allBlocks) {\n      const topics = await getBlockTopics(block.id);\n      const questions = await getBlockQuestions(block.id);\n      \n      console.log(`${block.title}: ${topics.length} topics, ${questions.length} questions`);\n    }\n\n    // Get blocks by author\n    const authorId = 'user-123';\n    const authorBlocks = allBlocks.filter(block => block.authorId === authorId);\n    console.log(`Author ${authorId} has ${authorBlocks.length} blocks`);\n\n  } catch (error) {\n    if (error instanceof BlockError) {\n      console.error('Bulk operation error:', error.message);\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"content-publishing-workflow",children:"Content Publishing Workflow"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"async function publishBlock(blockId: string) {\n  try {\n    // Check if block exists\n    if (!await blockExists(blockId)) {\n      throw new BlockError('Block not found');\n    }\n\n    // Get block with all content\n    const block = await getBlockById(blockId);\n    const [topics, questions, quizzes] = await Promise.all([\n      getBlockTopics(blockId),\n      getBlockQuestions(blockId),\n      getBlockQuizzes(blockId)\n    ]);\n\n    // Validate content completeness\n    if (topics.length === 0) {\n      throw new BlockError('Block must have at least one topic');\n    }\n\n    if (questions.length === 0) {\n      throw new BlockError('Block must have at least one question');\n    }\n\n    // Publish the block\n    const publishedBlock = await updateBlock(blockId, {\n      published: true\n    });\n\n    console.log(`Published block: ${publishedBlock.title}`);\n    console.log(`Content: ${topics.length} topics, ${questions.length} questions, ${quizzes.length} quizzes`);\n\n    return publishedBlock;\n\n  } catch (error) {\n    if (error instanceof BlockError) {\n      console.error('Publishing error:', error.message);\n    }\n    throw error;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-validate-content-before-creation",children:"1. Validate Content Before Creation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good - Validate content quality\nif (data.content.length < 100) {\n  throw new BlockError('Content must be at least 100 characters');\n}\n\nif (!data.title.trim()) {\n  throw new BlockError('Title cannot be empty');\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-handle-relationships-properly",children:"2. Handle Relationships Properly"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good - Check author exists before creating block\nif (!await userExists(authorId)) {\n  throw new BlockError('Author does not exist');\n}\n\n// \u2705 Good - Check folder exists if provided\nif (folderId && !await folderExists(folderId)) {\n  throw new BlockError('Folder does not exist');\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-use-efficient-queries",children:"3. Use Efficient Queries"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good - Use Promise.all for parallel queries\nconst [author, folder, topics] = await Promise.all([\n  getBlockAuthor(blockId),\n  getBlockFolder(blockId),\n  getBlockTopics(blockId)\n]);\n\n// \u274c Avoid - Sequential queries\nconst author = await getBlockAuthor(blockId);\nconst folder = await getBlockFolder(blockId);\nconst topics = await getBlockTopics(blockId);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-implement-content-validation",children:"4. Implement Content Validation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good - Validate content structure\nasync function validateBlockContent(blockId: string) {\n  const [topics, questions] = await Promise.all([\n    getBlockTopics(blockId),\n    getBlockQuestions(blockId)\n  ]);\n\n  if (topics.length === 0) {\n    throw new BlockError('Block must have topics');\n  }\n\n  if (questions.length === 0) {\n    throw new BlockError('Block must have questions');\n  }\n\n  return true;\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Indexing"}),": Ensure authorId and folderId fields are indexed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Batch Operations"}),": Use ",(0,t.jsx)(n.code,{children:"getAllBlocks()"})," for bulk operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Caching"}),": Consider caching frequently accessed block data"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pagination"}),": For large block lists, implement pagination"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Selective Loading"}),": Only load related data when needed"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./user",children:"User Management"})})," - Manage block authors"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./folder",children:"Folder Organization"})})," - Organize blocks in folders"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./topic",children:"Topic Management"})})," - Categorize block content"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./question",children:"Question Management"})})," - Add questions to blocks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./quiz",children:"Quiz System"})})," - Create quizzes for blocks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./fill-in-the-blank",children:"Fill-in-the-Blank"})})," - Add interactive content"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./points-update",children:"Points System"})})," - Track block completion"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["Next: ",(0,t.jsx)(n.a,{href:"./folder",children:"Folder Organization"})," - Learn how to organize blocks in hierarchical folder structures."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>c});var l=o(6540);const t={},i=l.createContext(t);function s(e){const n=l.useContext(i);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),l.createElement(i.Provider,{value:n},e.children)}}}]);