"use strict";(self.webpackChunknuclear_docs=self.webpackChunknuclear_docs||[]).push([[628],{3868:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"prisma-abstraction/user","title":"User Management","description":"The User module provides comprehensive type-safe CRUD operations and utility functions for managing users in the Nuclear application. This module handles user creation, updates, deletion, and relationship queries.","source":"@site/docs/prisma-abstraction/user.md","sourceDirName":"prisma-abstraction","slug":"/prisma-abstraction/user","permalink":"/docs/prisma-abstraction/user","draft":false,"unlisted":false,"editUrl":"https://github.com/nuclear-app/doc/tree/main/docs/prisma-abstraction/user.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Prisma Abstraction Layer","permalink":"/docs/prisma-abstraction/"},"next":{"title":"Block Management","permalink":"/docs/prisma-abstraction/block"}}');var i=s(4848),t=s(8453);const a={sidebar_position:2},l="User Management",o={},d=[{value:"Overview",id:"overview",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"Core CRUD Functions",id:"core-crud-functions",level:3},{value:"<code>getUserById(id: string): Promise&lt;User | null&gt;</code>",id:"getuserbyidid-string-promiseuser--null",level:4},{value:"<code>getAllUsers(): Promise&lt;User[]&gt;</code>",id:"getallusers-promiseuser",level:4},{value:"<code>getUserByEmail(email: string): Promise&lt;User | null&gt;</code>",id:"getuserbyemailemail-string-promiseuser--null",level:4},{value:"<code>createUser(data: CreateUserData): Promise&lt;User&gt;</code>",id:"createuserdata-createuserdata-promiseuser",level:4},{value:"<code>updateUser(id: string, data: Partial&lt;User&gt;): Promise&lt;User&gt;</code>",id:"updateuserid-string-data-partialuser-promiseuser",level:4},{value:"<code>deleteUser(id: string): Promise&lt;User&gt;</code>",id:"deleteuserid-string-promiseuser",level:4},{value:"Utility Functions",id:"utility-functions",level:3},{value:"<code>userExists(id: string): Promise&lt;boolean&gt;</code>",id:"userexistsid-string-promiseboolean",level:4},{value:"Relationship Queries",id:"relationship-queries",level:3},{value:"<code>getUserPosts(id: string): Promise&lt;Block[]&gt;</code>",id:"getuserpostsid-string-promiseblock",level:4},{value:"<code>getUserFolders(id: string): Promise&lt;Folder[]&gt;</code>",id:"getuserfoldersid-string-promisefolder",level:4},{value:"Data Types",id:"data-types",level:2},{value:"User Model",id:"user-model",level:3},{value:"CreateUserData",id:"createuserdata",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Common Error Scenarios",id:"common-error-scenarios",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Complete User Management Workflow",id:"complete-user-management-workflow",level:3},{value:"User Authentication Flow",id:"user-authentication-flow",level:3},{value:"Bulk User Operations",id:"bulk-user-operations",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Always Validate Input",id:"1-always-validate-input",level:3},{value:"2. Handle Errors Gracefully",id:"2-handle-errors-gracefully",level:3},{value:"3. Use Existence Checks",id:"3-use-existence-checks",level:3},{value:"4. Leverage Type Safety",id:"4-leverage-type-safety",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Related Modules",id:"related-modules",level:2}];function c(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"user-management",children:"User Management"})}),"\n",(0,i.jsx)(r.p,{children:"The User module provides comprehensive type-safe CRUD operations and utility functions for managing users in the Nuclear application. This module handles user creation, updates, deletion, and relationship queries."}),"\n",(0,i.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(r.p,{children:["The User module is located in ",(0,i.jsx)(r.code,{children:"lib/user.ts"})," and provides functions for:"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"CRUD Operations"}),": Create, read, update, and delete users"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Lookup Functions"}),": Find users by ID, email, and other criteria"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Relationship Queries"}),": Get user posts, folders, and related data"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Validation"}),": Input validation and existence checks"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,i.jsx)(r.h3,{id:"core-crud-functions",children:"Core CRUD Functions"}),"\n",(0,i.jsx)(r.h4,{id:"getuserbyidid-string-promiseuser--null",children:(0,i.jsx)(r.code,{children:"getUserById(id: string): Promise<User | null>"})}),"\n",(0,i.jsx)(r.p,{children:"Get a user by their unique ID."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"const user = await getUserById('user-123');\nif (user) {\n  console.log(`Found user: ${user.name}`);\n}\n"})}),"\n",(0,i.jsx)(r.h4,{id:"getallusers-promiseuser",children:(0,i.jsx)(r.code,{children:"getAllUsers(): Promise<User[]>"})}),"\n",(0,i.jsx)(r.p,{children:"Get all users in the system."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"const allUsers = await getAllUsers();\nconsole.log(`Total users: ${allUsers.length}`);\n"})}),"\n",(0,i.jsx)(r.h4,{id:"getuserbyemailemail-string-promiseuser--null",children:(0,i.jsx)(r.code,{children:"getUserByEmail(email: string): Promise<User | null>"})}),"\n",(0,i.jsx)(r.p,{children:"Get a user by their email address."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"const user = await getUserByEmail('user@example.com');\nif (user) {\n  console.log(`User found: ${user.name}`);\n}\n"})}),"\n",(0,i.jsx)(r.h4,{id:"createuserdata-createuserdata-promiseuser",children:(0,i.jsx)(r.code,{children:"createUser(data: CreateUserData): Promise<User>"})}),"\n",(0,i.jsx)(r.p,{children:"Create a new user with validated input data."}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"data.email"})," (required): User's email address"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"data.name"})," (optional): User's display name"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"data.mode"})," (optional): User mode ('STUDENT' | 'TEACHER' | 'ADMIN')"]}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"const newUser = await createUser({\n  email: 'john.doe@example.com',\n  name: 'John Doe',\n  mode: 'STUDENT'\n});\n\nconsole.log(`Created user: ${newUser.id}`);\n"})}),"\n",(0,i.jsx)(r.h4,{id:"updateuserid-string-data-partialuser-promiseuser",children:(0,i.jsx)(r.code,{children:"updateUser(id: string, data: Partial<User>): Promise<User>"})}),"\n",(0,i.jsx)(r.p,{children:"Update an existing user's information."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"const updatedUser = await updateUser('user-123', {\n  name: 'Jane Doe',\n  mode: 'TEACHER'\n});\n\nconsole.log(`Updated user: ${updatedUser.name}`);\n"})}),"\n",(0,i.jsx)(r.h4,{id:"deleteuserid-string-promiseuser",children:(0,i.jsx)(r.code,{children:"deleteUser(id: string): Promise<User>"})}),"\n",(0,i.jsx)(r.p,{children:"Delete a user by their ID."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"const deletedUser = await deleteUser('user-123');\nconsole.log(`Deleted user: ${deletedUser.email}`);\n"})}),"\n",(0,i.jsx)(r.h3,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,i.jsx)(r.h4,{id:"userexistsid-string-promiseboolean",children:(0,i.jsx)(r.code,{children:"userExists(id: string): Promise<boolean>"})}),"\n",(0,i.jsx)(r.p,{children:"Check if a user exists by their ID."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"if (await userExists('user-123')) {\n  console.log('User exists');\n} else {\n  console.log('User not found');\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"relationship-queries",children:"Relationship Queries"}),"\n",(0,i.jsx)(r.h4,{id:"getuserpostsid-string-promiseblock",children:(0,i.jsx)(r.code,{children:"getUserPosts(id: string): Promise<Block[]>"})}),"\n",(0,i.jsx)(r.p,{children:"Get all blocks (posts) authored by a user."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"const userPosts = await getUserPosts('user-123');\nconsole.log(`User has ${userPosts.length} posts`);\n"})}),"\n",(0,i.jsx)(r.h4,{id:"getuserfoldersid-string-promisefolder",children:(0,i.jsx)(r.code,{children:"getUserFolders(id: string): Promise<Folder[]>"})}),"\n",(0,i.jsx)(r.p,{children:"Get all folders owned by a user."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"const userFolders = await getUserFolders('user-123');\nconsole.log(`User has ${userFolders.length} folders`);\n"})}),"\n",(0,i.jsx)(r.h2,{id:"data-types",children:"Data Types"}),"\n",(0,i.jsx)(r.h3,{id:"user-model",children:"User Model"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"interface User {\n  id: string;\n  email: string;\n  name?: string;\n  mode: 'STUDENT' | 'TEACHER' | 'ADMIN';\n  createdAt: Date;\n  updatedAt: Date;\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"createuserdata",children:"CreateUserData"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"interface CreateUserData {\n  email: string;\n  name?: string;\n  mode?: 'STUDENT' | 'TEACHER' | 'ADMIN';\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(r.p,{children:"The User module defines a custom error class for consistent error handling:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"class UserError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UserError';\n  }\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"common-error-scenarios",children:"Common Error Scenarios"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.strong,{children:"User Not Found"})}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"try {\n  const user = await getUserById('non-existent-id');\n  if (!user) {\n    throw new UserError('User not found');\n  }\n} catch (error) {\n  if (error instanceof UserError) {\n    console.error('User error:', error.message);\n  }\n}\n"})}),"\n",(0,i.jsxs)(r.ol,{start:"2",children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.strong,{children:"Invalid Email Format"})}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"try {\n  const user = await createUser({\n    email: 'invalid-email',\n    name: 'Test User'\n  });\n} catch (error) {\n  if (error instanceof UserError) {\n    console.error('Validation error:', error.message);\n  }\n}\n"})}),"\n",(0,i.jsxs)(r.ol,{start:"3",children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.strong,{children:"Duplicate Email"})}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"try {\n  const user = await createUser({\n    email: 'existing@example.com',\n    name: 'Duplicate User'\n  });\n} catch (error) {\n  if (error instanceof UserError) {\n    console.error('Duplicate email error:', error.message);\n  }\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,i.jsx)(r.h3,{id:"complete-user-management-workflow",children:"Complete User Management Workflow"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"async function manageUser() {\n  try {\n    // Create a new user\n    const newUser = await createUser({\n      email: 'student@example.com',\n      name: 'Alice Student',\n      mode: 'STUDENT'\n    });\n\n    // Update user information\n    const updatedUser = await updateUser(newUser.id, {\n      name: 'Alice Johnson',\n      mode: 'TEACHER'\n    });\n\n    // Get user's content\n    const userPosts = await getUserPosts(updatedUser.id);\n    const userFolders = await getUserFolders(updatedUser.id);\n\n    console.log(`User ${updatedUser.name} has ${userPosts.length} posts and ${userFolders.length} folders`);\n\n    // Check if user exists before operations\n    if (await userExists(updatedUser.id)) {\n      // Perform additional operations\n      const user = await getUserById(updatedUser.id);\n      console.log(`Current user mode: ${user?.mode}`);\n    }\n\n  } catch (error) {\n    if (error instanceof UserError) {\n      console.error('User management error:', error.message);\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"user-authentication-flow",children:"User Authentication Flow"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"async function authenticateUser(email: string) {\n  try {\n    const user = await getUserByEmail(email);\n    \n    if (!user) {\n      throw new UserError('User not found');\n    }\n\n    // Check user mode for authorization\n    if (user.mode === 'ADMIN') {\n      console.log('Admin access granted');\n    } else if (user.mode === 'TEACHER') {\n      console.log('Teacher access granted');\n    } else {\n      console.log('Student access granted');\n    }\n\n    return user;\n  } catch (error) {\n    if (error instanceof UserError) {\n      console.error('Authentication failed:', error.message);\n    }\n    throw error;\n  }\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"bulk-user-operations",children:"Bulk User Operations"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"async function bulkUserOperations() {\n  try {\n    // Get all users\n    const allUsers = await getAllUsers();\n    \n    // Filter users by mode\n    const students = allUsers.filter(user => user.mode === 'STUDENT');\n    const teachers = allUsers.filter(user => user.mode === 'TEACHER');\n    \n    console.log(`Total users: ${allUsers.length}`);\n    console.log(`Students: ${students.length}`);\n    console.log(`Teachers: ${teachers.length}`);\n\n    // Get content for each user\n    for (const user of allUsers) {\n      const posts = await getUserPosts(user.id);\n      const folders = await getUserFolders(user.id);\n      \n      console.log(`${user.name}: ${posts.length} posts, ${folders.length} folders`);\n    }\n\n  } catch (error) {\n    if (error instanceof UserError) {\n      console.error('Bulk operation error:', error.message);\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(r.h3,{id:"1-always-validate-input",children:"1. Always Validate Input"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"// \u2705 Good - Validate email format\nif (!email.includes('@')) {\n  throw new UserError('Invalid email format');\n}\n\n// \u2705 Good - Check for required fields\nif (!data.email) {\n  throw new UserError('Email is required');\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"2-handle-errors-gracefully",children:"2. Handle Errors Gracefully"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"// \u2705 Good - Comprehensive error handling\ntry {\n  const user = await createUser(data);\n  return user;\n} catch (error) {\n  if (error instanceof UserError) {\n    // Handle user-specific errors\n    console.error('User creation failed:', error.message);\n  } else {\n    // Handle other errors\n    console.error('Unexpected error:', error);\n  }\n  throw error;\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"3-use-existence-checks",children:"3. Use Existence Checks"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"// \u2705 Good - Check existence before operations\nif (await userExists(userId)) {\n  const user = await updateUser(userId, data);\n  return user;\n} else {\n  throw new UserError('User not found');\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"4-leverage-type-safety",children:"4. Leverage Type Safety"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"// \u2705 Good - Use TypeScript for type safety\nconst user: User = await getUserById(id);\nconsole.log(user.mode); // TypeScript knows this is 'STUDENT' | 'TEACHER' | 'ADMIN'\n\n// \u274c Avoid - Manual type checking\nconst user = await getUserById(id);\nif (user.mode === 'STUDENT' || user.mode === 'TEACHER' || user.mode === 'ADMIN') {\n  // Manual validation\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Indexing"}),": Ensure email fields are indexed for fast lookups"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Batch Operations"}),": Use ",(0,i.jsx)(r.code,{children:"getAllUsers()"})," for bulk operations"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Caching"}),": Consider caching frequently accessed user data"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Pagination"}),": For large user lists, implement pagination"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"./block",children:"Block Management"})})," - Manage user-created content"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"./folder",children:"Folder Organization"})})," - Organize user content"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"./quiz",children:"Quiz System"})})," - User quiz interactions"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"./points-update",children:"Points System"})})," - Track user progress"]}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsxs)(r.p,{children:["Next: ",(0,i.jsx)(r.a,{href:"./block",children:"Block Management"})," - Learn how to manage content blocks and their relationships with users."]})]})}function u(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>a,x:()=>l});var n=s(6540);const i={},t=n.createContext(i);function a(e){const r=n.useContext(t);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(t.Provider,{value:r},e.children)}}}]);