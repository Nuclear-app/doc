"use strict";(self.webpackChunknuclear_docs=self.webpackChunknuclear_docs||[]).push([[286],{3301:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>r,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"prisma-abstraction/topic","title":"Topic Management","description":"The Topic module provides comprehensive type-safe CRUD operations and utility functions for managing topics in the Nuclear application. This module handles topic creation, updates, deletion, and advanced search and filtering capabilities.","source":"@site/docs/prisma-abstraction/topic.md","sourceDirName":"prisma-abstraction","slug":"/prisma-abstraction/topic","permalink":"/docs/prisma-abstraction/topic","draft":false,"unlisted":false,"editUrl":"https://github.com/nuclear-app/doc/tree/main/docs/prisma-abstraction/topic.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Question Management","permalink":"/docs/prisma-abstraction/question"},"next":{"title":"Fill-in-the-Blank","permalink":"/docs/prisma-abstraction/fill-in-the-blank"}}');var c=n(4848),t=n(8453);const s={sidebar_position:7},a="Topic Management",r={},l=[{value:"Overview",id:"overview",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"Core CRUD Functions",id:"core-crud-functions",level:3},{value:"<code>getTopicById(id: string): Promise&lt;Topic | null&gt;</code>",id:"gettopicbyidid-string-promisetopic--null",level:4},{value:"<code>getAllTopics(): Promise&lt;Topic[]&gt;</code>",id:"getalltopics-promisetopic",level:4},{value:"<code>createTopic(data: CreateTopicData): Promise&lt;Topic&gt;</code>",id:"createtopicdata-createtopicdata-promisetopic",level:4},{value:"<code>updateTopic(id: string, data: Partial&lt;Topic&gt;): Promise&lt;Topic&gt;</code>",id:"updatetopicid-string-data-partialtopic-promisetopic",level:4},{value:"<code>deleteTopic(id: string): Promise&lt;Topic&gt;</code>",id:"deletetopicid-string-promisetopic",level:4},{value:"Utility Functions",id:"utility-functions",level:3},{value:"<code>topicExists(id: string): Promise&lt;boolean&gt;</code>",id:"topicexistsid-string-promiseboolean",level:4},{value:"Relationship Queries",id:"relationship-queries",level:3},{value:"<code>getTopicBlock(id: string): Promise&lt;Block | null&gt;</code>",id:"gettopicblockid-string-promiseblock--null",level:4},{value:"<code>getTopicQuizzes(id: string): Promise&lt;Quiz[]&gt;</code>",id:"gettopicquizzesid-string-promisequiz",level:4},{value:"<code>getTopicsByBlock(blockId: string): Promise&lt;Topic[]&gt;</code>",id:"gettopicsbyblockblockid-string-promisetopic",level:4},{value:"Advanced Functions",id:"advanced-functions",level:3},{value:"<code>getTopicWithRelations(id: string)</code>",id:"gettopicwithrelationsid-string",level:4},{value:"Search and Filter Functions",id:"search-and-filter-functions",level:3},{value:"<code>searchTopicsByName(searchTerm: string): Promise&lt;Topic[]&gt;</code>",id:"searchtopicsbynamesearchterm-string-promisetopic",level:4},{value:"<code>getTopicsWithExamples(): Promise&lt;Topic[]&gt;</code>",id:"gettopicswithexamples-promisetopic",level:4},{value:"<code>getRandomTopic(): Promise&lt;Topic | null&gt;</code>",id:"getrandomtopic-promisetopic--null",level:4},{value:"<code>getRandomTopicByBlock(blockId: string): Promise&lt;Topic | null&gt;</code>",id:"getrandomtopicbyblockblockid-string-promisetopic--null",level:4},{value:"<code>getTopicsWithQuizzes(): Promise&lt;Topic[]&gt;</code>",id:"gettopicswithquizzes-promisetopic",level:4},{value:"Data Types",id:"data-types",level:2},{value:"Topic Model",id:"topic-model",level:3},{value:"CreateTopicData",id:"createtopicdata",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Common Error Scenarios",id:"common-error-scenarios",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Complete Topic Management Workflow",id:"complete-topic-management-workflow",level:3},{value:"Topic Search and Discovery",id:"topic-search-and-discovery",level:3},{value:"Block Topic Organization",id:"block-topic-organization",level:3},{value:"Topic Content Enhancement",id:"topic-content-enhancement",level:3},{value:"Topic Quiz Integration",id:"topic-quiz-integration",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Validate Topic Content",id:"1-validate-topic-content",level:3},{value:"2. Handle Relationships Properly",id:"2-handle-relationships-properly",level:3},{value:"3. Use Efficient Queries",id:"3-use-efficient-queries",level:3},{value:"4. Implement Topic Validation",id:"4-implement-topic-validation",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Related Modules",id:"related-modules",level:2}];function p(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(i.header,{children:(0,c.jsx)(i.h1,{id:"topic-management",children:"Topic Management"})}),"\n",(0,c.jsx)(i.p,{children:"The Topic module provides comprehensive type-safe CRUD operations and utility functions for managing topics in the Nuclear application. This module handles topic creation, updates, deletion, and advanced search and filtering capabilities."}),"\n",(0,c.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,c.jsxs)(i.p,{children:["The Topic module is located in ",(0,c.jsx)(i.code,{children:"lib/topic.ts"})," and provides functions for:"]}),"\n",(0,c.jsxs)(i.ul,{children:["\n",(0,c.jsxs)(i.li,{children:[(0,c.jsx)(i.strong,{children:"CRUD Operations"}),": Create, read, update, and delete topics"]}),"\n",(0,c.jsxs)(i.li,{children:[(0,c.jsx)(i.strong,{children:"Block Associations"}),": Link topics to specific content blocks"]}),"\n",(0,c.jsxs)(i.li,{children:[(0,c.jsx)(i.strong,{children:"Search and Filter"}),": Advanced search by name and content filtering"]}),"\n",(0,c.jsxs)(i.li,{children:[(0,c.jsx)(i.strong,{children:"Utility Functions"}),": Random selection, examples, and quiz associations"]}),"\n",(0,c.jsxs)(i.li,{children:[(0,c.jsx)(i.strong,{children:"Validation"}),": Input validation and existence checks"]}),"\n"]}),"\n",(0,c.jsx)(i.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,c.jsx)(i.h3,{id:"core-crud-functions",children:"Core CRUD Functions"}),"\n",(0,c.jsx)(i.h4,{id:"gettopicbyidid-string-promisetopic--null",children:(0,c.jsx)(i.code,{children:"getTopicById(id: string): Promise<Topic | null>"})}),"\n",(0,c.jsx)(i.p,{children:"Get a topic by its unique ID."}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"const topic = await getTopicById('topic-123');\nif (topic) {\n  console.log(`Found topic: ${topic.name}`);\n}\n"})}),"\n",(0,c.jsx)(i.h4,{id:"getalltopics-promisetopic",children:(0,c.jsx)(i.code,{children:"getAllTopics(): Promise<Topic[]>"})}),"\n",(0,c.jsx)(i.p,{children:"Get all topics in the system."}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"const allTopics = await getAllTopics();\nconsole.log(`Total topics: ${allTopics.length}`);\n"})}),"\n",(0,c.jsx)(i.h4,{id:"createtopicdata-createtopicdata-promisetopic",children:(0,c.jsx)(i.code,{children:"createTopic(data: CreateTopicData): Promise<Topic>"})}),"\n",(0,c.jsx)(i.p,{children:"Create a new topic with validated input data."}),"\n",(0,c.jsx)(i.p,{children:(0,c.jsx)(i.strong,{children:"Parameters:"})}),"\n",(0,c.jsxs)(i.ul,{children:["\n",(0,c.jsxs)(i.li,{children:[(0,c.jsx)(i.code,{children:"data.name"})," (required): Topic name"]}),"\n",(0,c.jsxs)(i.li,{children:[(0,c.jsx)(i.code,{children:"data.description"})," (optional): Topic description"]}),"\n",(0,c.jsxs)(i.li,{children:[(0,c.jsx)(i.code,{children:"data.blockId"})," (optional): ID of the associated block"]}),"\n",(0,c.jsxs)(i.li,{children:[(0,c.jsx)(i.code,{children:"data.examples"})," (optional): Example content for the topic"]}),"\n"]}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"const newTopic = await createTopic({\n  name: 'Nuclear Fusion',\n  description: 'The process of combining atomic nuclei',\n  blockId: 'block-123',\n  examples: 'Sun fusion, hydrogen bombs, fusion reactors'\n});\n\nconsole.log(`Created topic: ${newTopic.id}`);\n"})}),"\n",(0,c.jsx)(i.h4,{id:"updatetopicid-string-data-partialtopic-promisetopic",children:(0,c.jsx)(i.code,{children:"updateTopic(id: string, data: Partial<Topic>): Promise<Topic>"})}),"\n",(0,c.jsx)(i.p,{children:"Update an existing topic's information."}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"const updatedTopic = await updateTopic('topic-123', {\n  name: 'Advanced Nuclear Fusion',\n  description: 'Advanced concepts in nuclear fusion',\n  examples: 'ITER project, magnetic confinement, inertial confinement'\n});\n\nconsole.log(`Updated topic: ${updatedTopic.name}`);\n"})}),"\n",(0,c.jsx)(i.h4,{id:"deletetopicid-string-promisetopic",children:(0,c.jsx)(i.code,{children:"deleteTopic(id: string): Promise<Topic>"})}),"\n",(0,c.jsx)(i.p,{children:"Delete a topic by its ID."}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"const deletedTopic = await deleteTopic('topic-123');\nconsole.log(`Deleted topic: ${deletedTopic.name}`);\n"})}),"\n",(0,c.jsx)(i.h3,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,c.jsx)(i.h4,{id:"topicexistsid-string-promiseboolean",children:(0,c.jsx)(i.code,{children:"topicExists(id: string): Promise<boolean>"})}),"\n",(0,c.jsx)(i.p,{children:"Check if a topic exists by its ID."}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"if (await topicExists('topic-123')) {\n  console.log('Topic exists');\n} else {\n  console.log('Topic not found');\n}\n"})}),"\n",(0,c.jsx)(i.h3,{id:"relationship-queries",children:"Relationship Queries"}),"\n",(0,c.jsx)(i.h4,{id:"gettopicblockid-string-promiseblock--null",children:(0,c.jsx)(i.code,{children:"getTopicBlock(id: string): Promise<Block | null>"})}),"\n",(0,c.jsx)(i.p,{children:"Get the block associated with a topic."}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"const block = await getTopicBlock('topic-123');\nif (block) {\n  console.log(`Topic block: ${block.title}`);\n}\n"})}),"\n",(0,c.jsx)(i.h4,{id:"gettopicquizzesid-string-promisequiz",children:(0,c.jsx)(i.code,{children:"getTopicQuizzes(id: string): Promise<Quiz[]>"})}),"\n",(0,c.jsx)(i.p,{children:"Get all quizzes for a topic."}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"const topicQuizzes = await getTopicQuizzes('topic-123');\nconsole.log(`Topic has ${topicQuizzes.length} quizzes`);\n"})}),"\n",(0,c.jsx)(i.h4,{id:"gettopicsbyblockblockid-string-promisetopic",children:(0,c.jsx)(i.code,{children:"getTopicsByBlock(blockId: string): Promise<Topic[]>"})}),"\n",(0,c.jsx)(i.p,{children:"Get all topics for a specific block."}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"const blockTopics = await getTopicsByBlock('block-123');\nconsole.log(`Block has ${blockTopics.length} topics`);\n"})}),"\n",(0,c.jsx)(i.h3,{id:"advanced-functions",children:"Advanced Functions"}),"\n",(0,c.jsx)(i.h4,{id:"gettopicwithrelationsid-string",children:(0,c.jsx)(i.code,{children:"getTopicWithRelations(id: string)"})}),"\n",(0,c.jsx)(i.p,{children:"Get a topic with all related data."}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"const topicWithRelations = await getTopicWithRelations('topic-123');\nconsole.log(`Topic: ${topicWithRelations.name}`);\nconsole.log(`Block: ${topicWithRelations.block?.title}`);\nconsole.log(`Quizzes: ${topicWithRelations.quizzes.length}`);\n"})}),"\n",(0,c.jsx)(i.h3,{id:"search-and-filter-functions",children:"Search and Filter Functions"}),"\n",(0,c.jsx)(i.h4,{id:"searchtopicsbynamesearchterm-string-promisetopic",children:(0,c.jsx)(i.code,{children:"searchTopicsByName(searchTerm: string): Promise<Topic[]>"})}),"\n",(0,c.jsx)(i.p,{children:"Search topics by name (case-insensitive)."}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"const searchResults = await searchTopicsByName('nuclear');\nconsole.log(`Found ${searchResults.length} topics containing 'nuclear'`);\n"})}),"\n",(0,c.jsx)(i.h4,{id:"gettopicswithexamples-promisetopic",children:(0,c.jsx)(i.code,{children:"getTopicsWithExamples(): Promise<Topic[]>"})}),"\n",(0,c.jsx)(i.p,{children:"Get all topics that have examples."}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"const topicsWithExamples = await getTopicsWithExamples();\nconsole.log(`Found ${topicsWithExamples.length} topics with examples`);\n"})}),"\n",(0,c.jsx)(i.h4,{id:"getrandomtopic-promisetopic--null",children:(0,c.jsx)(i.code,{children:"getRandomTopic(): Promise<Topic | null>"})}),"\n",(0,c.jsx)(i.p,{children:"Get a random topic."}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"const randomTopic = await getRandomTopic();\nif (randomTopic) {\n  console.log(`Random topic: ${randomTopic.name}`);\n}\n"})}),"\n",(0,c.jsx)(i.h4,{id:"getrandomtopicbyblockblockid-string-promisetopic--null",children:(0,c.jsx)(i.code,{children:"getRandomTopicByBlock(blockId: string): Promise<Topic | null>"})}),"\n",(0,c.jsx)(i.p,{children:"Get a random topic for a specific block."}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"const randomBlockTopic = await getRandomTopicByBlock('block-123');\nif (randomBlockTopic) {\n  console.log(`Random block topic: ${randomBlockTopic.name}`);\n}\n"})}),"\n",(0,c.jsx)(i.h4,{id:"gettopicswithquizzes-promisetopic",children:(0,c.jsx)(i.code,{children:"getTopicsWithQuizzes(): Promise<Topic[]>"})}),"\n",(0,c.jsx)(i.p,{children:"Get all topics that have quizzes."}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"const topicsWithQuizzes = await getTopicsWithQuizzes();\nconsole.log(`Found ${topicsWithQuizzes.length} topics with quizzes`);\n"})}),"\n",(0,c.jsx)(i.h2,{id:"data-types",children:"Data Types"}),"\n",(0,c.jsx)(i.h3,{id:"topic-model",children:"Topic Model"}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"interface Topic {\n  id: string;\n  name: string;\n  description?: string;\n  blockId?: string;\n  examples?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n"})}),"\n",(0,c.jsx)(i.h3,{id:"createtopicdata",children:"CreateTopicData"}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"interface CreateTopicData {\n  name: string;\n  description?: string;\n  blockId?: string;\n  examples?: string;\n}\n"})}),"\n",(0,c.jsx)(i.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,c.jsx)(i.p,{children:"The Topic module defines a custom error class for consistent error handling:"}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"class TopicError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TopicError';\n  }\n}\n"})}),"\n",(0,c.jsx)(i.h3,{id:"common-error-scenarios",children:"Common Error Scenarios"}),"\n",(0,c.jsxs)(i.ol,{children:["\n",(0,c.jsx)(i.li,{children:(0,c.jsx)(i.strong,{children:"Topic Not Found"})}),"\n"]}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"try {\n  const topic = await getTopicById('non-existent-id');\n  if (!topic) {\n    throw new TopicError('Topic not found');\n  }\n} catch (error) {\n  if (error instanceof TopicError) {\n    console.error('Topic error:', error.message);\n  }\n}\n"})}),"\n",(0,c.jsxs)(i.ol,{start:"2",children:["\n",(0,c.jsx)(i.li,{children:(0,c.jsx)(i.strong,{children:"Invalid Block Association"})}),"\n"]}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"try {\n  const topic = await createTopic({\n    name: 'Test Topic',\n    blockId: 'non-existent-block'\n  });\n} catch (error) {\n  if (error instanceof TopicError) {\n    console.error('Block validation error:', error.message);\n  }\n}\n"})}),"\n",(0,c.jsxs)(i.ol,{start:"3",children:["\n",(0,c.jsx)(i.li,{children:(0,c.jsx)(i.strong,{children:"Duplicate Topic Name"})}),"\n"]}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"try {\n  const topic = await createTopic({\n    name: 'Existing Topic Name',\n    description: 'This name already exists'\n  });\n} catch (error) {\n  if (error instanceof TopicError) {\n    console.error('Duplicate name error:', error.message);\n  }\n}\n"})}),"\n",(0,c.jsx)(i.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,c.jsx)(i.h3,{id:"complete-topic-management-workflow",children:"Complete Topic Management Workflow"}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"async function manageTopic() {\n  try {\n    // Create a new topic\n    const newTopic = await createTopic({\n      name: 'Nuclear Fission',\n      description: 'The process of splitting atomic nuclei',\n      blockId: 'block-123',\n      examples: 'Nuclear power plants, atomic bombs, uranium decay'\n    });\n\n    // Update topic information\n    const updatedTopic = await updateTopic(newTopic.id, {\n      description: 'The process of splitting atomic nuclei to release energy',\n      examples: 'Nuclear power plants, atomic bombs, uranium decay, chain reactions'\n    });\n\n    // Get topic relationships\n    const block = await getTopicBlock(updatedTopic.id);\n    const quizzes = await getTopicQuizzes(updatedTopic.id);\n\n    console.log(`Topic: \"${updatedTopic.name}\"`);\n    console.log(`Block: ${block?.title}, Quizzes: ${quizzes.length}`);\n    console.log(`Examples: ${updatedTopic.examples}`);\n\n    // Check if topic exists before operations\n    if (await topicExists(updatedTopic.id)) {\n      const topic = await getTopicById(updatedTopic.id);\n      console.log(`Topic created: ${topic?.createdAt}`);\n    }\n\n  } catch (error) {\n    if (error instanceof TopicError) {\n      console.error('Topic management error:', error.message);\n    }\n  }\n}\n"})}),"\n",(0,c.jsx)(i.h3,{id:"topic-search-and-discovery",children:"Topic Search and Discovery"}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"async function discoverTopics() {\n  try {\n    // Search for topics by name\n    const nuclearTopics = await searchTopicsByName('nuclear');\n    console.log(`Found ${nuclearTopics.length} nuclear-related topics`);\n\n    // Get topics with examples\n    const topicsWithExamples = await getTopicsWithExamples();\n    console.log(`Found ${topicsWithExamples.length} topics with examples`);\n\n    // Get topics with quizzes\n    const topicsWithQuizzes = await getTopicsWithQuizzes();\n    console.log(`Found ${topicsWithQuizzes.length} topics with quizzes`);\n\n    // Get random topics for exploration\n    const randomTopic = await getRandomTopic();\n    if (randomTopic) {\n      console.log(`Random topic to explore: ${randomTopic.name}`);\n      console.log(`Description: ${randomTopic.description}`);\n    }\n\n    // Search results analysis\n    for (const topic of nuclearTopics) {\n      const quizzes = await getTopicQuizzes(topic.id);\n      console.log(`${topic.name}: ${quizzes.length} quizzes, Examples: ${topic.examples ? 'Yes' : 'No'}`);\n    }\n\n  } catch (error) {\n    if (error instanceof TopicError) {\n      console.error('Topic discovery error:', error.message);\n    }\n  }\n}\n"})}),"\n",(0,c.jsx)(i.h3,{id:"block-topic-organization",children:"Block Topic Organization"}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"async function organizeBlockTopics(blockId: string) {\n  try {\n    // Get all topics for the block\n    const blockTopics = await getTopicsByBlock(blockId);\n    \n    console.log(`Block has ${blockTopics.length} topics`);\n\n    // Analyze topic distribution\n    const analysis = {\n      totalTopics: blockTopics.length,\n      topicsWithExamples: blockTopics.filter(t => t.examples).length,\n      topicsWithQuizzes: 0,\n      averageDescriptionLength: 0\n    };\n\n    // Calculate statistics\n    let totalDescriptionLength = 0;\n    for (const topic of blockTopics) {\n      const quizzes = await getTopicQuizzes(topic.id);\n      analysis.topicsWithQuizzes += quizzes.length;\n      \n      if (topic.description) {\n        totalDescriptionLength += topic.description.length;\n      }\n    }\n\n    if (blockTopics.length > 0) {\n      analysis.averageDescriptionLength = totalDescriptionLength / blockTopics.length;\n    }\n\n    console.log('Block Topic Analysis:', analysis);\n\n    // Create additional topics if needed\n    if (blockTopics.length < 5) {\n      const additionalTopics = [\n        { name: 'Basic Concepts', description: 'Fundamental principles' },\n        { name: 'Advanced Applications', description: 'Real-world applications' },\n        { name: 'Historical Context', description: 'Historical development' }\n      ];\n\n      for (const topicData of additionalTopics) {\n        if (!blockTopics.find(t => t.name === topicData.name)) {\n          const topic = await createTopic({\n            ...topicData,\n            blockId: blockId\n          });\n          console.log(`Created topic: ${topic.name}`);\n        }\n      }\n    }\n\n  } catch (error) {\n    if (error instanceof TopicError) {\n      console.error('Block topic organization error:', error.message);\n    }\n  }\n}\n"})}),"\n",(0,c.jsx)(i.h3,{id:"topic-content-enhancement",children:"Topic Content Enhancement"}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"async function enhanceTopicContent() {\n  try {\n    // Get all topics\n    const allTopics = await getAllTopics();\n    \n    // Find topics that need enhancement\n    const topicsNeedingExamples = allTopics.filter(topic => !topic.examples);\n    const topicsNeedingDescription = allTopics.filter(topic => !topic.description);\n\n    console.log(`Topics needing examples: ${topicsNeedingExamples.length}`);\n    console.log(`Topics needing descriptions: ${topicsNeedingDescription.length}`);\n\n    // Enhance topics with missing examples\n    for (const topic of topicsNeedingExamples) {\n      const enhancedTopic = await updateTopic(topic.id, {\n        examples: `Examples for ${topic.name}: Real-world applications, case studies, demonstrations`\n      });\n      console.log(`Enhanced topic \"${enhancedTopic.name}\" with examples`);\n    }\n\n    // Enhance topics with missing descriptions\n    for (const topic of topicsNeedingDescription) {\n      const enhancedTopic = await updateTopic(topic.id, {\n        description: `Comprehensive overview of ${topic.name} including key concepts and applications`\n      });\n      console.log(`Enhanced topic \"${enhancedTopic.name}\" with description`);\n    }\n\n    // Get random topics for content review\n    const randomTopics = [];\n    for (let i = 0; i < 3; i++) {\n      const randomTopic = await getRandomTopic();\n      if (randomTopic) {\n        randomTopics.push(randomTopic);\n      }\n    }\n\n    console.log('Random topics for content review:');\n    for (const topic of randomTopics) {\n      console.log(`- ${topic.name}: ${topic.description || 'No description'}`);\n    }\n\n  } catch (error) {\n    if (error instanceof TopicError) {\n      console.error('Topic enhancement error:', error.message);\n    }\n  }\n}\n"})}),"\n",(0,c.jsx)(i.h3,{id:"topic-quiz-integration",children:"Topic Quiz Integration"}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"async function integrateTopicQuizzes() {\n  try {\n    // Get all topics\n    const allTopics = await getAllTopics();\n    \n    // Find topics without quizzes\n    const topicsWithoutQuizzes = [];\n    for (const topic of allTopics) {\n      const quizzes = await getTopicQuizzes(topic.id);\n      if (quizzes.length === 0) {\n        topicsWithoutQuizzes.push(topic);\n      }\n    }\n\n    console.log(`Found ${topicsWithoutQuizzes.length} topics without quizzes`);\n\n    // Create quizzes for topics that don't have them\n    for (const topic of topicsWithoutQuizzes) {\n      // This would integrate with the Quiz module\n      console.log(`Creating quiz for topic: ${topic.name}`);\n      \n      // Example quiz creation (would need Quiz module integration)\n      // const quiz = await createQuiz({\n      //   title: `${topic.name} Assessment`,\n      //   description: `Quiz for topic: ${topic.name}`,\n      //   topicId: topic.id,\n      //   timeLimit: 15,\n      //   passingScore: 70\n      // });\n    }\n\n    // Get topics with multiple quizzes\n    const topicsWithMultipleQuizzes = [];\n    for (const topic of allTopics) {\n      const quizzes = await getTopicQuizzes(topic.id);\n      if (quizzes.length > 1) {\n        topicsWithMultipleQuizzes.push({\n          topic,\n          quizCount: quizzes.length\n        });\n      }\n    }\n\n    console.log(`Topics with multiple quizzes: ${topicsWithMultipleQuizzes.length}`);\n    for (const item of topicsWithMultipleQuizzes) {\n      console.log(`${item.topic.name}: ${item.quizCount} quizzes`);\n    }\n\n  } catch (error) {\n    if (error instanceof TopicError) {\n      console.error('Topic quiz integration error:', error.message);\n    }\n  }\n}\n"})}),"\n",(0,c.jsx)(i.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,c.jsx)(i.h3,{id:"1-validate-topic-content",children:"1. Validate Topic Content"}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"// \u2705 Good - Validate topic name quality\nif (!data.name.trim()) {\n  throw new TopicError('Topic name cannot be empty');\n}\n\nif (data.name.length > 100) {\n  throw new TopicError('Topic name too long');\n}\n\n// \u2705 Good - Validate description length\nif (data.description && data.description.length > 1000) {\n  throw new TopicError('Topic description too long');\n}\n"})}),"\n",(0,c.jsx)(i.h3,{id:"2-handle-relationships-properly",children:"2. Handle Relationships Properly"}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"// \u2705 Good - Check block exists before creating topic\nif (blockId && !await blockExists(blockId)) {\n  throw new TopicError('Block does not exist');\n}\n"})}),"\n",(0,c.jsx)(i.h3,{id:"3-use-efficient-queries",children:"3. Use Efficient Queries"}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"// \u2705 Good - Use Promise.all for parallel queries\nconst [block, quizzes] = await Promise.all([\n  getTopicBlock(topicId),\n  getTopicQuizzes(topicId)\n]);\n\n// \u274c Avoid - Sequential queries\nconst block = await getTopicBlock(topicId);\nconst quizzes = await getTopicQuizzes(topicId);\n"})}),"\n",(0,c.jsx)(i.h3,{id:"4-implement-topic-validation",children:"4. Implement Topic Validation"}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-typescript",children:"// \u2705 Good - Validate topic completeness\nasync function validateTopic(topicId: string) {\n  const topic = await getTopicById(topicId);\n  if (!topic) {\n    throw new TopicError('Topic not found');\n  }\n\n  if (!topic.name.trim()) {\n    throw new TopicError('Topic must have a name');\n  }\n\n  if (topic.description && topic.description.length > 1000) {\n    throw new TopicError('Topic description too long');\n  }\n\n  return true;\n}\n"})}),"\n",(0,c.jsx)(i.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,c.jsxs)(i.ul,{children:["\n",(0,c.jsxs)(i.li,{children:[(0,c.jsx)(i.strong,{children:"Indexing"}),": Ensure blockId field is indexed"]}),"\n",(0,c.jsxs)(i.li,{children:[(0,c.jsx)(i.strong,{children:"Search Indexing"}),": Index topic names for fast search"]}),"\n",(0,c.jsxs)(i.li,{children:[(0,c.jsx)(i.strong,{children:"Batch Operations"}),": Use ",(0,c.jsx)(i.code,{children:"getAllTopics()"})," for bulk operations"]}),"\n",(0,c.jsxs)(i.li,{children:[(0,c.jsx)(i.strong,{children:"Caching"}),": Consider caching frequently accessed topic data"]}),"\n",(0,c.jsxs)(i.li,{children:[(0,c.jsx)(i.strong,{children:"Pagination"}),": For large topic lists, implement pagination"]}),"\n"]}),"\n",(0,c.jsx)(i.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,c.jsxs)(i.ul,{children:["\n",(0,c.jsxs)(i.li,{children:[(0,c.jsx)(i.strong,{children:(0,c.jsx)(i.a,{href:"./block",children:"Block Management"})})," - Associate topics with content blocks"]}),"\n",(0,c.jsxs)(i.li,{children:[(0,c.jsx)(i.strong,{children:(0,c.jsx)(i.a,{href:"./quiz",children:"Quiz System"})})," - Create quizzes for topics"]}),"\n",(0,c.jsxs)(i.li,{children:[(0,c.jsx)(i.strong,{children:(0,c.jsx)(i.a,{href:"./question",children:"Question Management"})})," - Add questions to topic quizzes"]}),"\n",(0,c.jsxs)(i.li,{children:[(0,c.jsx)(i.strong,{children:(0,c.jsx)(i.a,{href:"./user",children:"User Management"})})," - Track topic creators"]}),"\n"]}),"\n",(0,c.jsx)(i.hr,{}),"\n",(0,c.jsxs)(i.p,{children:["Next: ",(0,c.jsx)(i.a,{href:"./fill-in-the-blank",children:"Fill-in-the-Blank"})," - Learn how to create interactive fill-in-the-blank content with search and random utilities."]})]})}function d(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,c.jsx)(i,{...e,children:(0,c.jsx)(p,{...e})}):p(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>s,x:()=>a});var o=n(6540);const c={},t=o.createContext(c);function s(e){const i=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),o.createElement(t.Provider,{value:i},e.children)}}}]);