"use strict";(self.webpackChunknuclear_docs=self.webpackChunknuclear_docs||[]).push([[442],{2377:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"development/contributing","title":"Contributing Guide","description":"Complete guide to contributing to the Nuclear application, including code standards, pull request process, and community guidelines.","source":"@site/docs/development/contributing.md","sourceDirName":"development","slug":"/development/contributing","permalink":"/docs/development/contributing","draft":false,"unlisted":false,"editUrl":"https://github.com/nuclear-app/doc/tree/main/docs/development/contributing.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11},"sidebar":"tutorialSidebar","previous":{"title":"Troubleshooting","permalink":"/docs/development/troubleshooting"}}');var t=s(4848),r=s(8453);const a={sidebar_position:11},l="Contributing Guide",o={},c=[{value:"\ud83e\udd1d Welcome Contributors!",id:"-welcome-contributors",level:2},{value:"How to Contribute",id:"how-to-contribute",level:3},{value:"\ud83d\ude80 Getting Started",id:"-getting-started",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Quick Setup",id:"quick-setup",level:3},{value:"Development Environment",id:"development-environment",level:3},{value:"\ud83d\udccb Contribution Guidelines",id:"-contribution-guidelines",level:2},{value:"Code Standards",id:"code-standards",level:3},{value:"TypeScript Standards",id:"typescript-standards",level:4},{value:"Naming Conventions",id:"naming-conventions",level:4},{value:"File Organization",id:"file-organization",level:4},{value:"Code Style",id:"code-style",level:3},{value:"ESLint Configuration",id:"eslint-configuration",level:4},{value:"Prettier Configuration",id:"prettier-configuration",level:4},{value:"Testing Standards",id:"testing-standards",level:3},{value:"Unit Tests",id:"unit-tests",level:4},{value:"Integration Tests",id:"integration-tests",level:4},{value:"\ud83d\udd04 Pull Request Process",id:"-pull-request-process",level:2},{value:"Before Submitting",id:"before-submitting",level:3},{value:"1. <strong>Check Existing Issues</strong>",id:"1-check-existing-issues",level:4},{value:"2. <strong>Create Feature Branch</strong>",id:"2-create-feature-branch",level:4},{value:"3. <strong>Make Your Changes</strong>",id:"3-make-your-changes",level:4},{value:"4. <strong>Test Your Changes</strong>",id:"4-test-your-changes",level:4},{value:"5. <strong>Commit Your Changes</strong>",id:"5-commit-your-changes",level:4},{value:"Pull Request Template",id:"pull-request-template",level:3},{value:"Create Pull Request",id:"create-pull-request",level:4},{value:"Code Review Process",id:"code-review-process",level:3},{value:"1. <strong>Review Checklist</strong>",id:"1-review-checklist",level:4},{value:"2. <strong>Review Comments</strong>",id:"2-review-comments",level:4},{value:"3. <strong>Addressing Feedback</strong>",id:"3-addressing-feedback",level:4},{value:"\ud83d\udc1b Bug Reports",id:"-bug-reports",level:2},{value:"Bug Report Template",id:"bug-report-template",level:3},{value:"Bug Fix Process",id:"bug-fix-process",level:3},{value:"\ud83d\udca1 Feature Requests",id:"-feature-requests",level:2},{value:"Feature Request Template",id:"feature-request-template",level:3},{value:"Feature Development Process",id:"feature-development-process",level:3},{value:"\ud83d\udcda Documentation Contributions",id:"-documentation-contributions",level:2},{value:"Documentation Standards",id:"documentation-standards",level:3},{value:"Markdown Guidelines",id:"markdown-guidelines",level:4},{value:"Documentation Types",id:"documentation-types",level:3},{value:"Code Documentation",id:"code-documentation",level:4},{value:"User Documentation",id:"user-documentation",level:4},{value:"\ud83e\uddea Testing Contributions",id:"-testing-contributions",level:2},{value:"Test Standards",id:"test-standards",level:3},{value:"Test Organization",id:"test-organization",level:4},{value:"Test Data Management",id:"test-data-management",level:4},{value:"Test Coverage",id:"test-coverage",level:3},{value:"\ud83d\udd12 Security Contributions",id:"-security-contributions",level:2},{value:"Security Guidelines",id:"security-guidelines",level:3},{value:"Security Best Practices",id:"security-best-practices",level:4},{value:"Security Checklist",id:"security-checklist",level:4},{value:"Security Reporting",id:"security-reporting",level:3},{value:"\ud83c\udfaf Performance Contributions",id:"-performance-contributions",level:2},{value:"Performance Guidelines",id:"performance-guidelines",level:3},{value:"Code Optimization",id:"code-optimization",level:4},{value:"Performance Checklist",id:"performance-checklist",level:4},{value:"\ud83e\udd1d Community Guidelines",id:"-community-guidelines",level:2},{value:"Code of Conduct",id:"code-of-conduct",level:3},{value:"Our Standards",id:"our-standards",level:4},{value:"Unacceptable Behavior",id:"unacceptable-behavior",level:4},{value:"Communication",id:"communication",level:3},{value:"GitHub Discussions",id:"github-discussions",level:4},{value:"Communication Channels",id:"communication-channels",level:4},{value:"Recognition",id:"recognition",level:3},{value:"Contributor Recognition",id:"contributor-recognition",level:4},{value:"\ud83d\udccb Contribution Checklist",id:"-contribution-checklist",level:2},{value:"Before Contributing",id:"before-contributing",level:3},{value:"When Contributing",id:"when-contributing",level:3},{value:"After Contributing",id:"after-contributing",level:3},{value:"\ud83c\udf89 Getting Help",id:"-getting-help",level:2},{value:"Resources",id:"resources",level:3},{value:"Contact",id:"contact",level:3},{value:"\ud83d\udcda Related Documentation",id:"-related-documentation",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"contributing-guide",children:"Contributing Guide"})}),"\n",(0,t.jsx)(n.p,{children:"Complete guide to contributing to the Nuclear application, including code standards, pull request process, and community guidelines."}),"\n",(0,t.jsx)(n.h2,{id:"-welcome-contributors",children:"\ud83e\udd1d Welcome Contributors!"}),"\n",(0,t.jsx)(n.p,{children:"Thank you for your interest in contributing to the Nuclear application! This guide will help you get started and ensure your contributions are valuable and well-integrated."}),"\n",(0,t.jsx)(n.h3,{id:"how-to-contribute",children:"How to Contribute"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Bug Reports"})," - Help us identify and fix issues"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Feature Requests"})," - Suggest new functionality"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Code Contributions"})," - Submit pull requests"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Documentation"})," - Improve guides and examples"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Testing"})," - Help ensure code quality"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-getting-started",children:"\ud83d\ude80 Getting Started"}),"\n",(0,t.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Bun"})," - JavaScript runtime and package manager"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Node.js"})," - For some tooling compatibility"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Git"})," - Version control"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"PostgreSQL"})," - Database (local or cloud)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"quick-setup",children:"Quick Setup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Fork and clone the repository\ngit clone https://github.com/your-username/nuclear-app.git\ncd nuclear-app\n\n# Install dependencies\nbun install\n\n# Set up environment\ncp .env.example .env.local\n# Edit .env.local with your configuration\n\n# Set up database\nbunx prisma generate\nbunx prisma migrate dev\n\n# Start development server\nbun coolDev\n"})}),"\n",(0,t.jsx)(n.h3,{id:"development-environment",children:"Development Environment"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Verify setup\nbun run type-check  # TypeScript validation\nbun run lint        # Code quality check\nbun test            # Run tests\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-contribution-guidelines",children:"\ud83d\udccb Contribution Guidelines"}),"\n",(0,t.jsx)(n.h3,{id:"code-standards",children:"Code Standards"}),"\n",(0,t.jsx)(n.h4,{id:"typescript-standards",children:"TypeScript Standards"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good - Explicit types and interfaces\ninterface CreateUserData {\n  email: string;\n  name?: string;\n  mode: 'STUDENT' | 'TEACHER' | 'ADMIN';\n}\n\nconst createUser = async (data: CreateUserData): Promise<User> => {\n  // Implementation\n};\n\n// \u274c Avoid - Any types and implicit returns\nconst createUser = async (data: any) => {\n  // Implementation\n};\n"})}),"\n",(0,t.jsx)(n.h4,{id:"naming-conventions",children:"Naming Conventions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good - Clear, descriptive names\nconst getUserById = async (userId: string): Promise<User | null> => {\n  // Implementation\n};\n\nconst isUserActive = (user: User): boolean => {\n  return user.status === 'ACTIVE';\n};\n\n// \u274c Avoid - Unclear or abbreviated names\nconst get = async (id: string) => {\n  // Implementation\n};\n\nconst check = (u: User) => {\n  return u.s === 'A';\n};\n"})}),"\n",(0,t.jsx)(n.h4,{id:"file-organization",children:"File Organization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good - Single responsibility\n// lib/user/validation.ts\nexport const validateUserData = (data: CreateUserData): void => {\n  // Validation logic\n};\n\n// lib/user/operations.ts\nexport const createUser = async (data: CreateUserData): Promise<User> => {\n  // User creation logic\n};\n\n// \u274c Avoid - Multiple responsibilities in one file\n// lib/user.ts - Everything user-related mixed together\n"})}),"\n",(0,t.jsx)(n.h3,{id:"code-style",children:"Code Style"}),"\n",(0,t.jsx)(n.h4,{id:"eslint-configuration",children:"ESLint Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "extends": [\n    "next/core-web-vitals",\n    "@typescript-eslint/recommended"\n  ],\n  "rules": {\n    "@typescript-eslint/no-unused-vars": "error",\n    "@typescript-eslint/explicit-function-return-type": "warn",\n    "prefer-const": "error",\n    "no-var": "error",\n    "no-console": "warn"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"prettier-configuration",children:"Prettier Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "semi": true,\n  "trailingComma": "es5",\n  "singleQuote": true,\n  "printWidth": 80,\n  "tabWidth": 2,\n  "useTabs": false\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"testing-standards",children:"Testing Standards"}),"\n",(0,t.jsx)(n.h4,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// __tests__/user.test.ts\nimport { createUser, getUserById } from '@/lib/user';\n\ndescribe('User Operations', () => {\n  it('should create a user with valid data', async () => {\n    const userData = {\n      email: 'test@example.com',\n      name: 'Test User',\n      mode: 'STUDENT' as const\n    };\n\n    const user = await createUser(userData);\n\n    expect(user.email).toBe(userData.email);\n    expect(user.name).toBe(userData.name);\n    expect(user.mode).toBe(userData.mode);\n  });\n\n  it('should throw error for invalid email', async () => {\n    const userData = {\n      email: 'invalid-email',\n      name: 'Test User'\n    };\n\n    await expect(createUser(userData)).rejects.toThrow('Invalid email format');\n  });\n});\n"})}),"\n",(0,t.jsx)(n.h4,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// __tests__/integration/user-block.test.ts\nimport { createUser, createBlock, getUserPosts } from '@/lib';\n\ndescribe('User-Block Integration', () => {\n  it('should create block and associate with user', async () => {\n    // Create user\n    const user = await createUser({\n      email: 'author@example.com',\n      name: 'Author'\n    });\n\n    // Create block\n    const block = await createBlock({\n      title: 'Test Block',\n      content: 'Test content',\n      authorId: user.id\n    });\n\n    // Verify relationship\n    const userPosts = await getUserPosts(user.id);\n    expect(userPosts).toHaveLength(1);\n    expect(userPosts[0].id).toBe(block.id);\n  });\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-pull-request-process",children:"\ud83d\udd04 Pull Request Process"}),"\n",(0,t.jsx)(n.h3,{id:"before-submitting",children:"Before Submitting"}),"\n",(0,t.jsxs)(n.h4,{id:"1-check-existing-issues",children:["1. ",(0,t.jsx)(n.strong,{children:"Check Existing Issues"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Search for existing issues\n# Check if your feature/bug is already reported\n# Look for similar pull requests\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"2-create-feature-branch",children:["2. ",(0,t.jsx)(n.strong,{children:"Create Feature Branch"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create a new branch from main\ngit checkout -b feature/your-feature-name\n\n# Or for bug fixes\ngit checkout -b bugfix/bug-description\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"3-make-your-changes",children:["3. ",(0,t.jsx)(n.strong,{children:"Make Your Changes"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Make your code changes\n# Follow the coding standards\n# Write tests for new functionality\n# Update documentation if needed\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"4-test-your-changes",children:["4. ",(0,t.jsx)(n.strong,{children:"Test Your Changes"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Run all tests\nbun test\n\n# Check code quality\nbun run lint\nbun run type-check\n\n# Test the application\nbun coolDev\n# Verify functionality in browser\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"5-commit-your-changes",children:["5. ",(0,t.jsx)(n.strong,{children:"Commit Your Changes"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Stage your changes\ngit add .\n\n# Commit with descriptive message\ngit commit -m "feat: add user profile management\n\n- Add profile editing functionality\n- Implement avatar upload\n- Add profile validation\n- Include unit tests\n\nCloses #123"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"pull-request-template",children:"Pull Request Template"}),"\n",(0,t.jsx)(n.h4,{id:"create-pull-request",children:"Create Pull Request"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-markdown",children:"## Description\nBrief description of the changes made.\n\n## Type of Change\n- [ ] Bug fix (non-breaking change which fixes an issue)\n- [ ] New feature (non-breaking change which adds functionality)\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n- [ ] Documentation update\n- [ ] Performance improvement\n- [ ] Refactoring (no functional changes)\n\n## Testing\n- [ ] Unit tests pass\n- [ ] Integration tests pass\n- [ ] Manual testing completed\n- [ ] All existing tests still pass\n\n## Checklist\n- [ ] Code follows style guidelines\n- [ ] Self-review completed\n- [ ] Documentation updated\n- [ ] No console errors\n- [ ] No TypeScript errors\n- [ ] No linting errors\n- [ ] Branch is up to date with main\n\n## Screenshots (if applicable)\nAdd screenshots to help explain your changes.\n\n## Additional Notes\nAny additional information or context.\n"})}),"\n",(0,t.jsx)(n.h3,{id:"code-review-process",children:"Code Review Process"}),"\n",(0,t.jsxs)(n.h4,{id:"1-review-checklist",children:["1. ",(0,t.jsx)(n.strong,{children:"Review Checklist"})]}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Code follows project standards"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Tests are included and pass"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Documentation is updated"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","No security vulnerabilities"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Performance considerations addressed"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Error handling is appropriate"]}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"2-review-comments",children:["2. ",(0,t.jsx)(n.strong,{children:"Review Comments"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-markdown",children:"# Example review comment\nThis looks good overall! A few suggestions:\n\n1. Consider adding validation for the email format\n2. The error message could be more descriptive\n3. Maybe add a test case for the edge case you mentioned\n\nLet me know if you'd like me to clarify any of these points.\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"3-addressing-feedback",children:["3. ",(0,t.jsx)(n.strong,{children:"Addressing Feedback"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Make requested changes\ngit add .\ngit commit -m "Address review feedback\n\n- Add email validation\n- Improve error message\n- Add edge case test"\ngit push origin feature/your-feature-name\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-bug-reports",children:"\ud83d\udc1b Bug Reports"}),"\n",(0,t.jsx)(n.h3,{id:"bug-report-template",children:"Bug Report Template"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-markdown",children:"## Bug Description\nClear and concise description of the bug.\n\n## Steps to Reproduce\n1. Go to '...'\n2. Click on '...'\n3. Scroll down to '...'\n4. See error\n\n## Expected Behavior\nWhat you expected to happen.\n\n## Actual Behavior\nWhat actually happened.\n\n## Environment\n- OS: [e.g., macOS 12.0]\n- Browser: [e.g., Chrome 120]\n- Node.js: [e.g., 18.0.0]\n- Bun: [e.g., 1.0.0]\n\n## Additional Context\n- Screenshots\n- Console errors\n- Network tab information\n- Any other relevant details\n"})}),"\n",(0,t.jsx)(n.h3,{id:"bug-fix-process",children:"Bug Fix Process"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Create bug fix branch\ngit checkout -b bugfix/bug-description\n\n# Reproduce the bug\n# Write a test that fails\n# Fix the bug\n# Verify the test passes\n# Update documentation if needed\n\n# Commit and submit PR\ngit add .\ngit commit -m "fix: resolve user creation error\n\nThe user creation was failing due to missing validation.\nAdded proper email validation and improved error handling.\n\nFixes #456"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-feature-requests",children:"\ud83d\udca1 Feature Requests"}),"\n",(0,t.jsx)(n.h3,{id:"feature-request-template",children:"Feature Request Template"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-markdown",children:"## Feature Description\nClear and concise description of the feature.\n\n## Problem Statement\nWhat problem does this feature solve?\n\n## Proposed Solution\nHow would you like this feature to work?\n\n## Alternative Solutions\nAny alternative solutions you've considered.\n\n## Additional Context\n- Use cases\n- Mockups or wireframes\n- Related issues\n"})}),"\n",(0,t.jsx)(n.h3,{id:"feature-development-process",children:"Feature Development Process"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Create feature branch\ngit checkout -b feature/feature-name\n\n# Plan the implementation\n# Break down into smaller tasks\n# Implement incrementally\n# Write tests for each component\n# Update documentation\n\n# Submit PR when ready\ngit add .\ngit commit -m "feat: implement user profile management\n\n- Add profile editing UI\n- Implement backend API\n- Add validation and error handling\n- Include comprehensive tests\n- Update documentation\n\nCloses #789"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-documentation-contributions",children:"\ud83d\udcda Documentation Contributions"}),"\n",(0,t.jsx)(n.h3,{id:"documentation-standards",children:"Documentation Standards"}),"\n",(0,t.jsx)(n.h4,{id:"markdown-guidelines",children:"Markdown Guidelines"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-markdown",children:"# Use clear, descriptive headings\n## Use proper heading hierarchy\n### Keep headings concise\n\nUse **bold** for emphasis and `code` for inline code.\n\n```typescript\n// Code blocks should be properly formatted\nconst example = 'code';\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use bullet points for lists"}),"\n",(0,t.jsx)(n.li,{children:"Keep paragraphs short and focused"}),"\n",(0,t.jsx)(n.li,{children:"Include examples where helpful"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\n#### API Documentation\n```typescript\n/**\n * Creates a new user in the system\n * @param data - User creation data\n * @returns Promise resolving to the created user\n * @throws {ValidationError} When data is invalid\n * @throws {ConflictError} When email already exists\n * \n * @example\n * ```typescript\n * const user = await createUser({\n *   email: 'user@example.com',\n *   name: 'John Doe',\n *   mode: 'STUDENT'\n * });\n * ```\n */\nexport async function createUser(data: CreateUserData): Promise<User> {\n  // Implementation\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"documentation-types",children:"Documentation Types"}),"\n",(0,t.jsx)(n.h4,{id:"code-documentation",children:"Code Documentation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"JSDoc comments"})," for functions and classes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"README files"})," for modules and packages"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type definitions"})," with clear descriptions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Examples"})," for complex functionality"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"user-documentation",children:"User Documentation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Getting started guides"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Tutorials and walkthroughs"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"API reference documentation"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Troubleshooting guides"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-testing-contributions",children:"\ud83e\uddea Testing Contributions"}),"\n",(0,t.jsx)(n.h3,{id:"test-standards",children:"Test Standards"}),"\n",(0,t.jsx)(n.h4,{id:"test-organization",children:"Test Organization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// __tests__/unit/user.test.ts\ndescribe('User Model', () => {\n  describe('createUser', () => {\n    it('should create user with valid data', async () => {\n      // Test implementation\n    });\n\n    it('should throw error for invalid email', async () => {\n      // Test implementation\n    });\n  });\n\n  describe('updateUser', () => {\n    it('should update user successfully', async () => {\n      // Test implementation\n    });\n  });\n});\n"})}),"\n",(0,t.jsx)(n.h4,{id:"test-data-management",children:"Test Data Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// __tests__/fixtures/users.ts\nexport const mockUsers = {\n  student: {\n    email: 'student@example.com',\n    name: 'Student User',\n    mode: 'STUDENT' as const\n  },\n  teacher: {\n    email: 'teacher@example.com',\n    name: 'Teacher User',\n    mode: 'TEACHER' as const\n  }\n};\n\n// __tests__/helpers/test-utils.ts\nexport const createTestUser = async (data = mockUsers.student) => {\n  return await createUser(data);\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"test-coverage",children:"Test Coverage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Run tests with coverage\nbun test --coverage\n\n# Check coverage thresholds\n# Aim for at least 80% coverage\n# Focus on critical business logic\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-security-contributions",children:"\ud83d\udd12 Security Contributions"}),"\n",(0,t.jsx)(n.h3,{id:"security-guidelines",children:"Security Guidelines"}),"\n",(0,t.jsx)(n.h4,{id:"security-best-practices",children:"Security Best Practices"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good - Input validation\nconst createUser = async (data: CreateUserData): Promise<User> => {\n  // Validate input\n  if (!isValidEmail(data.email)) {\n    throw new Error('Invalid email format');\n  }\n  \n  // Sanitize data\n  const sanitizedData = {\n    ...data,\n    name: sanitizeString(data.name)\n  };\n  \n  return await prisma.user.create({ data: sanitizedData });\n};\n\n// \u274c Avoid - No validation\nconst createUser = async (data: any) => {\n  return await prisma.user.create({ data });\n};\n"})}),"\n",(0,t.jsx)(n.h4,{id:"security-checklist",children:"Security Checklist"}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Input validation and sanitization"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Authentication and authorization"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","SQL injection prevention"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","XSS protection"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","CSRF protection"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Secure headers"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Environment variable security"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"security-reporting",children:"Security Reporting"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-markdown",children:"## Security Issue Report\n\n**DO NOT** create a public issue for security vulnerabilities.\n\nPlease email security@your-domain.com with:\n- Description of the vulnerability\n- Steps to reproduce\n- Potential impact\n- Suggested fix (if any)\n\nWe will respond within 48 hours.\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-performance-contributions",children:"\ud83c\udfaf Performance Contributions"}),"\n",(0,t.jsx)(n.h3,{id:"performance-guidelines",children:"Performance Guidelines"}),"\n",(0,t.jsx)(n.h4,{id:"code-optimization",children:"Code Optimization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good - Efficient queries\nconst getUsersWithPosts = async (userId: string) => {\n  return await prisma.user.findUnique({\n    where: { id: userId },\n    select: {\n      id: true,\n      name: true,\n      blocks: {\n        select: {\n          id: true,\n          title: true,\n          createdAt: true\n        },\n        take: 10,\n        orderBy: { createdAt: 'desc' }\n      }\n    }\n  });\n};\n\n// \u274c Avoid - N+1 queries\nconst getUsersWithPosts = async (userId: string) => {\n  const user = await prisma.user.findUnique({ where: { id: userId } });\n  const blocks = await prisma.block.findMany({ where: { authorId: userId } });\n  return { ...user, blocks };\n};\n"})}),"\n",(0,t.jsx)(n.h4,{id:"performance-checklist",children:"Performance Checklist"}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Database query optimization"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Code splitting and lazy loading"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Image optimization"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Caching strategies"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Bundle size optimization"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Memory usage optimization"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-community-guidelines",children:"\ud83e\udd1d Community Guidelines"}),"\n",(0,t.jsx)(n.h3,{id:"code-of-conduct",children:"Code of Conduct"}),"\n",(0,t.jsx)(n.h4,{id:"our-standards",children:"Our Standards"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Be respectful"})," - Treat everyone with respect"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Be inclusive"})," - Welcome contributors from all backgrounds"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Be constructive"})," - Provide helpful, constructive feedback"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Be patient"})," - Understand that everyone learns at their own pace"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"unacceptable-behavior",children:"Unacceptable Behavior"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Harassment or discrimination"}),"\n",(0,t.jsx)(n.li,{children:"Trolling or insulting comments"}),"\n",(0,t.jsx)(n.li,{children:"Publishing private information"}),"\n",(0,t.jsx)(n.li,{children:"Any conduct inappropriate in a professional setting"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"communication",children:"Communication"}),"\n",(0,t.jsx)(n.h4,{id:"github-discussions",children:"GitHub Discussions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.strong,{children:"Discussions"})," for questions and ideas"]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.strong,{children:"Issues"})," for bugs and feature requests"]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.strong,{children:"Pull Requests"})," for code contributions"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"communication-channels",children:"Communication Channels"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GitHub Issues"})," - Bug reports and feature requests"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GitHub Discussions"})," - General questions and ideas"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pull Request Reviews"})," - Code review discussions"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"recognition",children:"Recognition"}),"\n",(0,t.jsx)(n.h4,{id:"contributor-recognition",children:"Contributor Recognition"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Contributors"})," - Listed in README.md"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Code Reviewers"})," - Acknowledged in PRs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Documentation Contributors"})," - Credited in docs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Bug Reporters"})," - Thanked in issue resolutions"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-contribution-checklist",children:"\ud83d\udccb Contribution Checklist"}),"\n",(0,t.jsx)(n.h3,{id:"before-contributing",children:"Before Contributing"}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Read the contributing guide"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Set up development environment"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Understand the codebase structure"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Check existing issues and PRs"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"when-contributing",children:"When Contributing"}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Follow coding standards"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Write tests for new functionality"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Update documentation"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Test your changes thoroughly"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Use descriptive commit messages"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"after-contributing",children:"After Contributing"}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Respond to review feedback"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Keep your branch up to date"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Help maintain the project"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Share knowledge with others"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-getting-help",children:"\ud83c\udf89 Getting Help"}),"\n",(0,t.jsx)(n.h3,{id:"resources",children:"Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Documentation"})," - Check the docs first"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GitHub Issues"})," - Search existing issues"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GitHub Discussions"})," - Ask questions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Code Examples"})," - Look at existing code"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"contact",children:"Contact"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"General Questions"})," - GitHub Discussions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Bug Reports"})," - GitHub Issues"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Security Issues"})," - Email ",(0,t.jsx)(n.a,{href:"mailto:security@your-domain.com",children:"security@your-domain.com"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Feature Requests"})," - GitHub Issues"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-related-documentation",children:"\ud83d\udcda Related Documentation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./setup",children:"Development Setup"})})," - Environment setup"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./workflow",children:"Development Workflow"})})," - Daily development practices"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./workflow#code-quality",children:"Code Standards"})})," - Coding guidelines"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./workflow#testing-strategy",children:"Testing Strategy"})})," - Testing practices"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Thank you for contributing to Nuclear! Your contributions make this project better for everyone."})," \ud83d\ude80"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var i=s(6540);const t={},r=i.createContext(t);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);