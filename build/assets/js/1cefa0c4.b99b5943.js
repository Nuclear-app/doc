"use strict";(self.webpackChunknuclear_docs=self.webpackChunknuclear_docs||[]).push([[916],{4743:(n,e,l)=>{l.r(e),l.d(e,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"prisma-abstraction/fill-in-the-blank","title":"Fill-in-the-Blank","description":"The Fill-in-the-Blank module provides comprehensive type-safe CRUD operations and utility functions for managing interactive fill-in-the-blank content in the Nuclear application. This module handles content creation, updates, deletion, and advanced search and random selection capabilities.","source":"@site/docs/prisma-abstraction/fill-in-the-blank.md","sourceDirName":"prisma-abstraction","slug":"/prisma-abstraction/fill-in-the-blank","permalink":"/docs/prisma-abstraction/fill-in-the-blank","draft":false,"unlisted":false,"editUrl":"https://github.com/nuclear-app/doc/tree/main/docs/prisma-abstraction/fill-in-the-blank.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Topic Management","permalink":"/docs/prisma-abstraction/topic"},"next":{"title":"Points System","permalink":"/docs/prisma-abstraction/points-update"}}');var t=l(4848),a=l(8453);const s={sidebar_position:8},r="Fill-in-the-Blank",o={},c=[{value:"Overview",id:"overview",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"Core CRUD Functions",id:"core-crud-functions",level:3},{value:"<code>getFillInTheBlankById(id: string): Promise&lt;FillInTheBlank | null&gt;</code>",id:"getfillintheblankbyidid-string-promisefillintheblank--null",level:4},{value:"<code>getAllFillInTheBlanks(): Promise&lt;FillInTheBlank[]&gt;</code>",id:"getallfillintheblanks-promisefillintheblank",level:4},{value:"<code>createFillInTheBlank(data: CreateFillInTheBlankData): Promise&lt;FillInTheBlank&gt;</code>",id:"createfillintheblankdata-createfillintheblankdata-promisefillintheblank",level:4},{value:"<code>updateFillInTheBlank(id: string, data: Partial&lt;FillInTheBlank&gt;): Promise&lt;FillInTheBlank&gt;</code>",id:"updatefillintheblankid-string-data-partialfillintheblank-promisefillintheblank",level:4},{value:"<code>deleteFillInTheBlank(id: string): Promise&lt;FillInTheBlank&gt;</code>",id:"deletefillintheblankid-string-promisefillintheblank",level:4},{value:"Utility Functions",id:"utility-functions",level:3},{value:"<code>fillInTheBlankExists(id: string): Promise&lt;boolean&gt;</code>",id:"fillintheblankexistsid-string-promiseboolean",level:4},{value:"Relationship Queries",id:"relationship-queries",level:3},{value:"<code>getFillInTheBlankBlock(id: string): Promise&lt;Block | null&gt;</code>",id:"getfillintheblankblockid-string-promiseblock--null",level:4},{value:"<code>getFillInTheBlanksByBlock(blockId: string): Promise&lt;FillInTheBlank[]&gt;</code>",id:"getfillintheblanksbyblockblockid-string-promisefillintheblank",level:4},{value:"Advanced Functions",id:"advanced-functions",level:3},{value:"<code>getFillInTheBlankWithRelations(id: string)</code>",id:"getfillintheblankwithrelationsid-string",level:4},{value:"Search and Filter Functions",id:"search-and-filter-functions",level:3},{value:"<code>searchFillInTheBlanksBySentence(searchTerm: string): Promise&lt;FillInTheBlank[]&gt;</code>",id:"searchfillintheblanksbysentencesearchterm-string-promisefillintheblank",level:4},{value:"<code>searchFillInTheBlanksByAnswer(searchTerm: string): Promise&lt;FillInTheBlank[]&gt;</code>",id:"searchfillintheblanksbyanswersearchterm-string-promisefillintheblank",level:4},{value:"<code>getRandomFillInTheBlank(): Promise&lt;FillInTheBlank | null&gt;</code>",id:"getrandomfillintheblank-promisefillintheblank--null",level:4},{value:"<code>getRandomFillInTheBlankByBlock(blockId: string): Promise&lt;FillInTheBlank | null&gt;</code>",id:"getrandomfillintheblankbyblockblockid-string-promisefillintheblank--null",level:4},{value:"<code>getFillInTheBlanksWithHints(): Promise&lt;FillInTheBlank[]&gt;</code>",id:"getfillintheblankswithhints-promisefillintheblank",level:4},{value:"Data Types",id:"data-types",level:2},{value:"FillInTheBlank Model",id:"fillintheblank-model",level:3},{value:"CreateFillInTheBlankData",id:"createfillintheblankdata",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Common Error Scenarios",id:"common-error-scenarios",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Complete Fill-in-the-Blank Management Workflow",id:"complete-fill-in-the-blank-management-workflow",level:3},{value:"Content Bank Creation",id:"content-bank-creation",level:3},{value:"Interactive Learning System",id:"interactive-learning-system",level:3},{value:"Block Content Analysis",id:"block-content-analysis",level:3},{value:"Difficulty-Based Content Management",id:"difficulty-based-content-management",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Validate Content Quality",id:"1-validate-content-quality",level:3},{value:"2. Handle Relationships Properly",id:"2-handle-relationships-properly",level:3},{value:"3. Use Efficient Queries",id:"3-use-efficient-queries",level:3},{value:"4. Implement Content Validation",id:"4-implement-content-validation",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Related Modules",id:"related-modules",level:2}];function h(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"fill-in-the-blank",children:"Fill-in-the-Blank"})}),"\n",(0,t.jsx)(e.p,{children:"The Fill-in-the-Blank module provides comprehensive type-safe CRUD operations and utility functions for managing interactive fill-in-the-blank content in the Nuclear application. This module handles content creation, updates, deletion, and advanced search and random selection capabilities."}),"\n",(0,t.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(e.p,{children:["The Fill-in-the-Blank module is located in ",(0,t.jsx)(e.code,{children:"lib/fillInTheBlank.ts"})," and provides functions for:"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"CRUD Operations"}),": Create, read, update, and delete fill-in-the-blank items"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Block Associations"}),": Link content to specific content blocks"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Search and Filter"}),": Advanced search by sentence and answer content"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Utility Functions"}),": Random selection, hints, and content validation"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Validation"}),": Input validation and existence checks"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,t.jsx)(e.h3,{id:"core-crud-functions",children:"Core CRUD Functions"}),"\n",(0,t.jsx)(e.h4,{id:"getfillintheblankbyidid-string-promisefillintheblank--null",children:(0,t.jsx)(e.code,{children:"getFillInTheBlankById(id: string): Promise<FillInTheBlank | null>"})}),"\n",(0,t.jsx)(e.p,{children:"Get a fill-in-the-blank by its unique ID."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"const fillInTheBlank = await getFillInTheBlankById('fitb-123');\nif (fillInTheBlank) {\n  console.log(`Found fill-in-the-blank: ${fillInTheBlank.sentence}`);\n}\n"})}),"\n",(0,t.jsx)(e.h4,{id:"getallfillintheblanks-promisefillintheblank",children:(0,t.jsx)(e.code,{children:"getAllFillInTheBlanks(): Promise<FillInTheBlank[]>"})}),"\n",(0,t.jsx)(e.p,{children:"Get all fill-in-the-blank items in the system."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"const allFillInTheBlanks = await getAllFillInTheBlanks();\nconsole.log(`Total fill-in-the-blanks: ${allFillInTheBlanks.length}`);\n"})}),"\n",(0,t.jsx)(e.h4,{id:"createfillintheblankdata-createfillintheblankdata-promisefillintheblank",children:(0,t.jsx)(e.code,{children:"createFillInTheBlank(data: CreateFillInTheBlankData): Promise<FillInTheBlank>"})}),"\n",(0,t.jsx)(e.p,{children:"Create a new fill-in-the-blank with validated input data."}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"data.sentence"})," (required): The sentence with blanks"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"data.answer"})," (required): The correct answer"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"data.blockId"})," (optional): ID of the associated block"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"data.hint"})," (optional): Hint for the answer"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"data.difficulty"})," (optional): Difficulty level"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"const newFillInTheBlank = await createFillInTheBlank({\n  sentence: 'Nuclear ___ is the process of combining atomic nuclei.',\n  answer: 'fusion',\n  blockId: 'block-123',\n  hint: 'Think of the sun',\n  difficulty: 'MEDIUM'\n});\n\nconsole.log(`Created fill-in-the-blank: ${newFillInTheBlank.id}`);\n"})}),"\n",(0,t.jsx)(e.h4,{id:"updatefillintheblankid-string-data-partialfillintheblank-promisefillintheblank",children:(0,t.jsx)(e.code,{children:"updateFillInTheBlank(id: string, data: Partial<FillInTheBlank>): Promise<FillInTheBlank>"})}),"\n",(0,t.jsx)(e.p,{children:"Update an existing fill-in-the-blank's information."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"const updatedFillInTheBlank = await updateFillInTheBlank('fitb-123', {\n  sentence: 'Nuclear ___ is the process of combining atomic nuclei to release energy.',\n  hint: 'Think of the sun and stars',\n  difficulty: 'HARD'\n});\n\nconsole.log(`Updated fill-in-the-blank: ${updatedFillInTheBlank.sentence}`);\n"})}),"\n",(0,t.jsx)(e.h4,{id:"deletefillintheblankid-string-promisefillintheblank",children:(0,t.jsx)(e.code,{children:"deleteFillInTheBlank(id: string): Promise<FillInTheBlank>"})}),"\n",(0,t.jsx)(e.p,{children:"Delete a fill-in-the-blank by its ID."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"const deletedFillInTheBlank = await deleteFillInTheBlank('fitb-123');\nconsole.log(`Deleted fill-in-the-blank: ${deletedFillInTheBlank.sentence}`);\n"})}),"\n",(0,t.jsx)(e.h3,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,t.jsx)(e.h4,{id:"fillintheblankexistsid-string-promiseboolean",children:(0,t.jsx)(e.code,{children:"fillInTheBlankExists(id: string): Promise<boolean>"})}),"\n",(0,t.jsx)(e.p,{children:"Check if a fill-in-the-blank exists by its ID."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"if (await fillInTheBlankExists('fitb-123')) {\n  console.log('Fill-in-the-blank exists');\n} else {\n  console.log('Fill-in-the-blank not found');\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"relationship-queries",children:"Relationship Queries"}),"\n",(0,t.jsx)(e.h4,{id:"getfillintheblankblockid-string-promiseblock--null",children:(0,t.jsx)(e.code,{children:"getFillInTheBlankBlock(id: string): Promise<Block | null>"})}),"\n",(0,t.jsx)(e.p,{children:"Get the block associated with a fill-in-the-blank."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"const block = await getFillInTheBlankBlock('fitb-123');\nif (block) {\n  console.log(`Fill-in-the-blank block: ${block.title}`);\n}\n"})}),"\n",(0,t.jsx)(e.h4,{id:"getfillintheblanksbyblockblockid-string-promisefillintheblank",children:(0,t.jsx)(e.code,{children:"getFillInTheBlanksByBlock(blockId: string): Promise<FillInTheBlank[]>"})}),"\n",(0,t.jsx)(e.p,{children:"Get all fill-in-the-blanks for a specific block."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"const blockFillInTheBlanks = await getFillInTheBlanksByBlock('block-123');\nconsole.log(`Block has ${blockFillInTheBlanks.length} fill-in-the-blanks`);\n"})}),"\n",(0,t.jsx)(e.h3,{id:"advanced-functions",children:"Advanced Functions"}),"\n",(0,t.jsx)(e.h4,{id:"getfillintheblankwithrelationsid-string",children:(0,t.jsx)(e.code,{children:"getFillInTheBlankWithRelations(id: string)"})}),"\n",(0,t.jsx)(e.p,{children:"Get a fill-in-the-blank with all related data."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"const fillInTheBlankWithRelations = await getFillInTheBlankWithRelations('fitb-123');\nconsole.log(`Fill-in-the-blank: ${fillInTheBlankWithRelations.sentence}`);\nconsole.log(`Block: ${fillInTheBlankWithRelations.block?.title}`);\n"})}),"\n",(0,t.jsx)(e.h3,{id:"search-and-filter-functions",children:"Search and Filter Functions"}),"\n",(0,t.jsx)(e.h4,{id:"searchfillintheblanksbysentencesearchterm-string-promisefillintheblank",children:(0,t.jsx)(e.code,{children:"searchFillInTheBlanksBySentence(searchTerm: string): Promise<FillInTheBlank[]>"})}),"\n",(0,t.jsx)(e.p,{children:"Search fill-in-the-blanks by sentence content (case-insensitive)."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"const searchResults = await searchFillInTheBlanksBySentence('nuclear');\nconsole.log(`Found ${searchResults.length} fill-in-the-blanks containing 'nuclear'`);\n"})}),"\n",(0,t.jsx)(e.h4,{id:"searchfillintheblanksbyanswersearchterm-string-promisefillintheblank",children:(0,t.jsx)(e.code,{children:"searchFillInTheBlanksByAnswer(searchTerm: string): Promise<FillInTheBlank[]>"})}),"\n",(0,t.jsx)(e.p,{children:"Search fill-in-the-blanks by answer content (case-insensitive)."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"const answerResults = await searchFillInTheBlanksByAnswer('fusion');\nconsole.log(`Found ${answerResults.length} fill-in-the-blanks with answer 'fusion'`);\n"})}),"\n",(0,t.jsx)(e.h4,{id:"getrandomfillintheblank-promisefillintheblank--null",children:(0,t.jsx)(e.code,{children:"getRandomFillInTheBlank(): Promise<FillInTheBlank | null>"})}),"\n",(0,t.jsx)(e.p,{children:"Get a random fill-in-the-blank."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"const randomFillInTheBlank = await getRandomFillInTheBlank();\nif (randomFillInTheBlank) {\n  console.log(`Random fill-in-the-blank: ${randomFillInTheBlank.sentence}`);\n}\n"})}),"\n",(0,t.jsx)(e.h4,{id:"getrandomfillintheblankbyblockblockid-string-promisefillintheblank--null",children:(0,t.jsx)(e.code,{children:"getRandomFillInTheBlankByBlock(blockId: string): Promise<FillInTheBlank | null>"})}),"\n",(0,t.jsx)(e.p,{children:"Get a random fill-in-the-blank for a specific block."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"const randomBlockFillInTheBlank = await getRandomFillInTheBlankByBlock('block-123');\nif (randomBlockFillInTheBlank) {\n  console.log(`Random block fill-in-the-blank: ${randomBlockFillInTheBlank.sentence}`);\n}\n"})}),"\n",(0,t.jsx)(e.h4,{id:"getfillintheblankswithhints-promisefillintheblank",children:(0,t.jsx)(e.code,{children:"getFillInTheBlanksWithHints(): Promise<FillInTheBlank[]>"})}),"\n",(0,t.jsx)(e.p,{children:"Get all fill-in-the-blanks that have hints."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"const fillInTheBlanksWithHints = await getFillInTheBlanksWithHints();\nconsole.log(`Found ${fillInTheBlanksWithHints.length} fill-in-the-blanks with hints`);\n"})}),"\n",(0,t.jsx)(e.h2,{id:"data-types",children:"Data Types"}),"\n",(0,t.jsx)(e.h3,{id:"fillintheblank-model",children:"FillInTheBlank Model"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"interface FillInTheBlank {\n  id: string;\n  sentence: string;\n  answer: string;\n  blockId?: string;\n  hint?: string;\n  difficulty?: 'EASY' | 'MEDIUM' | 'HARD';\n  createdAt: Date;\n  updatedAt: Date;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"createfillintheblankdata",children:"CreateFillInTheBlankData"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"interface CreateFillInTheBlankData {\n  sentence: string;\n  answer: string;\n  blockId?: string;\n  hint?: string;\n  difficulty?: 'EASY' | 'MEDIUM' | 'HARD';\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(e.p,{children:"The Fill-in-the-Blank module defines a custom error class for consistent error handling:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"class FillInTheBlankError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'FillInTheBlankError';\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"common-error-scenarios",children:"Common Error Scenarios"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Fill-in-the-Blank Not Found"})}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"try {\n  const fillInTheBlank = await getFillInTheBlankById('non-existent-id');\n  if (!fillInTheBlank) {\n    throw new FillInTheBlankError('Fill-in-the-blank not found');\n  }\n} catch (error) {\n  if (error instanceof FillInTheBlankError) {\n    console.error('Fill-in-the-blank error:', error.message);\n  }\n}\n"})}),"\n",(0,t.jsxs)(e.ol,{start:"2",children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Invalid Block Association"})}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"try {\n  const fillInTheBlank = await createFillInTheBlank({\n    sentence: 'Test sentence with ___.',\n    answer: 'blank',\n    blockId: 'non-existent-block'\n  });\n} catch (error) {\n  if (error instanceof FillInTheBlankError) {\n    console.error('Block validation error:', error.message);\n  }\n}\n"})}),"\n",(0,t.jsxs)(e.ol,{start:"3",children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Invalid Sentence Format"})}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"try {\n  const fillInTheBlank = await createFillInTheBlank({\n    sentence: 'Sentence without blanks',\n    answer: 'test'\n  });\n} catch (error) {\n  if (error instanceof FillInTheBlankError) {\n    console.error('Sentence format error:', error.message);\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,t.jsx)(e.h3,{id:"complete-fill-in-the-blank-management-workflow",children:"Complete Fill-in-the-Blank Management Workflow"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"async function manageFillInTheBlank() {\n  try {\n    // Create a new fill-in-the-blank\n    const newFillInTheBlank = await createFillInTheBlank({\n      sentence: 'The atomic nucleus contains ___ and ___.',\n      answer: 'protons, neutrons',\n      blockId: 'block-123',\n      hint: 'Think of the basic particles in an atom',\n      difficulty: 'MEDIUM'\n    });\n\n    // Update fill-in-the-blank content\n    const updatedFillInTheBlank = await updateFillInTheBlank(newFillInTheBlank.id, {\n      sentence: 'The atomic nucleus contains ___ and ___, which are collectively called nucleons.',\n      hint: 'Think of the basic particles in an atom - protons and neutrons',\n      difficulty: 'HARD'\n    });\n\n    // Get fill-in-the-blank relationships\n    const block = await getFillInTheBlankBlock(updatedFillInTheBlank.id);\n\n    console.log(`Fill-in-the-blank: \"${updatedFillInTheBlank.sentence}\"`);\n    console.log(`Answer: ${updatedFillInTheBlank.answer}`);\n    console.log(`Block: ${block?.title}, Difficulty: ${updatedFillInTheBlank.difficulty}`);\n    console.log(`Hint: ${updatedFillInTheBlank.hint}`);\n\n    // Check if fill-in-the-blank exists before operations\n    if (await fillInTheBlankExists(updatedFillInTheBlank.id)) {\n      const fillInTheBlank = await getFillInTheBlankById(updatedFillInTheBlank.id);\n      console.log(`Fill-in-the-blank created: ${fillInTheBlank?.createdAt}`);\n    }\n\n  } catch (error) {\n    if (error instanceof FillInTheBlankError) {\n      console.error('Fill-in-the-blank management error:', error.message);\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"content-bank-creation",children:"Content Bank Creation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"async function createFillInTheBlankBank() {\n  try {\n    // Define fill-in-the-blank content bank\n    const contentBank = [\n      {\n        sentence: 'Nuclear ___ releases energy by splitting heavy nuclei.',\n        answer: 'fission',\n        hint: 'Think of splitting atoms',\n        difficulty: 'EASY'\n      },\n      {\n        sentence: 'The ___ number determines the element.',\n        answer: 'atomic',\n        hint: 'It\\'s in the name of the number',\n        difficulty: 'EASY'\n      },\n      {\n        sentence: '___ energy is the energy that holds the nucleus together.',\n        answer: 'binding',\n        hint: 'It binds the particles together',\n        difficulty: 'MEDIUM'\n      },\n      {\n        sentence: 'Nuclear ___ occurs in the sun and stars.',\n        answer: 'fusion',\n        hint: 'Think of combining atoms',\n        difficulty: 'MEDIUM'\n      },\n      {\n        sentence: 'The ___ effect explains why some nuclei are unstable.',\n        answer: 'tunnel',\n        hint: 'Quantum mechanical phenomenon',\n        difficulty: 'HARD'\n      }\n    ];\n\n    const createdFillInTheBlanks = [];\n    for (const contentData of contentBank) {\n      const fillInTheBlank = await createFillInTheBlank({\n        ...contentData,\n        blockId: 'block-123' // Associate with a specific block\n      });\n      createdFillInTheBlanks.push(fillInTheBlank);\n      console.log(`Created fill-in-the-blank: ${fillInTheBlank.sentence.substring(0, 50)}...`);\n    }\n\n    console.log(`Created ${createdFillInTheBlanks.length} fill-in-the-blanks for the content bank`);\n\n  } catch (error) {\n    if (error instanceof FillInTheBlankError) {\n      console.error('Content bank creation error:', error.message);\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"interactive-learning-system",children:"Interactive Learning System"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"async function interactiveLearningSystem() {\n  try {\n    // Get random fill-in-the-blanks for practice\n    const practiceItems = [];\n    for (let i = 0; i < 5; i++) {\n      const randomItem = await getRandomFillInTheBlank();\n      if (randomItem) {\n        practiceItems.push(randomItem);\n      }\n    }\n\n    console.log('Practice Session:');\n    for (let i = 0; i < practiceItems.length; i++) {\n      const item = practiceItems[i];\n      console.log(`${i + 1}. ${item.sentence}`);\n      console.log(`   Hint: ${item.hint || 'No hint available'}`);\n      console.log(`   Difficulty: ${item.difficulty || 'Not specified'}`);\n      console.log('');\n    }\n\n    // Search for specific content\n    const nuclearContent = await searchFillInTheBlanksBySentence('nuclear');\n    const fusionAnswers = await searchFillInTheBlanksByAnswer('fusion');\n\n    console.log(`Found ${nuclearContent.length} nuclear-related items`);\n    console.log(`Found ${fusionAnswers.length} items with 'fusion' as answer`);\n\n    // Get items with hints for guided learning\n    const itemsWithHints = await getFillInTheBlanksWithHints();\n    console.log(`Found ${itemsWithHints.length} items with helpful hints`);\n\n  } catch (error) {\n    if (error instanceof FillInTheBlankError) {\n      console.error('Interactive learning error:', error.message);\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"block-content-analysis",children:"Block Content Analysis"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"async function analyzeBlockFillInTheBlanks(blockId: string) {\n  try {\n    // Get all fill-in-the-blanks for the block\n    const fillInTheBlanks = await getFillInTheBlanksByBlock(blockId);\n    \n    // Analyze content distribution\n    const analysis = {\n      totalItems: fillInTheBlanks.length,\n      itemsWithHints: fillInTheBlanks.filter(item => item.hint).length,\n      itemsByDifficulty: {\n        EASY: 0,\n        MEDIUM: 0,\n        HARD: 0\n      },\n      averageSentenceLength: 0,\n      averageAnswerLength: 0\n    };\n\n    // Calculate statistics\n    let totalSentenceLength = 0;\n    let totalAnswerLength = 0;\n\n    for (const item of fillInTheBlanks) {\n      // Count by difficulty\n      if (item.difficulty) {\n        analysis.itemsByDifficulty[item.difficulty]++;\n      }\n\n      // Calculate lengths\n      totalSentenceLength += item.sentence.length;\n      totalAnswerLength += item.answer.length;\n    }\n\n    // Calculate averages\n    if (fillInTheBlanks.length > 0) {\n      analysis.averageSentenceLength = totalSentenceLength / fillInTheBlanks.length;\n      analysis.averageAnswerLength = totalAnswerLength / fillInTheBlanks.length;\n    }\n\n    console.log('Block Fill-in-the-Blank Analysis:', analysis);\n\n    // Get random item for preview\n    const randomItem = await getRandomFillInTheBlankByBlock(blockId);\n    if (randomItem) {\n      console.log('Sample item:');\n      console.log(`Sentence: ${randomItem.sentence}`);\n      console.log(`Answer: ${randomItem.answer}`);\n      console.log(`Hint: ${randomItem.hint || 'No hint'}`);\n    }\n\n  } catch (error) {\n    if (error instanceof FillInTheBlankError) {\n      console.error('Analysis error:', error.message);\n    }\n    throw error;\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"difficulty-based-content-management",children:"Difficulty-Based Content Management"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"async function manageDifficultyLevels(blockId: string) {\n  try {\n    // Get all fill-in-the-blanks for the block\n    const fillInTheBlanks = await getFillInTheBlanksByBlock(blockId);\n    \n    // Group by difficulty\n    const easyItems = fillInTheBlanks.filter(item => item.difficulty === 'EASY');\n    const mediumItems = fillInTheBlanks.filter(item => item.difficulty === 'MEDIUM');\n    const hardItems = fillInTheBlanks.filter(item => item.difficulty === 'HARD');\n\n    console.log(`Difficulty breakdown: Easy: ${easyItems.length}, Medium: ${mediumItems.length}, Hard: ${hardItems.length}`);\n\n    // Create additional items if needed for balanced difficulty\n    if (easyItems.length < 3) {\n      const easyItem = await createFillInTheBlank({\n        sentence: 'An ___ is the smallest unit of an element.',\n        answer: 'atom',\n        blockId: blockId,\n        hint: 'Basic building block of matter',\n        difficulty: 'EASY'\n      });\n      console.log(`Created easy item: ${easyItem.sentence.substring(0, 30)}...`);\n    }\n\n    if (mediumItems.length < 5) {\n      const mediumItem = await createFillInTheBlank({\n        sentence: 'Nuclear ___ is used in power plants to generate electricity.',\n        answer: 'fission',\n        blockId: blockId,\n        hint: 'Think of splitting atoms',\n        difficulty: 'MEDIUM'\n      });\n      console.log(`Created medium item: ${mediumItem.sentence.substring(0, 30)}...`);\n    }\n\n    if (hardItems.length < 2) {\n      const hardItem = await createFillInTheBlank({\n        sentence: 'The ___ effect allows particles to escape from the nucleus.',\n        answer: 'tunnel',\n        blockId: blockId,\n        hint: 'Quantum mechanical phenomenon',\n        difficulty: 'HARD'\n      });\n      console.log(`Created hard item: ${hardItem.sentence.substring(0, 30)}...`);\n    }\n\n  } catch (error) {\n    if (error instanceof FillInTheBlankError) {\n      console.error('Difficulty management error:', error.message);\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(e.h3,{id:"1-validate-content-quality",children:"1. Validate Content Quality"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"// \u2705 Good - Validate sentence format\nif (!data.sentence.includes('___')) {\n  throw new FillInTheBlankError('Sentence must contain blanks (___)');\n}\n\nif (!data.sentence.trim()) {\n  throw new FillInTheBlankError('Sentence cannot be empty');\n}\n\n// \u2705 Good - Validate answer quality\nif (!data.answer.trim()) {\n  throw new FillInTheBlankError('Answer cannot be empty');\n}\n\nif (data.answer.length > 100) {\n  throw new FillInTheBlankError('Answer too long');\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-handle-relationships-properly",children:"2. Handle Relationships Properly"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"// \u2705 Good - Check block exists before creating item\nif (blockId && !await blockExists(blockId)) {\n  throw new FillInTheBlankError('Block does not exist');\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"3-use-efficient-queries",children:"3. Use Efficient Queries"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"// \u2705 Good - Use Promise.all for parallel queries\nconst [block, items] = await Promise.all([\n  getFillInTheBlankBlock(itemId),\n  getFillInTheBlanksByBlock(blockId)\n]);\n\n// \u274c Avoid - Sequential queries\nconst block = await getFillInTheBlankBlock(itemId);\nconst items = await getFillInTheBlanksByBlock(blockId);\n"})}),"\n",(0,t.jsx)(e.h3,{id:"4-implement-content-validation",children:"4. Implement Content Validation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"// \u2705 Good - Validate fill-in-the-blank completeness\nasync function validateFillInTheBlank(itemId: string) {\n  const item = await getFillInTheBlankById(itemId);\n  if (!item) {\n    throw new FillInTheBlankError('Fill-in-the-blank not found');\n  }\n\n  if (!item.sentence.includes('___')) {\n    throw new FillInTheBlankError('Sentence must contain blanks');\n  }\n\n  if (!item.answer.trim()) {\n    throw new FillInTheBlankError('Answer cannot be empty');\n  }\n\n  return true;\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Indexing"}),": Ensure blockId field is indexed"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Search Indexing"}),": Index sentence and answer fields for fast search"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Batch Operations"}),": Use ",(0,t.jsx)(e.code,{children:"getAllFillInTheBlanks()"})," for bulk operations"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Caching"}),": Consider caching frequently accessed content"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Pagination"}),": For large content lists, implement pagination"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"./block",children:"Block Management"})})," - Associate fill-in-the-blanks with content blocks"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"./topic",children:"Topic Management"})})," - Categorize content by topics"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"./user",children:"User Management"})})," - Track content creators"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"./points-update",children:"Points System"})})," - Award points for correct answers"]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsxs)(e.p,{children:["Next: ",(0,t.jsx)(e.a,{href:"./points-update",children:"Points System"})," - Learn how to track points and progress with aggregation and date range utilities."]})]})}function d(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(h,{...n})}):h(n)}},8453:(n,e,l)=>{l.d(e,{R:()=>s,x:()=>r});var i=l(6540);const t={},a=i.createContext(t);function s(n){const e=i.useContext(a);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:s(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);