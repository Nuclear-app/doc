"use strict";(self.webpackChunknuclear_docs=self.webpackChunknuclear_docs||[]).push([[129],{947:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"development/deployment","title":"Deployment Guide","description":"Complete guide to deploying the Nuclear application to various platforms with production-ready configurations.","source":"@site/docs/development/deployment.md","sourceDirName":"development","slug":"/development/deployment","permalink":"/docs/development/deployment","draft":false,"unlisted":false,"editUrl":"https://github.com/nuclear-app/doc/tree/main/docs/development/deployment.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"Debugging Guide","permalink":"/docs/development/debugging"},"next":{"title":"Troubleshooting","permalink":"/docs/development/troubleshooting"}}');var t=r(4848),o=r(8453);const i={sidebar_position:9},a="Deployment Guide",l={},c=[{value:"\ud83d\ude80 Deployment Overview",id:"-deployment-overview",level:2},{value:"Supported Platforms",id:"supported-platforms",level:3},{value:"Deployment Checklist",id:"deployment-checklist",level:3},{value:"\ud83d\udce6 Vercel Deployment",id:"-vercel-deployment",level:2},{value:"Quick Deploy",id:"quick-deploy",level:3},{value:"1. <strong>Connect Repository</strong>",id:"1-connect-repository",level:4},{value:"2. <strong>Configure Environment Variables</strong>",id:"2-configure-environment-variables",level:4},{value:"3. <strong>Vercel Configuration</strong>",id:"3-vercel-configuration",level:4},{value:"Production Deployment",id:"production-deployment",level:3},{value:"1. <strong>Production Build</strong>",id:"1-production-build",level:4},{value:"2. <strong>Deploy to Production</strong>",id:"2-deploy-to-production",level:4},{value:"3. <strong>Custom Domain Setup</strong>",id:"3-custom-domain-setup",level:4},{value:"\ud83d\ude82 Railway Deployment",id:"-railway-deployment",level:2},{value:"Railway Setup",id:"railway-setup",level:3},{value:"1. <strong>Create Railway Project</strong>",id:"1-create-railway-project",level:4},{value:"2. <strong>Railway Configuration</strong>",id:"2-railway-configuration",level:4},{value:"3. <strong>Environment Variables</strong>",id:"3-environment-variables",level:4},{value:"4. <strong>Deploy to Railway</strong>",id:"4-deploy-to-railway",level:4},{value:"\ud83d\udc33 Docker Deployment",id:"-docker-deployment",level:2},{value:"Docker Configuration",id:"docker-configuration",level:3},{value:"1. <strong>Dockerfile</strong>",id:"1-dockerfile",level:4},{value:"2. <strong>Docker Compose</strong>",id:"2-docker-compose",level:4},{value:"3. <strong>Nginx Configuration</strong>",id:"3-nginx-configuration",level:4},{value:"4. <strong>Deploy with Docker</strong>",id:"4-deploy-with-docker",level:4},{value:"\ud83d\udd04 CI/CD Pipeline",id:"-cicd-pipeline",level:2},{value:"GitHub Actions",id:"github-actions",level:3},{value:"1. <strong>CI/CD Workflow</strong>",id:"1-cicd-workflow",level:4},{value:"2. <strong>Environment Secrets</strong>",id:"2-environment-secrets",level:4},{value:"GitLab CI/CD",id:"gitlab-cicd",level:3},{value:"1. <strong>GitLab Pipeline</strong>",id:"1-gitlab-pipeline",level:4},{value:"\ud83d\udd12 Production Security",id:"-production-security",level:2},{value:"Security Headers",id:"security-headers",level:3},{value:"1. <strong>Next.js Security Headers</strong>",id:"1-nextjs-security-headers",level:4},{value:"2. <strong>Content Security Policy</strong>",id:"2-content-security-policy",level:4},{value:"Environment Security",id:"environment-security",level:3},{value:"1. <strong>Environment Variable Validation</strong>",id:"1-environment-variable-validation",level:4},{value:"2. <strong>Runtime Security Checks</strong>",id:"2-runtime-security-checks",level:4},{value:"\ud83d\udcca Monitoring &amp; Logging",id:"-monitoring--logging",level:2},{value:"Application Monitoring",id:"application-monitoring",level:3},{value:"1. <strong>Health Check Endpoint</strong>",id:"1-health-check-endpoint",level:4},{value:"2. <strong>Structured Logging</strong>",id:"2-structured-logging",level:4},{value:"Performance Monitoring",id:"performance-monitoring",level:3},{value:"1. <strong>Performance Metrics</strong>",id:"1-performance-metrics",level:4},{value:"2. <strong>Database Query Monitoring</strong>",id:"2-database-query-monitoring",level:4},{value:"\ud83d\udd04 Backup &amp; Recovery",id:"-backup--recovery",level:2},{value:"Database Backup",id:"database-backup",level:3},{value:"1. <strong>Automated Backup Script</strong>",id:"1-automated-backup-script",level:4},{value:"2. <strong>Backup Cron Job</strong>",id:"2-backup-cron-job",level:4},{value:"Recovery Procedures",id:"recovery-procedures",level:3},{value:"1. <strong>Database Recovery</strong>",id:"1-database-recovery",level:4},{value:"2. <strong>Application Recovery</strong>",id:"2-application-recovery",level:4},{value:"\ud83d\udcda Related Documentation",id:"-related-documentation",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"deployment-guide",children:"Deployment Guide"})}),"\n",(0,t.jsx)(e.p,{children:"Complete guide to deploying the Nuclear application to various platforms with production-ready configurations."}),"\n",(0,t.jsx)(e.h2,{id:"-deployment-overview",children:"\ud83d\ude80 Deployment Overview"}),"\n",(0,t.jsx)(e.h3,{id:"supported-platforms",children:"Supported Platforms"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Vercel"})," - Recommended for Next.js applications"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Railway"})," - Full-stack deployment platform"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Netlify"})," - Static site hosting"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Docker"})," - Containerized deployment"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Self-hosted"})," - Custom server deployment"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"deployment-checklist",children:"Deployment Checklist"}),"\n",(0,t.jsxs)(e.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Environment variables configured"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Database migrations applied"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Build process tested"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Domain and SSL configured"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Monitoring and logging setup"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Backup strategy implemented"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"-vercel-deployment",children:"\ud83d\udce6 Vercel Deployment"}),"\n",(0,t.jsx)(e.h3,{id:"quick-deploy",children:"Quick Deploy"}),"\n",(0,t.jsxs)(e.h4,{id:"1-connect-repository",children:["1. ",(0,t.jsx)(e.strong,{children:"Connect Repository"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Install Vercel CLI\nbun add -g vercel\n\n# Login to Vercel\nvercel login\n\n# Deploy from project directory\nvercel\n"})}),"\n",(0,t.jsxs)(e.h4,{id:"2-configure-environment-variables",children:["2. ",(0,t.jsx)(e.strong,{children:"Configure Environment Variables"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'# Set environment variables\nvercel env add DATABASE_URL\nvercel env add NEXTAUTH_SECRET\nvercel env add NEXTAUTH_URL\n\n# Or use vercel.json\n{\n  "env": {\n    "DATABASE_URL": "postgresql://...",\n    "NEXTAUTH_SECRET": "your-secret",\n    "NEXTAUTH_URL": "https://your-domain.vercel.app"\n  }\n}\n'})}),"\n",(0,t.jsxs)(e.h4,{id:"3-vercel-configuration",children:["3. ",(0,t.jsx)(e.strong,{children:"Vercel Configuration"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'// vercel.json\n{\n  "buildCommand": "bun run build",\n  "devCommand": "bun coolDev",\n  "installCommand": "bun install",\n  "framework": "nextjs",\n  "functions": {\n    "app/api/**/*.ts": {\n      "runtime": "nodejs18.x"\n    }\n  },\n  "headers": [\n    {\n      "source": "/api/(.*)",\n      "headers": [\n        { "key": "Access-Control-Allow-Credentials", "value": "true" },\n        { "key": "Access-Control-Allow-Origin", "value": "*" },\n        { "key": "Access-Control-Allow-Methods", "value": "GET,POST,PUT,DELETE,OPTIONS" },\n        { "key": "Access-Control-Allow-Headers", "value": "Content-Type" }\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"production-deployment",children:"Production Deployment"}),"\n",(0,t.jsxs)(e.h4,{id:"1-production-build",children:["1. ",(0,t.jsx)(e.strong,{children:"Production Build"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Build for production\nbun run build\n\n# Test production build locally\nbun start\n"})}),"\n",(0,t.jsxs)(e.h4,{id:"2-deploy-to-production",children:["2. ",(0,t.jsx)(e.strong,{children:"Deploy to Production"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Deploy to production\nvercel --prod\n\n# Or set up automatic deployments\n# Connect GitHub repository to Vercel\n# Enable automatic deployments on push to main branch\n"})}),"\n",(0,t.jsxs)(e.h4,{id:"3-custom-domain-setup",children:["3. ",(0,t.jsx)(e.strong,{children:"Custom Domain Setup"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Add custom domain\nvercel domains add your-domain.com\n\n# Configure DNS records\n# A record: 76.76.19.19\n# CNAME record: cname.vercel-dns.com\n"})}),"\n",(0,t.jsx)(e.h2,{id:"-railway-deployment",children:"\ud83d\ude82 Railway Deployment"}),"\n",(0,t.jsx)(e.h3,{id:"railway-setup",children:"Railway Setup"}),"\n",(0,t.jsxs)(e.h4,{id:"1-create-railway-project",children:["1. ",(0,t.jsx)(e.strong,{children:"Create Railway Project"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Install Railway CLI\nbun add -g @railway/cli\n\n# Login to Railway\nrailway login\n\n# Initialize project\nrailway init\n"})}),"\n",(0,t.jsxs)(e.h4,{id:"2-railway-configuration",children:["2. ",(0,t.jsx)(e.strong,{children:"Railway Configuration"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'// railway.json\n{\n  "$schema": "https://railway.app/railway.schema.json",\n  "build": {\n    "builder": "NIXPACKS",\n    "buildCommand": "bun run build"\n  },\n  "deploy": {\n    "startCommand": "bun start",\n    "healthcheckPath": "/api/health",\n    "healthcheckTimeout": 300,\n    "restartPolicyType": "ON_FAILURE",\n    "restartPolicyMaxRetries": 10\n  }\n}\n'})}),"\n",(0,t.jsxs)(e.h4,{id:"3-environment-variables",children:["3. ",(0,t.jsx)(e.strong,{children:"Environment Variables"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Set environment variables in Railway dashboard\nDATABASE_URL=postgresql://...\nNEXTAUTH_SECRET=your-secret\nNEXTAUTH_URL=https://your-app.railway.app\n"})}),"\n",(0,t.jsxs)(e.h4,{id:"4-deploy-to-railway",children:["4. ",(0,t.jsx)(e.strong,{children:"Deploy to Railway"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Deploy application\nrailway up\n\n# View logs\nrailway logs\n\n# Open application\nrailway open\n"})}),"\n",(0,t.jsx)(e.h2,{id:"-docker-deployment",children:"\ud83d\udc33 Docker Deployment"}),"\n",(0,t.jsx)(e.h3,{id:"docker-configuration",children:"Docker Configuration"}),"\n",(0,t.jsxs)(e.h4,{id:"1-dockerfile",children:["1. ",(0,t.jsx)(e.strong,{children:"Dockerfile"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dockerfile",children:'# Dockerfile\nFROM oven/bun:1 as base\nWORKDIR /app\n\n# Install dependencies\nCOPY package.json bun.lockb ./\nRUN bun install --frozen-lockfile\n\n# Copy source code\nCOPY . .\n\n# Generate Prisma client\nRUN bunx prisma generate\n\n# Build application\nRUN bun run build\n\n# Production stage\nFROM oven/bun:1-slim as production\nWORKDIR /app\n\n# Copy built application\nCOPY --from=base /app/.next ./.next\nCOPY --from=base /app/public ./public\nCOPY --from=base /app/package.json ./package.json\nCOPY --from=base /app/bun.lockb ./bun.lockb\nCOPY --from=base /app/next.config.js ./next.config.js\nCOPY --from=base /app/lib/generated ./lib/generated\n\n# Install production dependencies\nRUN bun install --frozen-lockfile --production\n\n# Create non-root user\nRUN addgroup --system --gid 1001 nodejs\nRUN adduser --system --uid 1001 nextjs\n\n# Change ownership\nRUN chown -R nextjs:nodejs /app\nUSER nextjs\n\n# Expose port\nEXPOSE 3000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost:3000/api/health || exit 1\n\n# Start application\nCMD ["bun", "start"]\n'})}),"\n",(0,t.jsxs)(e.h4,{id:"2-docker-compose",children:["2. ",(0,t.jsx)(e.strong,{children:"Docker Compose"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:'# docker-compose.yml\nversion: \'3.8\'\n\nservices:\n  app:\n    build: .\n    ports:\n      - "3000:3000"\n    environment:\n      - DATABASE_URL=postgresql://postgres:password@db:5432/nuclear\n      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}\n      - NEXTAUTH_URL=${NEXTAUTH_URL}\n      - NODE_ENV=production\n    depends_on:\n      - db\n    volumes:\n      - ./uploads:/app/uploads\n    restart: unless-stopped\n    healthcheck:\n      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  db:\n    image: postgres:15-alpine\n    environment:\n      - POSTGRES_DB=nuclear\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    ports:\n      - "5432:5432"\n    restart: unless-stopped\n    healthcheck:\n      test: ["CMD-SHELL", "pg_isready -U postgres"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - "80:80"\n      - "443:443"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/nginx/ssl\n    depends_on:\n      - app\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n'})}),"\n",(0,t.jsxs)(e.h4,{id:"3-nginx-configuration",children:["3. ",(0,t.jsx)(e.strong,{children:"Nginx Configuration"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-nginx",children:"# nginx.conf\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    upstream app {\n        server app:3000;\n    }\n\n    server {\n        listen 80;\n        server_name your-domain.com;\n        return 301 https://$server_name$request_uri;\n    }\n\n    server {\n        listen 443 ssl http2;\n        server_name your-domain.com;\n\n        ssl_certificate /etc/nginx/ssl/cert.pem;\n        ssl_certificate_key /etc/nginx/ssl/key.pem;\n\n        location / {\n            proxy_pass http://app;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection 'upgrade';\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_cache_bypass $http_upgrade;\n        }\n    }\n}\n"})}),"\n",(0,t.jsxs)(e.h4,{id:"4-deploy-with-docker",children:["4. ",(0,t.jsx)(e.strong,{children:"Deploy with Docker"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Build and run with Docker Compose\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f app\n\n# Stop services\ndocker-compose down\n\n# Update application\ndocker-compose pull\ndocker-compose up -d\n"})}),"\n",(0,t.jsx)(e.h2,{id:"-cicd-pipeline",children:"\ud83d\udd04 CI/CD Pipeline"}),"\n",(0,t.jsx)(e.h3,{id:"github-actions",children:"GitHub Actions"}),"\n",(0,t.jsxs)(e.h4,{id:"1-cicd-workflow",children:["1. ",(0,t.jsx)(e.strong,{children:"CI/CD Workflow"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:'# .github/workflows/deploy.yml\nname: Deploy to Production\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    services:\n      postgres:\n        image: postgres:15\n        env:\n          POSTGRES_PASSWORD: password\n          POSTGRES_DB: nuclear_test\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n\n    steps:\n      - uses: actions/checkout@v4\n      \n      - name: Setup Bun\n        uses: oven-sh/setup-bun@v1\n        with:\n          bun-version: latest\n      \n      - name: Install dependencies\n        run: bun install\n      \n      - name: Setup environment\n        run: |\n          echo "DATABASE_URL=postgresql://postgres:password@localhost:5432/nuclear_test" >> .env\n          echo "NEXTAUTH_SECRET=test-secret" >> .env\n          echo "NEXTAUTH_URL=http://localhost:3000" >> .env\n      \n      - name: Generate Prisma client\n        run: bunx prisma generate\n      \n      - name: Run database migrations\n        run: bunx prisma migrate deploy\n      \n      - name: Run tests\n        run: bun test\n      \n      - name: Build application\n        run: bun run build\n\n  deploy:\n    needs: test\n    runs-on: ubuntu-latest\n    if: github.ref == \'refs/heads/main\'\n    \n    steps:\n      - uses: actions/checkout@v4\n      \n      - name: Setup Bun\n        uses: oven-sh/setup-bun@v1\n        with:\n          bun-version: latest\n      \n      - name: Install dependencies\n        run: bun install\n      \n      - name: Generate Prisma client\n        run: bunx prisma generate\n      \n      - name: Build application\n        run: bun run build\n      \n      - name: Deploy to Vercel\n        uses: amondnet/vercel-action@v25\n        with:\n          vercel-token: ${{ secrets.VERCEL_TOKEN }}\n          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}\n          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}\n          vercel-args: \'--prod\'\n'})}),"\n",(0,t.jsxs)(e.h4,{id:"2-environment-secrets",children:["2. ",(0,t.jsx)(e.strong,{children:"Environment Secrets"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Set in GitHub repository settings\nVERCEL_TOKEN=your-vercel-token\nVERCEL_ORG_ID=your-org-id\nVERCEL_PROJECT_ID=your-project-id\nDATABASE_URL=your-production-database-url\nNEXTAUTH_SECRET=your-production-secret\n"})}),"\n",(0,t.jsx)(e.h3,{id:"gitlab-cicd",children:"GitLab CI/CD"}),"\n",(0,t.jsxs)(e.h4,{id:"1-gitlab-pipeline",children:["1. ",(0,t.jsx)(e.strong,{children:"GitLab Pipeline"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:'# .gitlab-ci.yml\nstages:\n  - test\n  - build\n  - deploy\n\nvariables:\n  NODE_VERSION: "18"\n\ntest:\n  stage: test\n  image: oven/bun:1\n  services:\n    - postgres:15\n  variables:\n    POSTGRES_DB: nuclear_test\n    POSTGRES_USER: postgres\n    POSTGRES_PASSWORD: password\n    DATABASE_URL: postgresql://postgres:password@postgres:5432/nuclear_test\n  script:\n    - bun install\n    - bunx prisma generate\n    - bunx prisma migrate deploy\n    - bun test\n    - bun run build\n  only:\n    - merge_requests\n    - main\n\nbuild:\n  stage: build\n  image: oven/bun:1\n  script:\n    - bun install\n    - bunx prisma generate\n    - bun run build\n  artifacts:\n    paths:\n      - .next/\n      - public/\n      - package.json\n      - bun.lockb\n      - next.config.js\n      - lib/generated/\n    expire_in: 1 hour\n  only:\n    - main\n\ndeploy:\n  stage: deploy\n  image: alpine:latest\n  before_script:\n    - apk add --no-cache curl\n  script:\n    - curl -X POST $DEPLOY_WEBHOOK_URL\n  only:\n    - main\n'})}),"\n",(0,t.jsx)(e.h2,{id:"-production-security",children:"\ud83d\udd12 Production Security"}),"\n",(0,t.jsx)(e.h3,{id:"security-headers",children:"Security Headers"}),"\n",(0,t.jsxs)(e.h4,{id:"1-nextjs-security-headers",children:["1. ",(0,t.jsx)(e.strong,{children:"Next.js Security Headers"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"// next.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  async headers() {\n    return [\n      {\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'X-Frame-Options',\n            value: 'DENY',\n          },\n          {\n            key: 'X-Content-Type-Options',\n            value: 'nosniff',\n          },\n          {\n            key: 'Referrer-Policy',\n            value: 'origin-when-cross-origin',\n          },\n          {\n            key: 'X-XSS-Protection',\n            value: '1; mode=block',\n          },\n          {\n            key: 'Strict-Transport-Security',\n            value: 'max-age=31536000; includeSubDomains',\n          },\n        ],\n      },\n    ];\n  },\n};\n\nmodule.exports = nextConfig;\n"})}),"\n",(0,t.jsxs)(e.h4,{id:"2-content-security-policy",children:["2. ",(0,t.jsx)(e.strong,{children:"Content Security Policy"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"// middleware.ts\nimport { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\n\nexport function middleware(request: NextRequest) {\n  const response = NextResponse.next();\n\n  // Add CSP header\n  response.headers.set(\n    'Content-Security-Policy',\n    [\n      \"default-src 'self'\",\n      \"script-src 'self' 'unsafe-eval' 'unsafe-inline'\",\n      \"style-src 'self' 'unsafe-inline'\",\n      \"img-src 'self' data: https:\",\n      \"font-src 'self'\",\n      \"connect-src 'self' https:\",\n      \"frame-ancestors 'none'\",\n    ].join('; ')\n  );\n\n  return response;\n}\n\nexport const config = {\n  matcher: '/((?!api|_next/static|_next/image|favicon.ico).*)',\n};\n"})}),"\n",(0,t.jsx)(e.h3,{id:"environment-security",children:"Environment Security"}),"\n",(0,t.jsxs)(e.h4,{id:"1-environment-variable-validation",children:["1. ",(0,t.jsx)(e.strong,{children:"Environment Variable Validation"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"// lib/env-validation.ts\nimport { z } from 'zod';\n\nconst productionEnvSchema = z.object({\n  DATABASE_URL: z.string().url(),\n  NEXTAUTH_SECRET: z.string().min(32),\n  NEXTAUTH_URL: z.string().url(),\n  NODE_ENV: z.literal('production'),\n});\n\nexport function validateProductionEnv() {\n  try {\n    return productionEnvSchema.parse(process.env);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      console.error('\u274c Production environment validation failed:');\n      error.errors.forEach((err) => {\n        console.error(`  - ${err.path.join('.')}: ${err.message}`);\n      });\n      process.exit(1);\n    }\n    throw error;\n  }\n}\n"})}),"\n",(0,t.jsxs)(e.h4,{id:"2-runtime-security-checks",children:["2. ",(0,t.jsx)(e.strong,{children:"Runtime Security Checks"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"// lib/security.ts\nexport function validateSecurityConfig() {\n  const issues: string[] = [];\n\n  // Check for weak secrets\n  if (process.env.NEXTAUTH_SECRET && process.env.NEXTAUTH_SECRET.length < 32) {\n    issues.push('NEXTAUTH_SECRET is too short (minimum 32 characters)');\n  }\n\n  // Check for development secrets in production\n  if (process.env.NODE_ENV === 'production') {\n    if (process.env.NEXTAUTH_SECRET === 'dev-secret') {\n      issues.push('Using development secret in production');\n    }\n    if (process.env.DATABASE_URL?.includes('localhost')) {\n      issues.push('Using localhost database in production');\n    }\n  }\n\n  if (issues.length > 0) {\n    console.error('\u274c Security issues detected:');\n    issues.forEach(issue => console.error(`  - ${issue}`));\n    process.exit(1);\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"-monitoring--logging",children:"\ud83d\udcca Monitoring & Logging"}),"\n",(0,t.jsx)(e.h3,{id:"application-monitoring",children:"Application Monitoring"}),"\n",(0,t.jsxs)(e.h4,{id:"1-health-check-endpoint",children:["1. ",(0,t.jsx)(e.strong,{children:"Health Check Endpoint"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"// app/api/health/route.ts\nimport { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/generated/prisma';\n\nexport async function GET() {\n  const startTime = Date.now();\n  \n  try {\n    // Check database connection\n    await prisma.$queryRaw`SELECT 1`;\n    \n    // Check environment variables\n    const requiredEnvVars = [\n      'DATABASE_URL',\n      'NEXTAUTH_SECRET',\n      'NEXTAUTH_URL',\n    ];\n    \n    const missingVars = requiredEnvVars.filter(\n      (varName) => !process.env[varName]\n    );\n    \n    if (missingVars.length > 0) {\n      return NextResponse.json(\n        {\n          status: 'error',\n          message: 'Missing environment variables',\n          missing: missingVars,\n          timestamp: new Date().toISOString(),\n          uptime: process.uptime(),\n        },\n        { status: 500 }\n      );\n    }\n    \n    const responseTime = Date.now() - startTime;\n    \n    return NextResponse.json({\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV,\n      database: 'connected',\n      responseTime: `${responseTime}ms`,\n      uptime: process.uptime(),\n      version: process.env.npm_package_version || 'unknown',\n    });\n  } catch (error) {\n    const responseTime = Date.now() - startTime;\n    \n    return NextResponse.json(\n      {\n        status: 'error',\n        message: 'Health check failed',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        responseTime: `${responseTime}ms`,\n        uptime: process.uptime(),\n      },\n      { status: 500 }\n    );\n  }\n}\n"})}),"\n",(0,t.jsxs)(e.h4,{id:"2-structured-logging",children:["2. ",(0,t.jsx)(e.strong,{children:"Structured Logging"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"// lib/logger.ts\nexport interface LogEntry {\n  level: 'info' | 'warn' | 'error' | 'debug';\n  message: string;\n  timestamp: string;\n  context?: Record<string, any>;\n  error?: Error;\n}\n\nclass Logger {\n  private log(entry: LogEntry) {\n    const logData = {\n      ...entry,\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV,\n    };\n\n    if (process.env.NODE_ENV === 'production') {\n      // In production, use structured logging\n      console.log(JSON.stringify(logData));\n    } else {\n      // In development, use readable format\n      console.log(`[${entry.level.toUpperCase()}] ${entry.message}`, entry.context || '');\n    }\n  }\n\n  info(message: string, context?: Record<string, any>) {\n    this.log({ level: 'info', message, context });\n  }\n\n  warn(message: string, context?: Record<string, any>) {\n    this.log({ level: 'warn', message, context });\n  }\n\n  error(message: string, error?: Error, context?: Record<string, any>) {\n    this.log({ level: 'error', message, error, context });\n  }\n\n  debug(message: string, context?: Record<string, any>) {\n    if (process.env.NODE_ENV === 'development') {\n      this.log({ level: 'debug', message, context });\n    }\n  }\n}\n\nexport const logger = new Logger();\n"})}),"\n",(0,t.jsx)(e.h3,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,t.jsxs)(e.h4,{id:"1-performance-metrics",children:["1. ",(0,t.jsx)(e.strong,{children:"Performance Metrics"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"// lib/performance.ts\nexport function measurePerformance<T>(\n  name: string,\n  fn: () => T | Promise<T>\n): T | Promise<T> {\n  const start = performance.now();\n  \n  const result = fn();\n  \n  if (result instanceof Promise) {\n    return result.finally(() => {\n      const end = performance.now();\n      logger.info(`Performance: ${name}`, {\n        duration: `${end - start}ms`,\n        operation: name,\n      });\n    });\n  } else {\n    const end = performance.now();\n    logger.info(`Performance: ${name}`, {\n      duration: `${end - start}ms`,\n      operation: name,\n    });\n    return result;\n  }\n}\n"})}),"\n",(0,t.jsxs)(e.h4,{id:"2-database-query-monitoring",children:["2. ",(0,t.jsx)(e.strong,{children:"Database Query Monitoring"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"// lib/database-monitor.ts\nimport { prisma } from '@/lib/generated/prisma';\n\n// Monitor slow queries\nprisma.$use(async (params, next) => {\n  const start = performance.now();\n  const result = await next(params);\n  const end = performance.now();\n  \n  const duration = end - start;\n  \n  if (duration > 1000) { // Log queries slower than 1 second\n    logger.warn('Slow database query detected', {\n      model: params.model,\n      action: params.action,\n      duration: `${duration}ms`,\n      args: params.args,\n    });\n  }\n  \n  return result;\n});\n"})}),"\n",(0,t.jsx)(e.h2,{id:"-backup--recovery",children:"\ud83d\udd04 Backup & Recovery"}),"\n",(0,t.jsx)(e.h3,{id:"database-backup",children:"Database Backup"}),"\n",(0,t.jsxs)(e.h4,{id:"1-automated-backup-script",children:["1. ",(0,t.jsx)(e.strong,{children:"Automated Backup Script"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n# scripts/backup-db.sh\n\nBACKUP_DIR="/backups"\nDATE=$(date +%Y%m%d_%H%M%S)\nDB_NAME="nuclear"\nBACKUP_FILE="$BACKUP_DIR/nuclear_$DATE.sql"\n\n# Create backup directory\nmkdir -p $BACKUP_DIR\n\n# Create database backup\npg_dump $DATABASE_URL > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Keep only last 7 days of backups\nfind $BACKUP_DIR -name "nuclear_*.sql.gz" -mtime +7 -delete\n\necho "Backup created: $BACKUP_FILE.gz"\n'})}),"\n",(0,t.jsxs)(e.h4,{id:"2-backup-cron-job",children:["2. ",(0,t.jsx)(e.strong,{children:"Backup Cron Job"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Add to crontab\n# Daily backup at 2 AM\n0 2 * * * /path/to/scripts/backup-db.sh\n\n# Weekly backup on Sunday at 3 AM\n0 3 * * 0 /path/to/scripts/backup-db.sh\n"})}),"\n",(0,t.jsx)(e.h3,{id:"recovery-procedures",children:"Recovery Procedures"}),"\n",(0,t.jsxs)(e.h4,{id:"1-database-recovery",children:["1. ",(0,t.jsx)(e.strong,{children:"Database Recovery"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n# scripts/restore-db.sh\n\nBACKUP_FILE=$1\nDB_NAME="nuclear"\n\nif [ -z "$BACKUP_FILE" ]; then\n  echo "Usage: $0 <backup-file>"\n  exit 1\nfi\n\n# Restore database\ngunzip -c $BACKUP_FILE | psql $DATABASE_URL\n\necho "Database restored from: $BACKUP_FILE"\n'})}),"\n",(0,t.jsxs)(e.h4,{id:"2-application-recovery",children:["2. ",(0,t.jsx)(e.strong,{children:"Application Recovery"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n# scripts/recover-app.sh\n\necho "Starting application recovery..."\n\n# Stop application\ndocker-compose down\n\n# Restore database\n./scripts/restore-db.sh $1\n\n# Start application\ndocker-compose up -d\n\n# Health check\nsleep 30\ncurl -f http://localhost:3000/api/health\n\necho "Application recovery completed"\n'})}),"\n",(0,t.jsx)(e.h2,{id:"-related-documentation",children:"\ud83d\udcda Related Documentation"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"./environment",children:"Environment Configuration"})})," - Environment setup"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"./database",children:"Database & Prisma"})})," - Database deployment"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"./troubleshooting",children:"Troubleshooting"})})," - Deployment issues"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"./setup",children:"Development Setup"})})," - Local development"]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Deploy your application with confidence and security!"})," \ud83d\ude80"]})]})}function p(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>i,x:()=>a});var s=r(6540);const t={},o=s.createContext(t);function i(n){const e=s.useContext(o);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:i(n.components),s.createElement(o.Provider,{value:e},n.children)}}}]);