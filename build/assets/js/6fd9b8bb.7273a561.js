"use strict";(self.webpackChunknuclear_docs=self.webpackChunknuclear_docs||[]).push([[952],{7308:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"development/database","title":"Database & Prisma","description":"Complete guide to database operations, Prisma schema management, and data modeling in the Nuclear application.","source":"@site/docs/development/database.md","sourceDirName":"development","slug":"/development/database","permalink":"/docs/development/database","draft":false,"unlisted":false,"editUrl":"https://github.com/nuclear-app/doc/tree/main/docs/development/database.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Environment Configuration","permalink":"/docs/development/environment"},"next":{"title":"Development Workflow","permalink":"/docs/development/workflow"}}');var s=i(4848),r=i(8453);const l={sidebar_position:5},t="Database & Prisma",d={},o=[{value:"\ud83d\uddc4\ufe0f Database Overview",id:"\ufe0f-database-overview",level:2},{value:"Technology Stack",id:"technology-stack",level:3},{value:"Key Features",id:"key-features",level:3},{value:"\ud83d\udcca Database Schema",id:"-database-schema",level:2},{value:"Core Models",id:"core-models",level:3},{value:"User Model",id:"user-model",level:4},{value:"Block Model (Content)",id:"block-model-content",level:4},{value:"Folder Model (Organization)",id:"folder-model-organization",level:4},{value:"Quiz Model",id:"quiz-model",level:4},{value:"Question Model",id:"question-model",level:4},{value:"Topic Model",id:"topic-model",level:4},{value:"FillInTheBlank Model",id:"fillintheblank-model",level:4},{value:"PointsUpdate Model",id:"pointsupdate-model",level:4},{value:"Enums",id:"enums",level:3},{value:"\ud83d\udd27 Prisma Operations",id:"-prisma-operations",level:2},{value:"Schema Management",id:"schema-management",level:3},{value:"Generate Prisma Client",id:"generate-prisma-client",level:4},{value:"Create Migration",id:"create-migration",level:4},{value:"Apply Migrations",id:"apply-migrations",level:4},{value:"Reset Database",id:"reset-database",level:4},{value:"Database Operations",id:"database-operations",level:3},{value:"Pull Schema Changes",id:"pull-schema-changes",level:4},{value:"Push Schema Changes",id:"push-schema-changes",level:4},{value:"Validate Schema",id:"validate-schema",level:4},{value:"Database GUI",id:"database-gui",level:3},{value:"Prisma Studio",id:"prisma-studio",level:4},{value:"\ud83d\udcdd Migration Workflow",id:"-migration-workflow",level:2},{value:"Creating Schema Changes",id:"creating-schema-changes",level:3},{value:"Migration Best Practices",id:"migration-best-practices",level:3},{value:"Naming Conventions",id:"naming-conventions",level:4},{value:"Testing Migrations",id:"testing-migrations",level:4},{value:"Production Migrations",id:"production-migrations",level:4},{value:"\ud83d\udd0d Database Queries",id:"-database-queries",level:2},{value:"Using Prisma Client",id:"using-prisma-client",level:3},{value:"Basic Queries",id:"basic-queries",level:4},{value:"Relationship Queries",id:"relationship-queries",level:4},{value:"Advanced Queries",id:"advanced-queries",level:4},{value:"\ud83d\ude80 Performance Optimization",id:"-performance-optimization",level:2},{value:"Indexing Strategy",id:"indexing-strategy",level:3},{value:"Primary Indexes",id:"primary-indexes",level:4},{value:"Custom Indexes",id:"custom-indexes",level:4},{value:"Composite Indexes",id:"composite-indexes",level:4},{value:"Query Optimization",id:"query-optimization",level:3},{value:"Select Only Needed Fields",id:"select-only-needed-fields",level:4},{value:"Use Pagination",id:"use-pagination",level:4},{value:"Batch Operations",id:"batch-operations",level:4},{value:"\ud83d\udd12 Data Integrity",id:"-data-integrity",level:2},{value:"Constraints",id:"constraints",level:3},{value:"Unique Constraints",id:"unique-constraints",level:4},{value:"Required Fields",id:"required-fields",level:4},{value:"Foreign Key Constraints",id:"foreign-key-constraints",level:4},{value:"Validation",id:"validation",level:3},{value:"Field Validation",id:"field-validation",level:4},{value:"Custom Validation",id:"custom-validation",level:4},{value:"\ud83d\udd0d Monitoring &amp; Debugging",id:"-monitoring--debugging",level:2},{value:"Query Logging",id:"query-logging",level:3},{value:"Enable Query Logging",id:"enable-query-logging",level:4},{value:"Performance Monitoring",id:"performance-monitoring",level:4},{value:"Common Issues",id:"common-issues",level:3},{value:"Connection Issues",id:"connection-issues",level:4},{value:"Migration Issues",id:"migration-issues",level:4},{value:"Type Issues",id:"type-issues",level:4},{value:"\ud83d\udcda Related Documentation",id:"-related-documentation",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"database--prisma",children:"Database & Prisma"})}),"\n",(0,s.jsx)(n.p,{children:"Complete guide to database operations, Prisma schema management, and data modeling in the Nuclear application."}),"\n",(0,s.jsx)(n.h2,{id:"\ufe0f-database-overview",children:"\ud83d\uddc4\ufe0f Database Overview"}),"\n",(0,s.jsx)(n.h3,{id:"technology-stack",children:"Technology Stack"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database"}),": PostgreSQL (Supabase)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ORM"}),": Prisma"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Schema Location"}),": ",(0,s.jsx)(n.code,{children:"prisma/schema.prisma"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Generated Client"}),": ",(0,s.jsx)(n.code,{children:"lib/generated/prisma/"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"key-features",children:"Key Features"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type Safety"})," - Full TypeScript integration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Migrations"})," - Version-controlled schema changes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relationships"})," - Foreign key relationships between models"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Indexing"})," - Performance optimization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Constraints"})," - Data integrity enforcement"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-database-schema",children:"\ud83d\udcca Database Schema"}),"\n",(0,s.jsx)(n.h3,{id:"core-models",children:"Core Models"}),"\n",(0,s.jsx)(n.h4,{id:"user-model",children:"User Model"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-prisma",children:'model User {\n  id        String   @id @default(cuid())\n  email     String   @unique\n  name      String?\n  mode      UserMode @default(STUDENT)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relationships\n  blocks    Block[]\n  folders   Folder[]\n  pointsUpdates PointsUpdate[]\n\n  @@map("users")\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"block-model-content",children:"Block Model (Content)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-prisma",children:'model Block {\n  id        String   @id @default(cuid())\n  title     String\n  content   String\n  authorId  String\n  folderId  String?\n  published Boolean  @default(false)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relationships\n  author    User     @relation(fields: [authorId], references: [id])\n  folder    Folder?  @relation(fields: [folderId], references: [id])\n  questions Question[]\n  quizzes   Quiz[]\n  topics    Topic[]\n  fillInTheBlanks FillInTheBlank[]\n  pointsUpdates PointsUpdate[]\n\n  @@map("blocks")\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"folder-model-organization",children:"Folder Model (Organization)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-prisma",children:'model Folder {\n  id          String   @id @default(cuid())\n  name        String\n  description String?\n  authorId    String\n  parentId    String?\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  // Relationships\n  author      User     @relation(fields: [authorId], references: [id])\n  parent      Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id])\n  children    Folder[] @relation("FolderHierarchy")\n  blocks      Block[]\n\n  @@map("folders")\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"quiz-model",children:"Quiz Model"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-prisma",children:'model Quiz {\n  id           String   @id @default(cuid())\n  title        String\n  description  String?\n  blockId      String?\n  topicId      String?\n  timeLimit    Int?\n  passingScore Int?\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n\n  // Relationships\n  block        Block?   @relation(fields: [blockId], references: [id])\n  topic        Topic?   @relation(fields: [topicId], references: [id])\n\n  @@map("quizzes")\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"question-model",children:"Question Model"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-prisma",children:'model Question {\n  id         String   @id @default(cuid())\n  text       String\n  blockId    String?\n  type       String?\n  difficulty QuestionDifficulty?\n  points     Int?\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n\n  // Relationships\n  block      Block?   @relation(fields: [blockId], references: [id])\n\n  @@map("questions")\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"topic-model",children:"Topic Model"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-prisma",children:'model Topic {\n  id          String   @id @default(cuid())\n  name        String\n  description String?\n  blockId     String?\n  examples    String?\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  // Relationships\n  block       Block?   @relation(fields: [blockId], references: [id])\n  quizzes     Quiz[]\n\n  @@map("topics")\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"fillintheblank-model",children:"FillInTheBlank Model"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-prisma",children:'model FillInTheBlank {\n  id         String   @id @default(cuid())\n  sentence   String\n  answer     String\n  blockId    String?\n  hint       String?\n  difficulty FillInTheBlankDifficulty?\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n\n  // Relationships\n  block      Block?   @relation(fields: [blockId], references: [id])\n\n  @@map("fill_in_the_blanks")\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"pointsupdate-model",children:"PointsUpdate Model"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-prisma",children:'model PointsUpdate {\n  id       String   @id @default(cuid())\n  points   Int\n  blockId  String?\n  reason   String?\n  userId   String?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relationships\n  block    Block?   @relation(fields: [blockId], references: [id])\n  user     User?    @relation(fields: [userId], references: [id])\n\n  @@map("points_updates")\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"enums",children:"Enums"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-prisma",children:"enum UserMode {\n  STUDENT\n  TEACHER\n  ADMIN\n}\n\nenum QuestionDifficulty {\n  EASY\n  MEDIUM\n  HARD\n}\n\nenum FillInTheBlankDifficulty {\n  EASY\n  MEDIUM\n  HARD\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-prisma-operations",children:"\ud83d\udd27 Prisma Operations"}),"\n",(0,s.jsx)(n.h3,{id:"schema-management",children:"Schema Management"}),"\n",(0,s.jsx)(n.h4,{id:"generate-prisma-client",children:"Generate Prisma Client"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"bunx prisma generate\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"When to use:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"After schema changes"}),"\n",(0,s.jsx)(n.li,{children:"After pulling database changes"}),"\n",(0,s.jsx)(n.li,{children:"When TypeScript shows Prisma errors"}),"\n",(0,s.jsx)(n.li,{children:"Before running the application"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"create-migration",children:"Create Migration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"bunx prisma migrate dev --name descriptive_name\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"What it does:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Detects schema changes"}),"\n",(0,s.jsx)(n.li,{children:"Creates migration file"}),"\n",(0,s.jsx)(n.li,{children:"Applies migration to database"}),"\n",(0,s.jsx)(n.li,{children:"Regenerates Prisma client"}),"\n",(0,s.jsx)(n.li,{children:"Seeds database (if configured)"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"apply-migrations",children:"Apply Migrations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"bunx prisma migrate deploy\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"For production:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Applies pending migrations"}),"\n",(0,s.jsx)(n.li,{children:"No schema generation"}),"\n",(0,s.jsx)(n.li,{children:"Safe for production use"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"reset-database",children:"Reset Database"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"bunx prisma migrate reset\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"\u26a0\ufe0f Warning: Destructive operation!"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Drops all tables"}),"\n",(0,s.jsx)(n.li,{children:"Recreates schema"}),"\n",(0,s.jsx)(n.li,{children:"Applies all migrations"}),"\n",(0,s.jsx)(n.li,{children:"Runs seed script"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"database-operations",children:"Database Operations"}),"\n",(0,s.jsx)(n.h4,{id:"pull-schema-changes",children:"Pull Schema Changes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"bunx prisma db pull\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"When to use:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Database changed externally"}),"\n",(0,s.jsx)(n.li,{children:"Working with existing database"}),"\n",(0,s.jsx)(n.li,{children:"Syncing with production schema"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"push-schema-changes",children:"Push Schema Changes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"bunx prisma db push\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Development only:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Pushes schema to database"}),"\n",(0,s.jsx)(n.li,{children:"No migration files created"}),"\n",(0,s.jsx)(n.li,{children:"Useful for prototyping"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"validate-schema",children:"Validate Schema"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"bunx prisma validate\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"What it checks:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Schema syntax"}),"\n",(0,s.jsx)(n.li,{children:"Model relationships"}),"\n",(0,s.jsx)(n.li,{children:"Field types"}),"\n",(0,s.jsx)(n.li,{children:"Constraints"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"database-gui",children:"Database GUI"}),"\n",(0,s.jsx)(n.h4,{id:"prisma-studio",children:"Prisma Studio"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"bunx prisma studio\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Features:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Visual database browser"}),"\n",(0,s.jsx)(n.li,{children:"Edit data directly"}),"\n",(0,s.jsx)(n.li,{children:"View relationships"}),"\n",(0,s.jsx)(n.li,{children:"Export data"}),"\n",(0,s.jsxs)(n.li,{children:["Runs on ",(0,s.jsx)(n.code,{children:"http://localhost:5555"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-migration-workflow",children:"\ud83d\udcdd Migration Workflow"}),"\n",(0,s.jsx)(n.h3,{id:"creating-schema-changes",children:"Creating Schema Changes"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Modify Schema"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-prisma",children:"// prisma/schema.prisma\nmodel User {\n  id        String   @id @default(cuid())\n  email     String   @unique\n  name      String?\n  // Add new field\n  avatar    String?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Create Migration"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"bunx prisma migrate dev --name add_user_avatar\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Verify Changes"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"bunx prisma studio\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"migration-best-practices",children:"Migration Best Practices"}),"\n",(0,s.jsx)(n.h4,{id:"naming-conventions",children:"Naming Conventions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Good names\nbunx prisma migrate dev --name add_user_avatar\nbunx prisma migrate dev --name update_quiz_time_limit\nbunx prisma migrate dev --name create_topic_index\n\n# Avoid generic names\nbunx prisma migrate dev --name migration\nbunx prisma migrate dev --name update\n"})}),"\n",(0,s.jsx)(n.h4,{id:"testing-migrations",children:"Testing Migrations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Test on development database first\nbunx prisma migrate dev\n\n# Verify data integrity\nbunx prisma studio\n\n# Check application functionality\nbun coolDev\n"})}),"\n",(0,s.jsx)(n.h4,{id:"production-migrations",children:"Production Migrations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Create migration file only\nbunx prisma migrate dev --create-only\n\n# Review migration file\n# Edit if needed\n\n# Apply to production\nbunx prisma migrate deploy\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-database-queries",children:"\ud83d\udd0d Database Queries"}),"\n",(0,s.jsx)(n.h3,{id:"using-prisma-client",children:"Using Prisma Client"}),"\n",(0,s.jsx)(n.h4,{id:"basic-queries",children:"Basic Queries"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { prisma } from '@/lib/generated/prisma';\n\n// Find single record\nconst user = await prisma.user.findUnique({\n  where: { id: 'user-123' }\n});\n\n// Find many records\nconst users = await prisma.user.findMany({\n  where: { mode: 'STUDENT' }\n});\n\n// Create record\nconst newUser = await prisma.user.create({\n  data: {\n    email: 'user@example.com',\n    name: 'John Doe',\n    mode: 'STUDENT'\n  }\n});\n\n// Update record\nconst updatedUser = await prisma.user.update({\n  where: { id: 'user-123' },\n  data: { name: 'Jane Doe' }\n});\n\n// Delete record\nconst deletedUser = await prisma.user.delete({\n  where: { id: 'user-123' }\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"relationship-queries",children:"Relationship Queries"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Include related data\nconst userWithBlocks = await prisma.user.findUnique({\n  where: { id: 'user-123' },\n  include: {\n    blocks: true,\n    folders: true\n  }\n});\n\n// Nested includes\nconst blockWithAuthor = await prisma.block.findUnique({\n  where: { id: 'block-123' },\n  include: {\n    author: {\n      select: {\n        id: true,\n        name: true,\n        email: true\n      }\n    },\n    topics: true,\n    questions: true\n  }\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"advanced-queries",children:"Advanced Queries"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Complex where conditions\nconst publishedBlocks = await prisma.block.findMany({\n  where: {\n    published: true,\n    author: {\n      mode: 'TEACHER'\n    },\n    createdAt: {\n      gte: new Date('2024-01-01')\n    }\n  },\n  include: {\n    author: true,\n    topics: true\n  },\n  orderBy: {\n    createdAt: 'desc'\n  },\n  take: 10\n});\n\n// Aggregation\nconst userStats = await prisma.user.aggregate({\n  where: { mode: 'STUDENT' },\n  _count: {\n    blocks: true,\n    folders: true\n  },\n  _sum: {\n    pointsUpdates: {\n      points: true\n    }\n  }\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-performance-optimization",children:"\ud83d\ude80 Performance Optimization"}),"\n",(0,s.jsx)(n.h3,{id:"indexing-strategy",children:"Indexing Strategy"}),"\n",(0,s.jsx)(n.h4,{id:"primary-indexes",children:"Primary Indexes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-prisma",children:"model User {\n  id    String @id @default(cuid())\n  email String @unique  // Automatic index\n  // ...\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"custom-indexes",children:"Custom Indexes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-prisma",children:"model Block {\n  id        String   @id @default(cuid())\n  title     String\n  authorId  String\n  published Boolean  @default(false)\n  createdAt DateTime @default(now())\n\n  // Custom indexes\n  @@index([authorId])\n  @@index([published, createdAt])\n  @@index([title])\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"composite-indexes",children:"Composite Indexes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-prisma",children:"model PointsUpdate {\n  id       String   @id @default(cuid())\n  points   Int\n  blockId  String?\n  userId   String?\n  createdAt DateTime @default(now())\n\n  // Composite index for efficient queries\n  @@index([userId, createdAt])\n  @@index([blockId, createdAt])\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"query-optimization",children:"Query Optimization"}),"\n",(0,s.jsx)(n.h4,{id:"select-only-needed-fields",children:"Select Only Needed Fields"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Efficient - only select needed fields\nconst userNames = await prisma.user.findMany({\n  select: {\n    id: true,\n    name: true\n  }\n});\n\n// Avoid selecting all fields unless needed\nconst allUserData = await prisma.user.findMany(); // Less efficient\n"})}),"\n",(0,s.jsx)(n.h4,{id:"use-pagination",children:"Use Pagination"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Paginated queries\nconst blocks = await prisma.block.findMany({\n  take: 20,\n  skip: 40, // Page 3 (20 * 2)\n  orderBy: {\n    createdAt: 'desc'\n  }\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"batch-operations",children:"Batch Operations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Batch create\nconst users = await prisma.user.createMany({\n  data: [\n    { email: 'user1@example.com', name: 'User 1' },\n    { email: 'user2@example.com', name: 'User 2' },\n    { email: 'user3@example.com', name: 'User 3' }\n  ]\n});\n\n// Batch update\nconst updatedBlocks = await prisma.block.updateMany({\n  where: { published: false },\n  data: { published: true }\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-data-integrity",children:"\ud83d\udd12 Data Integrity"}),"\n",(0,s.jsx)(n.h3,{id:"constraints",children:"Constraints"}),"\n",(0,s.jsx)(n.h4,{id:"unique-constraints",children:"Unique Constraints"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-prisma",children:"model User {\n  id    String @id @default(cuid())\n  email String @unique  // Ensures unique emails\n  // ...\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"required-fields",children:"Required Fields"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-prisma",children:"model Block {\n  id       String @id @default(cuid())\n  title    String  // Required field\n  content  String  // Required field\n  authorId String  // Required field\n  // ...\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"foreign-key-constraints",children:"Foreign Key Constraints"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-prisma",children:"model Block {\n  id       String @id @default(cuid())\n  authorId String\n  folderId String?\n\n  // Foreign key relationships\n  author User @relation(fields: [authorId], references: [id])\n  folder Folder? @relation(fields: [folderId], references: [id])\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"validation",children:"Validation"}),"\n",(0,s.jsx)(n.h4,{id:"field-validation",children:"Field Validation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-prisma",children:"model User {\n  id    String @id @default(cuid())\n  email String @unique @db.VarChar(255)\n  name  String? @db.VarChar(100)\n  // ...\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"custom-validation",children:"Custom Validation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// In your application code\nconst createUser = async (data: CreateUserData) => {\n  // Validate email format\n  if (!data.email.includes('@')) {\n    throw new Error('Invalid email format');\n  }\n\n  // Validate name length\n  if (data.name && data.name.length > 100) {\n    throw new Error('Name too long');\n  }\n\n  return await prisma.user.create({ data });\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-monitoring--debugging",children:"\ud83d\udd0d Monitoring & Debugging"}),"\n",(0,s.jsx)(n.h3,{id:"query-logging",children:"Query Logging"}),"\n",(0,s.jsx)(n.h4,{id:"enable-query-logging",children:"Enable Query Logging"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// In development\nconst prisma = new PrismaClient({\n  log: ['query', 'info', 'warn', 'error'],\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Measure query performance\nconst start = Date.now();\nconst users = await prisma.user.findMany();\nconst duration = Date.now() - start;\nconsole.log(`Query took ${duration}ms`);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsx)(n.h4,{id:"connection-issues",children:"Connection Issues"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Test database connection\nbunx prisma db pull\n\n# Check environment variables\necho $DATABASE_URL\n\n# Verify database is running\n# (Check your database service)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"migration-issues",children:"Migration Issues"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Check migration status\nbunx prisma migrate status\n\n# Reset if needed (development only)\nbunx prisma migrate reset\n\n# Force push schema (development only)\nbunx prisma db push --force-reset\n"})}),"\n",(0,s.jsx)(n.h4,{id:"type-issues",children:"Type Issues"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Regenerate Prisma client\nbunx prisma generate\n\n# Clear TypeScript cache\nrm -rf .next tsconfig.tsbuildinfo\nbunx tsc --noEmit\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-related-documentation",children:"\ud83d\udcda Related Documentation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"../prisma-abstraction/",children:"Prisma Abstraction Layer"})})," - Type-safe database operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./setup",children:"Development Setup"})})," - Database setup instructions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./scripts",children:"Available Scripts"})})," - Database-related scripts"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./troubleshooting",children:"Troubleshooting"})})," - Common database issues"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Master database operations to build robust applications!"})," \ud83d\uddc4\ufe0f"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>t});var a=i(6540);const s={},r=a.createContext(s);function l(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);