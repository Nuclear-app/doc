"use strict";(self.webpackChunknuclear_docs=self.webpackChunknuclear_docs||[]).push([[644],{2107:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"prisma-abstraction/README","title":"Prisma Abstraction Layer","description":"The Prisma abstraction layer provides a comprehensive, type-safe interface for all database operations in Nuclear. This layer abstracts away the complexity of direct Prisma queries while maintaining full type safety and providing additional utility functions.","source":"@site/docs/prisma-abstraction/README.md","sourceDirName":"prisma-abstraction","slug":"/prisma-abstraction/","permalink":"/docs/prisma-abstraction/","draft":false,"unlisted":false,"editUrl":"https://github.com/nuclear-app/doc/tree/main/docs/prisma-abstraction/README.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Welcome to Nuclear Documentation","permalink":"/docs/intro"},"next":{"title":"User Management","permalink":"/docs/prisma-abstraction/user"}}');var s=r(4848),t=r(8453);const a={sidebar_position:1},c="Prisma Abstraction Layer",l={},o=[{value:"Overview",id:"overview",level:2},{value:"\ud83d\udcc1 Core Modules",id:"-core-modules",level:3},{value:"Architecture Principles",id:"architecture-principles",level:2},{value:"\ud83d\udd12 Type Safety",id:"-type-safety",level:3},{value:"\ud83d\udee1\ufe0f Error Handling",id:"\ufe0f-error-handling",level:3},{value:"\u26a1 Performance",id:"-performance",level:3},{value:"\ud83d\udd0d Utility Functions",id:"-utility-functions",level:3},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Creating Records",id:"creating-records",level:3},{value:"Updating Records",id:"updating-records",level:3},{value:"Fetching Related Data",id:"fetching-related-data",level:3},{value:"Existence Checks",id:"existence-checks",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Always Handle Errors",id:"1-always-handle-errors",level:3},{value:"2. Use Type-Safe Functions",id:"2-use-type-safe-functions",level:3},{value:"3. Leverage Utility Functions",id:"3-leverage-utility-functions",level:3},{value:"4. Check Existence Before Operations",id:"4-check-existence-before-operations",level:3},{value:"Getting Started",id:"getting-started",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"prisma-abstraction-layer",children:"Prisma Abstraction Layer"})}),"\n",(0,s.jsx)(n.p,{children:"The Prisma abstraction layer provides a comprehensive, type-safe interface for all database operations in Nuclear. This layer abstracts away the complexity of direct Prisma queries while maintaining full type safety and providing additional utility functions."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Our Prisma abstraction is organized into focused modules, each handling a specific domain of your application:"}),"\n",(0,s.jsx)(n.h3,{id:"-core-modules",children:"\ud83d\udcc1 Core Modules"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Module"}),(0,s.jsx)(n.th,{children:"Purpose"}),(0,s.jsx)(n.th,{children:"Key Features"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./user",children:"User"})})}),(0,s.jsx)(n.td,{children:"User management and authentication"}),(0,s.jsx)(n.td,{children:"CRUD operations, email lookups, relationship queries"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./block",children:"Block"})})}),(0,s.jsx)(n.td,{children:"Content block management"}),(0,s.jsx)(n.td,{children:"Post creation, author relationships, folder organization"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./folder",children:"Folder"})})}),(0,s.jsx)(n.td,{children:"Hierarchical organization"}),(0,s.jsx)(n.td,{children:"Nested folder structure, parent-child relationships"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./quiz",children:"Quiz"})})}),(0,s.jsx)(n.td,{children:"Quiz system management"}),(0,s.jsx)(n.td,{children:"Quiz creation, topic associations, block relationships"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./question",children:"Question"})})}),(0,s.jsx)(n.td,{children:"Question management"}),(0,s.jsx)(n.td,{children:"Question CRUD, block associations"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./topic",children:"Topic"})})}),(0,s.jsx)(n.td,{children:"Topic organization"}),(0,s.jsx)(n.td,{children:"Topic management, examples, quiz associations"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./fill-in-the-blank",children:"Fill-in-the-Blank"})})}),(0,s.jsx)(n.td,{children:"Interactive content"}),(0,s.jsx)(n.td,{children:"Search utilities, random selection, hints"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./points-update",children:"Points Update"})})}),(0,s.jsx)(n.td,{children:"Points tracking system"}),(0,s.jsx)(n.td,{children:"Aggregation, date ranges, totals"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"architecture-principles",children:"Architecture Principles"}),"\n",(0,s.jsx)(n.h3,{id:"-type-safety",children:"\ud83d\udd12 Type Safety"}),"\n",(0,s.jsx)(n.p,{children:"All functions use Prisma-generated types, ensuring compile-time safety and excellent IDE support:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Full type safety with Prisma types\nconst user: User = await createUser({\n  email: 'user@example.com',\n  name: 'John Doe'\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"\ufe0f-error-handling",children:"\ud83d\udee1\ufe0f Error Handling"}),"\n",(0,s.jsx)(n.p,{children:"Each module defines custom error classes for consistent error management:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"try {\n  const user = await getUserById('invalid-id');\n} catch (error) {\n  if (error instanceof UserError) {\n    console.error('User operation failed:', error.message);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"-performance",children:"\u26a1 Performance"}),"\n",(0,s.jsx)(n.p,{children:"Optimized queries with proper indexing and relationship handling:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Efficient relationship queries\nconst userWithPosts = await getUserPosts(userId);\nconst blockWithAuthor = await getBlockAuthor(blockId);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"-utility-functions",children:"\ud83d\udd0d Utility Functions"}),"\n",(0,s.jsx)(n.p,{children:"Built-in utilities for common operations:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Search functionality\nconst searchResults = await searchTopicsByName('nuclear');\nconst randomQuiz = await getRandomTopicByBlock(blockId);\n\n// Aggregation\nconst totalPoints = await getTotalPointsForBlock(blockId);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"creating-records",children:"Creating Records"}),"\n",(0,s.jsx)(n.p,{children:"All creation functions validate input and return the created record:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const newUser = await createUser({\n  email: 'user@example.com',\n  name: 'John Doe',\n  mode: 'STUDENT'\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"updating-records",children:"Updating Records"}),"\n",(0,s.jsx)(n.p,{children:"Update functions accept partial data and return the updated record:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const updatedUser = await updateUser(userId, {\n  name: 'Jane Doe',\n  mode: 'TEACHER'\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"fetching-related-data",children:"Fetching Related Data"}),"\n",(0,s.jsx)(n.p,{children:"Each module provides functions to fetch related data:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Get all posts by a user\nconst userPosts = await getUserPosts(userId);\n\n// Get the author of a block\nconst blockAuthor = await getBlockAuthor(blockId);\n\n// Get all quizzes for a topic\nconst topicQuizzes = await getTopicQuizzes(topicId);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"existence-checks",children:"Existence Checks"}),"\n",(0,s.jsx)(n.p,{children:"Quick existence checks for validation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"if (await userExists(userId)) {\n  // User exists, proceed with operation\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.p,{children:"All functions throw custom errors that extend a base error class:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"class UserError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UserError';\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Common error scenarios:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Not Found"}),": When a record doesn't exist"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Validation"}),": When input data is invalid"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relationship"}),": When related records don't exist"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database"}),": When database operations fail"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-always-handle-errors",children:"1. Always Handle Errors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"try {\n  const user = await getUserById(id);\n  if (!user) {\n    throw new UserError('User not found');\n  }\n} catch (error) {\n  // Handle error appropriately\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-use-type-safe-functions",children:"2. Use Type-Safe Functions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good - Type-safe\nconst user = await getUserByEmail(email);\n\n// \u274c Avoid - Direct Prisma queries\nconst user = await prisma.user.findUnique({ where: { email } });\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-leverage-utility-functions",children:"3. Leverage Utility Functions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good - Use built-in utilities\nconst randomQuiz = await getRandomTopicByBlock(blockId);\n\n// \u274c Avoid - Manual random selection\nconst allTopics = await getAllTopics();\nconst randomTopic = allTopics[Math.floor(Math.random() * allTopics.length)];\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-check-existence-before-operations",children:"4. Check Existence Before Operations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good - Check existence first\nif (await userExists(userId)) {\n  await updateUser(userId, data);\n}\n\n// \u274c Avoid - Let it fail\nawait updateUser(userId, data); // Might throw error\n"})}),"\n",(0,s.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Choose a module"})," that matches your needs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Review the API reference"})," for available functions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Check the examples"})," for common use cases"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Understand error handling"})," patterns"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Explore utility functions"})," for advanced features"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Each module's documentation includes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Complete API reference"}),"\n",(0,s.jsx)(n.li,{children:"Code examples"}),"\n",(0,s.jsx)(n.li,{children:"Error handling patterns"}),"\n",(0,s.jsx)(n.li,{children:"Utility functions"}),"\n",(0,s.jsx)(n.li,{children:"Best practices"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:["Ready to explore? Start with any module that interests you, or follow the recommended order: ",(0,s.jsx)(n.a,{href:"./user",children:"User Management"})," \u2192 ",(0,s.jsx)(n.a,{href:"./block",children:"Block Management"})," \u2192 ",(0,s.jsx)(n.a,{href:"./folder",children:"Folder Organization"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>c});var i=r(6540);const s={},t=i.createContext(s);function a(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);