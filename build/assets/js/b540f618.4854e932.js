"use strict";(self.webpackChunknuclear_docs=self.webpackChunknuclear_docs||[]).push([[715],{4434:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"development/debugging","title":"Debugging Guide","description":"Complete guide to debugging the Nuclear application, including tools, techniques, and best practices for identifying and resolving issues.","source":"@site/docs/development/debugging.md","sourceDirName":"development","slug":"/development/debugging","permalink":"/docs/development/debugging","draft":false,"unlisted":false,"editUrl":"https://github.com/nuclear-app/doc/tree/main/docs/development/debugging.md","tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"sidebar_position":12},"sidebar":"tutorialSidebar","previous":{"title":"API Documentation","permalink":"/docs/development/api"},"next":{"title":"Deployment Guide","permalink":"/docs/development/deployment"}}');var o=r(4848),t=r(8453);const i={sidebar_position:12},a="Debugging Guide",l={},d=[{value:"\ud83d\udd0d Debugging Overview",id:"-debugging-overview",level:2},{value:"Debugging Philosophy",id:"debugging-philosophy",level:3},{value:"Common Debugging Scenarios",id:"common-debugging-scenarios",level:3},{value:"\ud83d\udee0\ufe0f Debugging Tools",id:"\ufe0f-debugging-tools",level:2},{value:"Browser Developer Tools",id:"browser-developer-tools",level:3},{value:"Chrome DevTools",id:"chrome-devtools",level:4},{value:"Console Debugging",id:"console-debugging",level:4},{value:"Breakpoint Debugging",id:"breakpoint-debugging",level:4},{value:"React Developer Tools",id:"react-developer-tools",level:3},{value:"Installation",id:"installation",level:4},{value:"Usage",id:"usage",level:4},{value:"Database Debugging",id:"database-debugging",level:3},{value:"Prisma Studio",id:"prisma-studio",level:4},{value:"Query Logging",id:"query-logging",level:4},{value:"Database Connection Testing",id:"database-connection-testing",level:4},{value:"\ud83d\udd27 Debugging Techniques",id:"-debugging-techniques",level:2},{value:"Error Tracking",id:"error-tracking",level:3},{value:"Error Boundaries",id:"error-boundaries",level:4},{value:"Global Error Handling",id:"global-error-handling",level:4},{value:"Performance Debugging",id:"performance-debugging",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:4},{value:"React Performance Profiling",id:"react-performance-profiling",level:4},{value:"Network Debugging",id:"network-debugging",level:3},{value:"API Request Monitoring",id:"api-request-monitoring",level:4},{value:"Network Tab Analysis",id:"network-tab-analysis",level:4},{value:"\ud83d\udc1b Common Issues &amp; Solutions",id:"-common-issues--solutions",level:2},{value:"TypeScript Errors",id:"typescript-errors",level:3},{value:"Type Errors",id:"type-errors",level:4},{value:"Import Errors",id:"import-errors",level:4},{value:"Database Issues",id:"database-issues",level:3},{value:"Connection Problems",id:"connection-problems",level:4},{value:"Query Issues",id:"query-issues",level:4},{value:"React Issues",id:"react-issues",level:3},{value:"State Management Problems",id:"state-management-problems",level:4},{value:"Re-rendering Issues",id:"re-rendering-issues",level:4},{value:"\ud83d\udd0d Advanced Debugging",id:"-advanced-debugging",level:2},{value:"Custom Debugging Hooks",id:"custom-debugging-hooks",level:3},{value:"useDebug Hook",id:"usedebug-hook",level:4},{value:"usePerformance Hook",id:"useperformance-hook",level:4},{value:"Debugging Utilities",id:"debugging-utilities",level:3},{value:"Debug Logger",id:"debug-logger",level:4},{value:"Debug Context",id:"debug-context",level:4},{value:"\ud83d\udcca Debugging Workflow",id:"-debugging-workflow",level:2},{value:"Systematic Debugging Process",id:"systematic-debugging-process",level:3},{value:"1. <strong>Reproduce the Issue</strong>",id:"1-reproduce-the-issue",level:4},{value:"2. <strong>Identify the Root Cause</strong>",id:"2-identify-the-root-cause",level:4},{value:"3. <strong>Implement the Fix</strong>",id:"3-implement-the-fix",level:4},{value:"4. <strong>Verify the Fix</strong>",id:"4-verify-the-fix",level:4},{value:"\ud83d\udcda Related Documentation",id:"-related-documentation",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"debugging-guide",children:"Debugging Guide"})}),"\n",(0,o.jsx)(n.p,{children:"Complete guide to debugging the Nuclear application, including tools, techniques, and best practices for identifying and resolving issues."}),"\n",(0,o.jsx)(n.h2,{id:"-debugging-overview",children:"\ud83d\udd0d Debugging Overview"}),"\n",(0,o.jsx)(n.h3,{id:"debugging-philosophy",children:"Debugging Philosophy"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Systematic Approach"})," - Follow a structured debugging process"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Evidence-Based"})," - Use data and logs to identify root causes"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Reproducible"})," - Create minimal test cases to reproduce issues"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Documentation"})," - Document findings and solutions"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"common-debugging-scenarios",children:"Common Debugging Scenarios"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Runtime Errors"})," - JavaScript exceptions and crashes"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Database Issues"})," - Query problems and connection errors"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Performance Problems"})," - Slow operations and bottlenecks"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"UI/UX Issues"})," - Rendering problems and user experience issues"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Authentication Problems"})," - Login and session issues"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"\ufe0f-debugging-tools",children:"\ud83d\udee0\ufe0f Debugging Tools"}),"\n",(0,o.jsx)(n.h3,{id:"browser-developer-tools",children:"Browser Developer Tools"}),"\n",(0,o.jsx)(n.h4,{id:"chrome-devtools",children:"Chrome DevTools"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Open DevTools\nF12 or Ctrl+Shift+I (Windows/Linux)\nCmd+Option+I (macOS)\n\n# Key panels for debugging:\n# - Console: JavaScript errors and logs\n# - Sources: Breakpoint debugging\n# - Network: API calls and requests\n# - Application: Storage and session data\n# - Performance: Performance profiling\n"})}),"\n",(0,o.jsx)(n.h4,{id:"console-debugging",children:"Console Debugging"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Basic logging\nconsole.log('User data:', user);\nconsole.error('Error occurred:', error);\nconsole.warn('Warning message');\n\n// Structured logging\nconsole.table(users);\nconsole.group('User Operations');\nconsole.log('Creating user...');\nconsole.log('User created successfully');\nconsole.groupEnd();\n\n// Performance timing\nconsole.time('userCreation');\nawait createUser(userData);\nconsole.timeEnd('userCreation');\n"})}),"\n",(0,o.jsx)(n.h4,{id:"breakpoint-debugging",children:"Breakpoint Debugging"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Set breakpoints in code\nfunction createUser(data: CreateUserData) {\n  debugger; // Browser will pause here\n  console.log('Creating user with data:', data);\n  \n  // Step through code line by line\n  const validatedData = validateUserData(data);\n  const user = await prisma.user.create({ data: validatedData });\n  \n  return user;\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"react-developer-tools",children:"React Developer Tools"}),"\n",(0,o.jsx)(n.h4,{id:"installation",children:"Installation"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Chrome Extension\n# Search for "React Developer Tools" in Chrome Web Store\n\n# Firefox Extension\n# Search for "React Developer Tools" in Firefox Add-ons\n'})}),"\n",(0,o.jsx)(n.h4,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Component inspection\n// - View component tree\n// - Inspect props and state\n// - Monitor re-renders\n// - Profile performance\n\n// Example component with debugging\nfunction UserProfile({ user }: { user: User }) {\n  // Monitor component renders\n  console.log('UserProfile rendered with user:', user);\n  \n  return (\n    <div>\n      <h1>{user.name}</h1>\n      <p>{user.email}</p>\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"database-debugging",children:"Database Debugging"}),"\n",(0,o.jsx)(n.h4,{id:"prisma-studio",children:"Prisma Studio"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Open database browser\nbunx prisma studio\n\n# Features:\n# - View all tables and data\n# - Edit data directly\n# - Execute custom queries\n# - Monitor relationships\n"})}),"\n",(0,o.jsx)(n.h4,{id:"query-logging",children:"Query Logging"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Enable query logging in development\nconst prisma = new PrismaClient({\n  log: ['query', 'info', 'warn', 'error'],\n});\n\n// Monitor specific queries\nconst start = Date.now();\nconst users = await prisma.user.findMany({\n  include: { blocks: true, folders: true }\n});\nconst duration = Date.now() - start;\nconsole.log(`Query took ${duration}ms`);\n"})}),"\n",(0,o.jsx)(n.h4,{id:"database-connection-testing",children:"Database Connection Testing"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Test database connection\nbunx prisma db pull\n\n# Check migration status\nbunx prisma migrate status\n\n# Validate schema\nbunx prisma validate\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-debugging-techniques",children:"\ud83d\udd27 Debugging Techniques"}),"\n",(0,o.jsx)(n.h3,{id:"error-tracking",children:"Error Tracking"}),"\n",(0,o.jsx)(n.h4,{id:"error-boundaries",children:"Error Boundaries"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'// components/ErrorBoundary.tsx\nimport React from \'react\';\n\nclass ErrorBoundary extends React.Component<\n  { children: React.ReactNode },\n  { hasError: boolean; error?: Error }\n> {\n  constructor(props: { children: React.ReactNode }) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error(\'Error caught by boundary:\', error, errorInfo);\n    \n    // Log to external service\n    // logErrorToService(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className="p-4 bg-red-50 border border-red-200 rounded-lg">\n          <h2 className="text-red-800 font-semibold">Something went wrong</h2>\n          <p className="text-red-600 mt-2">\n            {this.state.error?.message || \'An error occurred\'}\n          </p>\n          <button\n            onClick={() => this.setState({ hasError: false })}\n            className="mt-4 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"\n          >\n            Try again\n          </button>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n'})}),"\n",(0,o.jsx)(n.h4,{id:"global-error-handling",children:"Global Error Handling"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// lib/error-handler.ts\nexport function setupGlobalErrorHandling() {\n  // Handle unhandled promise rejections\n  window.addEventListener('unhandledrejection', (event) => {\n    console.error('Unhandled promise rejection:', event.reason);\n    // Log to external service\n  });\n\n  // Handle JavaScript errors\n  window.addEventListener('error', (event) => {\n    console.error('JavaScript error:', event.error);\n    // Log to external service\n  });\n}\n\n// Usage in app\nsetupGlobalErrorHandling();\n"})}),"\n",(0,o.jsx)(n.h3,{id:"performance-debugging",children:"Performance Debugging"}),"\n",(0,o.jsx)(n.h4,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// lib/performance.ts\nexport function measurePerformance<T>(\n  name: string,\n  fn: () => T | Promise<T>\n): T | Promise<T> {\n  const start = performance.now();\n  \n  const result = fn();\n  \n  if (result instanceof Promise) {\n    return result.finally(() => {\n      const end = performance.now();\n      console.log(`Performance: ${name} took ${end - start}ms`);\n    });\n  } else {\n    const end = performance.now();\n    console.log(`Performance: ${name} took ${end - start}ms`);\n    return result;\n  }\n}\n\n// Usage\nconst users = await measurePerformance('Fetch users', () => \n  prisma.user.findMany()\n);\n"})}),"\n",(0,o.jsx)(n.h4,{id:"react-performance-profiling",children:"React Performance Profiling"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// components/UserList.tsx\nimport { Profiler } from 'react';\n\nfunction UserList({ users }: { users: User[] }) {\n  const onRenderCallback = (\n    id: string,\n    phase: string,\n    actualDuration: number\n  ) => {\n    if (actualDuration > 16) { // Longer than one frame\n      console.warn(`Slow render detected: ${id} took ${actualDuration}ms`);\n    }\n  };\n\n  return (\n    <Profiler id=\"UserList\" onRender={onRenderCallback}>\n      <div>\n        {users.map(user => (\n          <UserCard key={user.id} user={user} />\n        ))}\n      </div>\n    </Profiler>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"network-debugging",children:"Network Debugging"}),"\n",(0,o.jsx)(n.h4,{id:"api-request-monitoring",children:"API Request Monitoring"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// lib/api-monitor.ts\nexport function monitorApiRequests() {\n  const originalFetch = window.fetch;\n  \n  window.fetch = async (...args) => {\n    const start = Date.now();\n    const [url, options] = args;\n    \n    try {\n      const response = await originalFetch(...args);\n      const duration = Date.now() - start;\n      \n      console.log(`API Request: ${url}`, {\n        method: options?.method || 'GET',\n        status: response.status,\n        duration: `${duration}ms`,\n      });\n      \n      return response;\n    } catch (error) {\n      const duration = Date.now() - start;\n      console.error(`API Error: ${url}`, {\n        method: options?.method || 'GET',\n        error: error.message,\n        duration: `${duration}ms`,\n      });\n      throw error;\n    }\n  };\n}\n\n// Usage\nmonitorApiRequests();\n"})}),"\n",(0,o.jsx)(n.h4,{id:"network-tab-analysis",children:"Network Tab Analysis"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Monitor specific requests\nfetch('/api/users', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify(userData)\n})\n.then(response => {\n  console.log('Response status:', response.status);\n  console.log('Response headers:', response.headers);\n  return response.json();\n})\n.then(data => {\n  console.log('Response data:', data);\n})\n.catch(error => {\n  console.error('Request failed:', error);\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-common-issues--solutions",children:"\ud83d\udc1b Common Issues & Solutions"}),"\n",(0,o.jsx)(n.h3,{id:"typescript-errors",children:"TypeScript Errors"}),"\n",(0,o.jsx)(n.h4,{id:"type-errors",children:"Type Errors"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Problem: Type mismatch\nconst user: User = {\n  id: '123',\n  email: 'user@example.com',\n  // Missing required fields\n};\n\n// Solution: Add missing fields or use partial type\nconst user: Partial<User> = {\n  id: '123',\n  email: 'user@example.com',\n};\n\n// Or fix the type definition\ninterface User {\n  id: string;\n  email: string;\n  name?: string; // Make optional\n}\n"})}),"\n",(0,o.jsx)(n.h4,{id:"import-errors",children:"Import Errors"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Problem: Module not found\nimport { createUser } from '@/lib/user';\n\n// Solution: Check file path and exports\n// lib/user.ts\nexport { createUser } from './user/operations';\n\n// Or use relative imports\nimport { createUser } from '../lib/user';\n"})}),"\n",(0,o.jsx)(n.h3,{id:"database-issues",children:"Database Issues"}),"\n",(0,o.jsx)(n.h4,{id:"connection-problems",children:"Connection Problems"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Problem: Database connection failed\n# Solution: Check environment variables\necho $DATABASE_URL\n\n# Test connection\nbunx prisma db pull\n\n# Check if database is running\n# For local PostgreSQL:\nbrew services list | grep postgresql  # macOS\nsudo systemctl status postgresql      # Linux\n"})}),"\n",(0,o.jsx)(n.h4,{id:"query-issues",children:"Query Issues"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Problem: Slow queries\nconst users = await prisma.user.findMany({\n  include: { blocks: true, folders: true }\n});\n\n// Solution: Optimize query\nconst users = await prisma.user.findMany({\n  select: {\n    id: true,\n    name: true,\n    email: true,\n    blocks: {\n      select: {\n        id: true,\n        title: true,\n        createdAt: true\n      },\n      take: 10, // Limit results\n      orderBy: { createdAt: 'desc' }\n    }\n  }\n});\n"})}),"\n",(0,o.jsx)(n.h3,{id:"react-issues",children:"React Issues"}),"\n",(0,o.jsx)(n.h4,{id:"state-management-problems",children:"State Management Problems"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Problem: State not updating\nconst [users, setUsers] = useState<User[]>([]);\n\nconst addUser = (user: User) => {\n  setUsers([...users, user]); // This might not work as expected\n};\n\n// Solution: Use functional update\nconst addUser = (user: User) => {\n  setUsers(prevUsers => [...prevUsers, user]);\n};\n\n// Or use useCallback for stability\nconst addUser = useCallback((user: User) => {\n  setUsers(prevUsers => [...prevUsers, user]);\n}, []);\n"})}),"\n",(0,o.jsx)(n.h4,{id:"re-rendering-issues",children:"Re-rendering Issues"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Problem: Excessive re-renders\nfunction UserList({ users }: { users: User[] }) {\n  return (\n    <div>\n      {users.map(user => (\n        <UserCard key={user.id} user={user} />\n      ))}\n    </div>\n  );\n}\n\n// Solution: Memoize components\nconst UserCard = React.memo(({ user }: { user: User }) => {\n  return (\n    <div>\n      <h3>{user.name}</h3>\n      <p>{user.email}</p>\n    </div>\n  );\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-advanced-debugging",children:"\ud83d\udd0d Advanced Debugging"}),"\n",(0,o.jsx)(n.h3,{id:"custom-debugging-hooks",children:"Custom Debugging Hooks"}),"\n",(0,o.jsx)(n.h4,{id:"usedebug-hook",children:"useDebug Hook"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// hooks/useDebug.ts\nimport { useEffect, useRef } from 'react';\n\nexport function useDebug(componentName: string, props: any) {\n  const renderCount = useRef(0);\n  \n  useEffect(() => {\n    renderCount.current += 1;\n    console.log(`${componentName} rendered ${renderCount.current} times`);\n  });\n\n  useEffect(() => {\n    console.log(`${componentName} props changed:`, props);\n  }, [componentName, props]);\n}\n\n// Usage\nfunction MyComponent(props: any) {\n  useDebug('MyComponent', props);\n  return <div>Component content</div>;\n}\n"})}),"\n",(0,o.jsx)(n.h4,{id:"useperformance-hook",children:"usePerformance Hook"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// hooks/usePerformance.ts\nimport { useEffect, useRef } from 'react';\n\nexport function usePerformance(componentName: string) {\n  const renderStart = useRef(performance.now());\n  \n  useEffect(() => {\n    const renderTime = performance.now() - renderStart.current;\n    \n    if (renderTime > 16) { // Longer than one frame\n      console.warn(`${componentName} took ${renderTime}ms to render`);\n    }\n    \n    renderStart.current = performance.now();\n  });\n}\n\n// Usage\nfunction ExpensiveComponent() {\n  usePerformance('ExpensiveComponent');\n  return <div>Expensive content</div>;\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"debugging-utilities",children:"Debugging Utilities"}),"\n",(0,o.jsx)(n.h4,{id:"debug-logger",children:"Debug Logger"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// lib/debug-logger.ts\nclass DebugLogger {\n  private isEnabled = process.env.NODE_ENV === 'development';\n  \n  log(level: 'info' | 'warn' | 'error', message: string, data?: any) {\n    if (!this.isEnabled) return;\n    \n    const timestamp = new Date().toISOString();\n    const logData = {\n      timestamp,\n      level,\n      message,\n      data,\n    };\n    \n    switch (level) {\n      case 'info':\n        console.log(`[${timestamp}] INFO: ${message}`, data);\n        break;\n      case 'warn':\n        console.warn(`[${timestamp}] WARN: ${message}`, data);\n        break;\n      case 'error':\n        console.error(`[${timestamp}] ERROR: ${message}`, data);\n        break;\n    }\n  }\n  \n  info(message: string, data?: any) {\n    this.log('info', message, data);\n  }\n  \n  warn(message: string, data?: any) {\n    this.log('warn', message, data);\n  }\n  \n  error(message: string, data?: any) {\n    this.log('error', message, data);\n  }\n}\n\nexport const debugLogger = new DebugLogger();\n"})}),"\n",(0,o.jsx)(n.h4,{id:"debug-context",children:"Debug Context"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// lib/debug-context.ts\nimport { createContext, useContext } from 'react';\n\ninterface DebugContextType {\n  isDebugMode: boolean;\n  logDebug: (message: string, data?: any) => void;\n}\n\nconst DebugContext = createContext<DebugContextType | undefined>(undefined);\n\nexport function DebugProvider({ children }: { children: React.ReactNode }) {\n  const isDebugMode = process.env.NODE_ENV === 'development';\n  \n  const logDebug = (message: string, data?: any) => {\n    if (isDebugMode) {\n      console.log(`[DEBUG] ${message}`, data);\n    }\n  };\n  \n  return (\n    <DebugContext.Provider value={{ isDebugMode, logDebug }}>\n      {children}\n    </DebugContext.Provider>\n  );\n}\n\nexport function useDebug() {\n  const context = useContext(DebugContext);\n  if (!context) {\n    throw new Error('useDebug must be used within DebugProvider');\n  }\n  return context;\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-debugging-workflow",children:"\ud83d\udcca Debugging Workflow"}),"\n",(0,o.jsx)(n.h3,{id:"systematic-debugging-process",children:"Systematic Debugging Process"}),"\n",(0,o.jsxs)(n.h4,{id:"1-reproduce-the-issue",children:["1. ",(0,o.jsx)(n.strong,{children:"Reproduce the Issue"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Create minimal test case\nconst testCase = {\n  input: { email: 'test@example.com', name: 'Test User' },\n  expectedOutput: { id: '123', email: 'test@example.com', name: 'Test User' },\n  actualOutput: null,\n  error: null\n};\n\n// Test the function\ntry {\n  testCase.actualOutput = await createUser(testCase.input);\n} catch (error) {\n  testCase.error = error;\n}\n\nconsole.log('Test case result:', testCase);\n"})}),"\n",(0,o.jsxs)(n.h4,{id:"2-identify-the-root-cause",children:["2. ",(0,o.jsx)(n.strong,{children:"Identify the Root Cause"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Add debugging points\nfunction createUser(data: CreateUserData) {\n  console.log('1. Input data:', data);\n  \n  const validatedData = validateUserData(data);\n  console.log('2. Validated data:', validatedData);\n  \n  const user = await prisma.user.create({ data: validatedData });\n  console.log('3. Created user:', user);\n  \n  return user;\n}\n"})}),"\n",(0,o.jsxs)(n.h4,{id:"3-implement-the-fix",children:["3. ",(0,o.jsx)(n.strong,{children:"Implement the Fix"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Fix the issue\nfunction createUser(data: CreateUserData) {\n  // Add proper validation\n  if (!data.email || !data.email.includes('@')) {\n    throw new Error('Invalid email format');\n  }\n  \n  // Add error handling\n  try {\n    return await prisma.user.create({ data });\n  } catch (error) {\n    console.error('Failed to create user:', error);\n    throw new Error('User creation failed');\n  }\n}\n"})}),"\n",(0,o.jsxs)(n.h4,{id:"4-verify-the-fix",children:["4. ",(0,o.jsx)(n.strong,{children:"Verify the Fix"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Test the fix\nconst testCases = [\n  { email: 'valid@example.com', name: 'Valid User' },\n  { email: 'invalid-email', name: 'Invalid User' },\n  { email: '', name: 'Empty Email' }\n];\n\nfor (const testCase of testCases) {\n  try {\n    const result = await createUser(testCase);\n    console.log('\u2705 Success:', result);\n  } catch (error) {\n    console.log('\u274c Expected error:', error.message);\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-related-documentation",children:"\ud83d\udcda Related Documentation"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"./troubleshooting",children:"Troubleshooting"})})," - Common issues and solutions"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"./workflow",children:"Development Workflow"})})," - Debugging in daily workflow"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"./workflow#performance-considerations",children:"Performance Optimization"})})," - Performance debugging"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"./workflow#testing-strategy",children:"Testing Strategy"})})," - Debugging with tests"]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Master debugging techniques to become a more effective developer!"})," \ud83d\udd27"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var s=r(6540);const o={},t=s.createContext(o);function i(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);