"use strict";(self.webpackChunknuclear_docs=self.webpackChunknuclear_docs||[]).push([[142],{1049:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"prisma-abstraction/question","title":"Question Management","description":"The Question module provides comprehensive type-safe CRUD operations and utility functions for managing questions in the Nuclear application. This module handles question creation, updates, deletion, and relationship queries with blocks.","source":"@site/docs/prisma-abstraction/question.md","sourceDirName":"prisma-abstraction","slug":"/prisma-abstraction/question","permalink":"/docs/prisma-abstraction/question","draft":false,"unlisted":false,"editUrl":"https://github.com/nuclear-app/doc/tree/main/docs/prisma-abstraction/question.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Quiz System","permalink":"/docs/prisma-abstraction/quiz"},"next":{"title":"Topic Management","permalink":"/docs/prisma-abstraction/topic"}}');var s=t(4848),o=t(8453);const r={sidebar_position:6},a="Question Management",l={},c=[{value:"Overview",id:"overview",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"Core CRUD Functions",id:"core-crud-functions",level:3},{value:"<code>getQuestionById(id: string): Promise&lt;Question | null&gt;</code>",id:"getquestionbyidid-string-promisequestion--null",level:4},{value:"<code>getAllQuestions(): Promise&lt;Question[]&gt;</code>",id:"getallquestions-promisequestion",level:4},{value:"<code>createQuestion(data: CreateQuestionData): Promise&lt;Question&gt;</code>",id:"createquestiondata-createquestiondata-promisequestion",level:4},{value:"<code>updateQuestion(id: string, data: Partial&lt;Question&gt;): Promise&lt;Question&gt;</code>",id:"updatequestionid-string-data-partialquestion-promisequestion",level:4},{value:"<code>deleteQuestion(id: string): Promise&lt;Question&gt;</code>",id:"deletequestionid-string-promisequestion",level:4},{value:"Utility Functions",id:"utility-functions",level:3},{value:"<code>questionExists(id: string): Promise&lt;boolean&gt;</code>",id:"questionexistsid-string-promiseboolean",level:4},{value:"Relationship Queries",id:"relationship-queries",level:3},{value:"<code>getQuestionBlock(id: string): Promise&lt;Block | null&gt;</code>",id:"getquestionblockid-string-promiseblock--null",level:4},{value:"Filtering and Search Functions",id:"filtering-and-search-functions",level:3},{value:"<code>getQuestionsByBlock(blockId: string): Promise&lt;Question[]&gt;</code>",id:"getquestionsbyblockblockid-string-promisequestion",level:4},{value:"Data Types",id:"data-types",level:2},{value:"Question Model",id:"question-model",level:3},{value:"CreateQuestionData",id:"createquestiondata",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Common Error Scenarios",id:"common-error-scenarios",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Complete Question Management Workflow",id:"complete-question-management-workflow",level:3},{value:"Question Bank Creation",id:"question-bank-creation",level:3},{value:"Block Question Analysis",id:"block-question-analysis",level:3},{value:"Difficulty-Based Question Management",id:"difficulty-based-question-management",level:3},{value:"Question Type Management",id:"question-type-management",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Validate Question Content",id:"1-validate-question-content",level:3},{value:"2. Handle Relationships Properly",id:"2-handle-relationships-properly",level:3},{value:"3. Use Efficient Queries",id:"3-use-efficient-queries",level:3},{value:"4. Implement Question Validation",id:"4-implement-question-validation",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Related Modules",id:"related-modules",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"question-management",children:"Question Management"})}),"\n",(0,s.jsx)(n.p,{children:"The Question module provides comprehensive type-safe CRUD operations and utility functions for managing questions in the Nuclear application. This module handles question creation, updates, deletion, and relationship queries with blocks."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The Question module is located in ",(0,s.jsx)(n.code,{children:"lib/question.ts"})," and provides functions for:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CRUD Operations"}),": Create, read, update, and delete questions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Block Associations"}),": Link questions to specific content blocks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Question Management"}),": Handle question content and metadata"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Validation"}),": Input validation and existence checks"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,s.jsx)(n.h3,{id:"core-crud-functions",children:"Core CRUD Functions"}),"\n",(0,s.jsx)(n.h4,{id:"getquestionbyidid-string-promisequestion--null",children:(0,s.jsx)(n.code,{children:"getQuestionById(id: string): Promise<Question | null>"})}),"\n",(0,s.jsx)(n.p,{children:"Get a question by its unique ID."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const question = await getQuestionById('question-123');\nif (question) {\n  console.log(`Found question: ${question.text}`);\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"getallquestions-promisequestion",children:(0,s.jsx)(n.code,{children:"getAllQuestions(): Promise<Question[]>"})}),"\n",(0,s.jsx)(n.p,{children:"Get all questions in the system."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const allQuestions = await getAllQuestions();\nconsole.log(`Total questions: ${allQuestions.length}`);\n"})}),"\n",(0,s.jsx)(n.h4,{id:"createquestiondata-createquestiondata-promisequestion",children:(0,s.jsx)(n.code,{children:"createQuestion(data: CreateQuestionData): Promise<Question>"})}),"\n",(0,s.jsx)(n.p,{children:"Create a new question with validated input data."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data.text"})," (required): Question text/content"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data.blockId"})," (optional): ID of the associated block"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data.type"})," (optional): Question type (e.g., 'MULTIPLE_CHOICE', 'TRUE_FALSE', 'SHORT_ANSWER')"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data.difficulty"})," (optional): Question difficulty level"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data.points"})," (optional): Points awarded for correct answer"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const newQuestion = await createQuestion({\n  text: 'What is nuclear fusion?',\n  blockId: 'block-123',\n  type: 'MULTIPLE_CHOICE',\n  difficulty: 'MEDIUM',\n  points: 5\n});\n\nconsole.log(`Created question: ${newQuestion.id}`);\n"})}),"\n",(0,s.jsx)(n.h4,{id:"updatequestionid-string-data-partialquestion-promisequestion",children:(0,s.jsx)(n.code,{children:"updateQuestion(id: string, data: Partial<Question>): Promise<Question>"})}),"\n",(0,s.jsx)(n.p,{children:"Update an existing question's information."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const updatedQuestion = await updateQuestion('question-123', {\n  text: 'What is the process of nuclear fusion?',\n  difficulty: 'HARD',\n  points: 10\n});\n\nconsole.log(`Updated question: ${updatedQuestion.text}`);\n"})}),"\n",(0,s.jsx)(n.h4,{id:"deletequestionid-string-promisequestion",children:(0,s.jsx)(n.code,{children:"deleteQuestion(id: string): Promise<Question>"})}),"\n",(0,s.jsx)(n.p,{children:"Delete a question by its ID."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const deletedQuestion = await deleteQuestion('question-123');\nconsole.log(`Deleted question: ${deletedQuestion.text}`);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,s.jsx)(n.h4,{id:"questionexistsid-string-promiseboolean",children:(0,s.jsx)(n.code,{children:"questionExists(id: string): Promise<boolean>"})}),"\n",(0,s.jsx)(n.p,{children:"Check if a question exists by its ID."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"if (await questionExists('question-123')) {\n  console.log('Question exists');\n} else {\n  console.log('Question not found');\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"relationship-queries",children:"Relationship Queries"}),"\n",(0,s.jsx)(n.h4,{id:"getquestionblockid-string-promiseblock--null",children:(0,s.jsx)(n.code,{children:"getQuestionBlock(id: string): Promise<Block | null>"})}),"\n",(0,s.jsx)(n.p,{children:"Get the block associated with a question."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const block = await getQuestionBlock('question-123');\nif (block) {\n  console.log(`Question block: ${block.title}`);\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"filtering-and-search-functions",children:"Filtering and Search Functions"}),"\n",(0,s.jsx)(n.h4,{id:"getquestionsbyblockblockid-string-promisequestion",children:(0,s.jsx)(n.code,{children:"getQuestionsByBlock(blockId: string): Promise<Question[]>"})}),"\n",(0,s.jsx)(n.p,{children:"Get all questions for a specific block."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const blockQuestions = await getQuestionsByBlock('block-123');\nconsole.log(`Block has ${blockQuestions.length} questions`);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"data-types",children:"Data Types"}),"\n",(0,s.jsx)(n.h3,{id:"question-model",children:"Question Model"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface Question {\n  id: string;\n  text: string;\n  blockId?: string;\n  type?: string;\n  difficulty?: 'EASY' | 'MEDIUM' | 'HARD';\n  points?: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"createquestiondata",children:"CreateQuestionData"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface CreateQuestionData {\n  text: string;\n  blockId?: string;\n  type?: string;\n  difficulty?: 'EASY' | 'MEDIUM' | 'HARD';\n  points?: number;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.p,{children:"The Question module defines a custom error class for consistent error handling:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"class QuestionError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'QuestionError';\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"common-error-scenarios",children:"Common Error Scenarios"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Question Not Found"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"try {\n  const question = await getQuestionById('non-existent-id');\n  if (!question) {\n    throw new QuestionError('Question not found');\n  }\n} catch (error) {\n  if (error instanceof QuestionError) {\n    console.error('Question error:', error.message);\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Invalid Block Association"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"try {\n  const question = await createQuestion({\n    text: 'Test question',\n    blockId: 'non-existent-block'\n  });\n} catch (error) {\n  if (error instanceof QuestionError) {\n    console.error('Block validation error:', error.message);\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Invalid Question Text"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"try {\n  const question = await createQuestion({\n    text: '', // Empty question text\n    blockId: 'block-123'\n  });\n} catch (error) {\n  if (error instanceof QuestionError) {\n    console.error('Validation error:', error.message);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,s.jsx)(n.h3,{id:"complete-question-management-workflow",children:"Complete Question Management Workflow"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"async function manageQuestion() {\n  try {\n    // Create a new question\n    const newQuestion = await createQuestion({\n      text: 'What are the main components of an atomic nucleus?',\n      blockId: 'block-123',\n      type: 'MULTIPLE_CHOICE',\n      difficulty: 'MEDIUM',\n      points: 5\n    });\n\n    // Update question content\n    const updatedQuestion = await updateQuestion(newQuestion.id, {\n      text: 'What are the fundamental components of an atomic nucleus?',\n      difficulty: 'HARD',\n      points: 8\n    });\n\n    // Get question relationships\n    const block = await getQuestionBlock(updatedQuestion.id);\n\n    console.log(`Question: \"${updatedQuestion.text}\"`);\n    console.log(`Block: ${block?.title}, Difficulty: ${updatedQuestion.difficulty}, Points: ${updatedQuestion.points}`);\n\n    // Check if question exists before operations\n    if (await questionExists(updatedQuestion.id)) {\n      const question = await getQuestionById(updatedQuestion.id);\n      console.log(`Question created: ${question?.createdAt}`);\n    }\n\n  } catch (error) {\n    if (error instanceof QuestionError) {\n      console.error('Question management error:', error.message);\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"question-bank-creation",children:"Question Bank Creation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"async function createQuestionBank() {\n  try {\n    // Define question bank structure\n    const questionBank = [\n      {\n        text: 'What is the atomic number of hydrogen?',\n        type: 'MULTIPLE_CHOICE',\n        difficulty: 'EASY',\n        points: 2\n      },\n      {\n        text: 'Explain the difference between nuclear fusion and fission.',\n        type: 'SHORT_ANSWER',\n        difficulty: 'MEDIUM',\n        points: 5\n      },\n      {\n        text: 'What is the binding energy of a nucleus?',\n        type: 'MULTIPLE_CHOICE',\n        difficulty: 'HARD',\n        points: 8\n      },\n      {\n        text: 'True or False: Nuclear fusion releases more energy than nuclear fission.',\n        type: 'TRUE_FALSE',\n        difficulty: 'MEDIUM',\n        points: 3\n      },\n      {\n        text: 'Calculate the mass defect for a helium nucleus.',\n        type: 'CALCULATION',\n        difficulty: 'HARD',\n        points: 10\n      }\n    ];\n\n    const createdQuestions = [];\n    for (const questionData of questionBank) {\n      const question = await createQuestion({\n        ...questionData,\n        blockId: 'block-123' // Associate with a specific block\n      });\n      createdQuestions.push(question);\n      console.log(`Created question: ${question.text.substring(0, 50)}...`);\n    }\n\n    console.log(`Created ${createdQuestions.length} questions for the question bank`);\n\n  } catch (error) {\n    if (error instanceof QuestionError) {\n      console.error('Question bank creation error:', error.message);\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"block-question-analysis",children:"Block Question Analysis"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"async function analyzeBlockQuestions(blockId: string) {\n  try {\n    // Get all questions for the block\n    const questions = await getQuestionsByBlock(blockId);\n    \n    // Analyze question distribution\n    const analysis = {\n      totalQuestions: questions.length,\n      questionsByType: {},\n      questionsByDifficulty: {\n        EASY: 0,\n        MEDIUM: 0,\n        HARD: 0\n      },\n      totalPoints: 0,\n      averagePoints: 0\n    };\n\n    // Calculate statistics\n    for (const question of questions) {\n      // Count by type\n      const type = question.type || 'UNKNOWN';\n      analysis.questionsByType[type] = (analysis.questionsByType[type] || 0) + 1;\n\n      // Count by difficulty\n      if (question.difficulty) {\n        analysis.questionsByDifficulty[question.difficulty]++;\n      }\n\n      // Sum points\n      if (question.points) {\n        analysis.totalPoints += question.points;\n      }\n    }\n\n    // Calculate average points\n    if (questions.length > 0) {\n      analysis.averagePoints = analysis.totalPoints / questions.length;\n    }\n\n    console.log('Block Question Analysis:', analysis);\n    return analysis;\n\n  } catch (error) {\n    if (error instanceof QuestionError) {\n      console.error('Analysis error:', error.message);\n    }\n    throw error;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"difficulty-based-question-management",children:"Difficulty-Based Question Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"async function manageDifficultyLevels(blockId: string) {\n  try {\n    // Get all questions for the block\n    const questions = await getQuestionsByBlock(blockId);\n    \n    // Group questions by difficulty\n    const easyQuestions = questions.filter(q => q.difficulty === 'EASY');\n    const mediumQuestions = questions.filter(q => q.difficulty === 'MEDIUM');\n    const hardQuestions = questions.filter(q => q.difficulty === 'HARD');\n\n    console.log(`Difficulty breakdown: Easy: ${easyQuestions.length}, Medium: ${mediumQuestions.length}, Hard: ${hardQuestions.length}`);\n\n    // Create additional questions if needed for balanced difficulty\n    if (easyQuestions.length < 3) {\n      const easyQuestion = await createQuestion({\n        text: 'What is the basic structure of an atom?',\n        blockId: blockId,\n        type: 'MULTIPLE_CHOICE',\n        difficulty: 'EASY',\n        points: 2\n      });\n      console.log(`Created easy question: ${easyQuestion.text.substring(0, 30)}...`);\n    }\n\n    if (mediumQuestions.length < 5) {\n      const mediumQuestion = await createQuestion({\n        text: 'Explain the concept of nuclear binding energy.',\n        blockId: blockId,\n        type: 'SHORT_ANSWER',\n        difficulty: 'MEDIUM',\n        points: 5\n      });\n      console.log(`Created medium question: ${mediumQuestion.text.substring(0, 30)}...`);\n    }\n\n    if (hardQuestions.length < 2) {\n      const hardQuestion = await createQuestion({\n        text: 'Calculate the energy released in a nuclear fusion reaction.',\n        blockId: blockId,\n        type: 'CALCULATION',\n        difficulty: 'HARD',\n        points: 10\n      });\n      console.log(`Created hard question: ${hardQuestion.text.substring(0, 30)}...`);\n    }\n\n  } catch (error) {\n    if (error instanceof QuestionError) {\n      console.error('Difficulty management error:', error.message);\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"question-type-management",children:"Question Type Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"async function manageQuestionTypes(blockId: string) {\n  try {\n    // Get all questions for the block\n    const questions = await getQuestionsByBlock(blockId);\n    \n    // Analyze question types\n    const typeAnalysis = {};\n    for (const question of questions) {\n      const type = question.type || 'UNKNOWN';\n      typeAnalysis[type] = (typeAnalysis[type] || 0) + 1;\n    }\n\n    console.log('Question types in block:', typeAnalysis);\n\n    // Ensure variety in question types\n    const requiredTypes = ['MULTIPLE_CHOICE', 'SHORT_ANSWER', 'TRUE_FALSE'];\n    \n    for (const requiredType of requiredTypes) {\n      if (!typeAnalysis[requiredType] || typeAnalysis[requiredType] < 2) {\n        const question = await createQuestion({\n          text: `Sample ${requiredType.toLowerCase().replace('_', ' ')} question`,\n          blockId: blockId,\n          type: requiredType,\n          difficulty: 'MEDIUM',\n          points: 5\n        });\n        console.log(`Created ${requiredType} question: ${question.text}`);\n      }\n    }\n\n  } catch (error) {\n    if (error instanceof QuestionError) {\n      console.error('Question type management error:', error.message);\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-validate-question-content",children:"1. Validate Question Content"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good - Validate question text quality\nif (!data.text.trim()) {\n  throw new QuestionError('Question text cannot be empty');\n}\n\nif (data.text.length < 10) {\n  throw new QuestionError('Question text too short');\n}\n\nif (data.text.length > 1000) {\n  throw new QuestionError('Question text too long');\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-handle-relationships-properly",children:"2. Handle Relationships Properly"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good - Check block exists before creating question\nif (blockId && !await blockExists(blockId)) {\n  throw new QuestionError('Block does not exist');\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-use-efficient-queries",children:"3. Use Efficient Queries"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good - Use Promise.all for parallel queries\nconst [block, questions] = await Promise.all([\n  getQuestionBlock(questionId),\n  getQuestionsByBlock(blockId)\n]);\n\n// \u274c Avoid - Sequential queries\nconst block = await getQuestionBlock(questionId);\nconst questions = await getQuestionsByBlock(blockId);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-implement-question-validation",children:"4. Implement Question Validation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good - Validate question completeness\nasync function validateQuestion(questionId: string) {\n  const question = await getQuestionById(questionId);\n  if (!question) {\n    throw new QuestionError('Question not found');\n  }\n\n  if (!question.text.trim()) {\n    throw new QuestionError('Question must have text');\n  }\n\n  if (question.points && question.points < 0) {\n    throw new QuestionError('Points cannot be negative');\n  }\n\n  return true;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Indexing"}),": Ensure blockId field is indexed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Batch Operations"}),": Use ",(0,s.jsx)(n.code,{children:"getAllQuestions()"})," for bulk operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Caching"}),": Consider caching frequently accessed question data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pagination"}),": For large question lists, implement pagination"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Selective Loading"}),": Only load related data when needed"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./block",children:"Block Management"})})," - Associate questions with content blocks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./quiz",children:"Quiz System"})})," - Use questions in quizzes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./topic",children:"Topic Management"})})," - Categorize questions by topics"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./user",children:"User Management"})})," - Track question creators"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:["Next: ",(0,s.jsx)(n.a,{href:"./topic",children:"Topic Management"})," - Learn how to organize content with topics and examples."]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);