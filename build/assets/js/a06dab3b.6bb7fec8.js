"use strict";(self.webpackChunknuclear_docs=self.webpackChunknuclear_docs||[]).push([[168],{5673:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"prisma-abstraction/quiz","title":"Quiz System","description":"The Quiz module provides comprehensive type-safe CRUD operations and utility functions for managing quizzes in the Nuclear application. This module handles quiz creation, updates, deletion, and complex relationship queries with blocks and topics.","source":"@site/docs/prisma-abstraction/quiz.md","sourceDirName":"prisma-abstraction","slug":"/prisma-abstraction/quiz","permalink":"/docs/prisma-abstraction/quiz","draft":false,"unlisted":false,"editUrl":"https://github.com/nuclear-app/doc/tree/main/docs/prisma-abstraction/quiz.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Folder Organization","permalink":"/docs/prisma-abstraction/folder"},"next":{"title":"Question Management","permalink":"/docs/prisma-abstraction/question"}}');var t=n(4848),o=n(8453);const r={sidebar_position:5},c="Quiz System",a={},l=[{value:"Overview",id:"overview",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"Core CRUD Functions",id:"core-crud-functions",level:3},{value:"<code>getQuizById(id: string): Promise&lt;Quiz | null&gt;</code>",id:"getquizbyidid-string-promisequiz--null",level:4},{value:"<code>getAllQuizzes(): Promise&lt;Quiz[]&gt;</code>",id:"getallquizzes-promisequiz",level:4},{value:"<code>createQuiz(data: CreateQuizData): Promise&lt;Quiz&gt;</code>",id:"createquizdata-createquizdata-promisequiz",level:4},{value:"<code>updateQuiz(id: string, data: Partial&lt;Quiz&gt;): Promise&lt;Quiz&gt;</code>",id:"updatequizid-string-data-partialquiz-promisequiz",level:4},{value:"<code>deleteQuiz(id: string): Promise&lt;Quiz&gt;</code>",id:"deletequizid-string-promisequiz",level:4},{value:"Utility Functions",id:"utility-functions",level:3},{value:"<code>quizExists(id: string): Promise&lt;boolean&gt;</code>",id:"quizexistsid-string-promiseboolean",level:4},{value:"Relationship Queries",id:"relationship-queries",level:3},{value:"<code>getQuizBlock(id: string): Promise&lt;Block | null&gt;</code>",id:"getquizblockid-string-promiseblock--null",level:4},{value:"<code>getQuizTopic(id: string): Promise&lt;Topic | null&gt;</code>",id:"getquiztopicid-string-promisetopic--null",level:4},{value:"Filtering and Search Functions",id:"filtering-and-search-functions",level:3},{value:"<code>getQuizzesByBlock(blockId: string): Promise&lt;Quiz[]&gt;</code>",id:"getquizzesbyblockblockid-string-promisequiz",level:4},{value:"<code>getQuizzesByTopic(topicId: string): Promise&lt;Quiz[]&gt;</code>",id:"getquizzesbytopictopicid-string-promisequiz",level:4},{value:"Data Types",id:"data-types",level:2},{value:"Quiz Model",id:"quiz-model",level:3},{value:"CreateQuizData",id:"createquizdata",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Common Error Scenarios",id:"common-error-scenarios",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Complete Quiz Management Workflow",id:"complete-quiz-management-workflow",level:3},{value:"Quiz Creation for Course Modules",id:"quiz-creation-for-course-modules",level:3},{value:"Quiz Analysis and Reporting",id:"quiz-analysis-and-reporting",level:3},{value:"Topic-Based Quiz Management",id:"topic-based-quiz-management",level:3},{value:"Block Quiz Integration",id:"block-quiz-integration",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Validate Quiz Settings",id:"1-validate-quiz-settings",level:3},{value:"2. Handle Relationships Properly",id:"2-handle-relationships-properly",level:3},{value:"3. Use Efficient Queries",id:"3-use-efficient-queries",level:3},{value:"4. Implement Quiz Validation",id:"4-implement-quiz-validation",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Related Modules",id:"related-modules",level:2}];function d(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"quiz-system",children:"Quiz System"})}),"\n",(0,t.jsx)(i.p,{children:"The Quiz module provides comprehensive type-safe CRUD operations and utility functions for managing quizzes in the Nuclear application. This module handles quiz creation, updates, deletion, and complex relationship queries with blocks and topics."}),"\n",(0,t.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(i.p,{children:["The Quiz module is located in ",(0,t.jsx)(i.code,{children:"lib/quiz.ts"})," and provides functions for:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"CRUD Operations"}),": Create, read, update, and delete quizzes"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Topic Associations"}),": Link quizzes to specific topics"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Block Relationships"}),": Associate quizzes with content blocks"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Quiz Management"}),": Handle quiz metadata and settings"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Validation"}),": Input validation and existence checks"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,t.jsx)(i.h3,{id:"core-crud-functions",children:"Core CRUD Functions"}),"\n",(0,t.jsx)(i.h4,{id:"getquizbyidid-string-promisequiz--null",children:(0,t.jsx)(i.code,{children:"getQuizById(id: string): Promise<Quiz | null>"})}),"\n",(0,t.jsx)(i.p,{children:"Get a quiz by its unique ID."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"const quiz = await getQuizById('quiz-123');\nif (quiz) {\n  console.log(`Found quiz: ${quiz.title}`);\n}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"getallquizzes-promisequiz",children:(0,t.jsx)(i.code,{children:"getAllQuizzes(): Promise<Quiz[]>"})}),"\n",(0,t.jsx)(i.p,{children:"Get all quizzes in the system."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"const allQuizzes = await getAllQuizzes();\nconsole.log(`Total quizzes: ${allQuizzes.length}`);\n"})}),"\n",(0,t.jsx)(i.h4,{id:"createquizdata-createquizdata-promisequiz",children:(0,t.jsx)(i.code,{children:"createQuiz(data: CreateQuizData): Promise<Quiz>"})}),"\n",(0,t.jsx)(i.p,{children:"Create a new quiz with validated input data."}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"data.title"})," (required): Quiz title"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"data.description"})," (optional): Quiz description"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"data.blockId"})," (optional): ID of the associated block"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"data.topicId"})," (optional): ID of the associated topic"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"data.timeLimit"})," (optional): Time limit in minutes"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"data.passingScore"})," (optional): Minimum score to pass"]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"const newQuiz = await createQuiz({\n  title: 'Nuclear Physics Fundamentals',\n  description: 'Test your knowledge of basic nuclear physics concepts',\n  blockId: 'block-123',\n  topicId: 'topic-456',\n  timeLimit: 30,\n  passingScore: 70\n});\n\nconsole.log(`Created quiz: ${newQuiz.id}`);\n"})}),"\n",(0,t.jsx)(i.h4,{id:"updatequizid-string-data-partialquiz-promisequiz",children:(0,t.jsx)(i.code,{children:"updateQuiz(id: string, data: Partial<Quiz>): Promise<Quiz>"})}),"\n",(0,t.jsx)(i.p,{children:"Update an existing quiz's information."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"const updatedQuiz = await updateQuiz('quiz-123', {\n  title: 'Advanced Nuclear Physics Quiz',\n  timeLimit: 45,\n  passingScore: 80\n});\n\nconsole.log(`Updated quiz: ${updatedQuiz.title}`);\n"})}),"\n",(0,t.jsx)(i.h4,{id:"deletequizid-string-promisequiz",children:(0,t.jsx)(i.code,{children:"deleteQuiz(id: string): Promise<Quiz>"})}),"\n",(0,t.jsx)(i.p,{children:"Delete a quiz by its ID."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"const deletedQuiz = await deleteQuiz('quiz-123');\nconsole.log(`Deleted quiz: ${deletedQuiz.title}`);\n"})}),"\n",(0,t.jsx)(i.h3,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,t.jsx)(i.h4,{id:"quizexistsid-string-promiseboolean",children:(0,t.jsx)(i.code,{children:"quizExists(id: string): Promise<boolean>"})}),"\n",(0,t.jsx)(i.p,{children:"Check if a quiz exists by its ID."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"if (await quizExists('quiz-123')) {\n  console.log('Quiz exists');\n} else {\n  console.log('Quiz not found');\n}\n"})}),"\n",(0,t.jsx)(i.h3,{id:"relationship-queries",children:"Relationship Queries"}),"\n",(0,t.jsx)(i.h4,{id:"getquizblockid-string-promiseblock--null",children:(0,t.jsx)(i.code,{children:"getQuizBlock(id: string): Promise<Block | null>"})}),"\n",(0,t.jsx)(i.p,{children:"Get the block associated with a quiz."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"const block = await getQuizBlock('quiz-123');\nif (block) {\n  console.log(`Quiz block: ${block.title}`);\n}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"getquiztopicid-string-promisetopic--null",children:(0,t.jsx)(i.code,{children:"getQuizTopic(id: string): Promise<Topic | null>"})}),"\n",(0,t.jsx)(i.p,{children:"Get the topic associated with a quiz."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"const topic = await getQuizTopic('quiz-123');\nif (topic) {\n  console.log(`Quiz topic: ${topic.name}`);\n}\n"})}),"\n",(0,t.jsx)(i.h3,{id:"filtering-and-search-functions",children:"Filtering and Search Functions"}),"\n",(0,t.jsx)(i.h4,{id:"getquizzesbyblockblockid-string-promisequiz",children:(0,t.jsx)(i.code,{children:"getQuizzesByBlock(blockId: string): Promise<Quiz[]>"})}),"\n",(0,t.jsx)(i.p,{children:"Get all quizzes for a specific block."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"const blockQuizzes = await getQuizzesByBlock('block-123');\nconsole.log(`Block has ${blockQuizzes.length} quizzes`);\n"})}),"\n",(0,t.jsx)(i.h4,{id:"getquizzesbytopictopicid-string-promisequiz",children:(0,t.jsx)(i.code,{children:"getQuizzesByTopic(topicId: string): Promise<Quiz[]>"})}),"\n",(0,t.jsx)(i.p,{children:"Get all quizzes for a specific topic."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"const topicQuizzes = await getQuizzesByTopic('topic-456');\nconsole.log(`Topic has ${topicQuizzes.length} quizzes`);\n"})}),"\n",(0,t.jsx)(i.h2,{id:"data-types",children:"Data Types"}),"\n",(0,t.jsx)(i.h3,{id:"quiz-model",children:"Quiz Model"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"interface Quiz {\n  id: string;\n  title: string;\n  description?: string;\n  blockId?: string;\n  topicId?: string;\n  timeLimit?: number;\n  passingScore?: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n"})}),"\n",(0,t.jsx)(i.h3,{id:"createquizdata",children:"CreateQuizData"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"interface CreateQuizData {\n  title: string;\n  description?: string;\n  blockId?: string;\n  topicId?: string;\n  timeLimit?: number;\n  passingScore?: number;\n}\n"})}),"\n",(0,t.jsx)(i.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(i.p,{children:"The Quiz module defines a custom error class for consistent error handling:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"class QuizError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'QuizError';\n  }\n}\n"})}),"\n",(0,t.jsx)(i.h3,{id:"common-error-scenarios",children:"Common Error Scenarios"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.strong,{children:"Quiz Not Found"})}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"try {\n  const quiz = await getQuizById('non-existent-id');\n  if (!quiz) {\n    throw new QuizError('Quiz not found');\n  }\n} catch (error) {\n  if (error instanceof QuizError) {\n    console.error('Quiz error:', error.message);\n  }\n}\n"})}),"\n",(0,t.jsxs)(i.ol,{start:"2",children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.strong,{children:"Invalid Block Association"})}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"try {\n  const quiz = await createQuiz({\n    title: 'Test Quiz',\n    blockId: 'non-existent-block'\n  });\n} catch (error) {\n  if (error instanceof QuizError) {\n    console.error('Block validation error:', error.message);\n  }\n}\n"})}),"\n",(0,t.jsxs)(i.ol,{start:"3",children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.strong,{children:"Invalid Time Limit"})}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"try {\n  const quiz = await createQuiz({\n    title: 'Test Quiz',\n    timeLimit: -5 // Invalid negative time\n  });\n} catch (error) {\n  if (error instanceof QuizError) {\n    console.error('Time limit error:', error.message);\n  }\n}\n"})}),"\n",(0,t.jsx)(i.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,t.jsx)(i.h3,{id:"complete-quiz-management-workflow",children:"Complete Quiz Management Workflow"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"async function manageQuiz() {\n  try {\n    // Create a new quiz\n    const newQuiz = await createQuiz({\n      title: 'Nuclear Fusion Basics',\n      description: 'Test understanding of nuclear fusion concepts',\n      blockId: 'block-123',\n      topicId: 'topic-456',\n      timeLimit: 25,\n      passingScore: 75\n    });\n\n    // Update quiz settings\n    const updatedQuiz = await updateQuiz(newQuiz.id, {\n      timeLimit: 30,\n      passingScore: 80\n    });\n\n    // Get quiz relationships\n    const block = await getQuizBlock(updatedQuiz.id);\n    const topic = await getQuizTopic(updatedQuiz.id);\n\n    console.log(`Quiz \"${updatedQuiz.title}\" for block \"${block?.title}\"`);\n    console.log(`Topic: ${topic?.name}, Time: ${updatedQuiz.timeLimit}min, Pass: ${updatedQuiz.passingScore}%`);\n\n    // Check if quiz exists before operations\n    if (await quizExists(updatedQuiz.id)) {\n      const quiz = await getQuizById(updatedQuiz.id);\n      console.log(`Quiz created: ${quiz?.createdAt}`);\n    }\n\n  } catch (error) {\n    if (error instanceof QuizError) {\n      console.error('Quiz management error:', error.message);\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(i.h3,{id:"quiz-creation-for-course-modules",children:"Quiz Creation for Course Modules"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"async function createCourseQuizzes() {\n  try {\n    // Define quiz structure for a course\n    const quizStructure = [\n      {\n        title: 'Introduction Quiz',\n        description: 'Basic concepts and terminology',\n        topicId: 'topic-intro',\n        timeLimit: 15,\n        passingScore: 70\n      },\n      {\n        title: 'Nuclear Structure Quiz',\n        description: 'Understanding atomic nuclei',\n        topicId: 'topic-structure',\n        timeLimit: 20,\n        passingScore: 75\n      },\n      {\n        title: 'Fusion Reactions Quiz',\n        description: 'Nuclear fusion processes',\n        topicId: 'topic-fusion',\n        timeLimit: 25,\n        passingScore: 80\n      },\n      {\n        title: 'Final Assessment',\n        description: 'Comprehensive course evaluation',\n        topicId: 'topic-final',\n        timeLimit: 45,\n        passingScore: 85\n      }\n    ];\n\n    const createdQuizzes = [];\n    for (const quizData of quizStructure) {\n      const quiz = await createQuiz(quizData);\n      createdQuizzes.push(quiz);\n      console.log(`Created quiz: ${quiz.title}`);\n    }\n\n    console.log(`Created ${createdQuizzes.length} quizzes for the course`);\n\n  } catch (error) {\n    if (error instanceof QuizError) {\n      console.error('Course quiz creation error:', error.message);\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(i.h3,{id:"quiz-analysis-and-reporting",children:"Quiz Analysis and Reporting"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"async function analyzeQuizzes() {\n  try {\n    // Get all quizzes\n    const allQuizzes = await getAllQuizzes();\n    \n    // Analyze quiz distribution\n    const analysis = {\n      totalQuizzes: allQuizzes.length,\n      quizzesWithTimeLimit: allQuizzes.filter(q => q.timeLimit).length,\n      quizzesWithPassingScore: allQuizzes.filter(q => q.passingScore).length,\n      averageTimeLimit: 0,\n      averagePassingScore: 0,\n      quizzesByTopic: {},\n      quizzesByBlock: {}\n    };\n\n    // Calculate averages\n    const timeLimits = allQuizzes.filter(q => q.timeLimit).map(q => q.timeLimit!);\n    const passingScores = allQuizzes.filter(q => q.passingScore).map(q => q.passingScore!);\n\n    if (timeLimits.length > 0) {\n      analysis.averageTimeLimit = timeLimits.reduce((sum, time) => sum + time, 0) / timeLimits.length;\n    }\n\n    if (passingScores.length > 0) {\n      analysis.averagePassingScore = passingScores.reduce((sum, score) => sum + score, 0) / passingScores.length;\n    }\n\n    // Group quizzes by topic and block\n    for (const quiz of allQuizzes) {\n      if (quiz.topicId) {\n        analysis.quizzesByTopic[quiz.topicId] = (analysis.quizzesByTopic[quiz.topicId] || 0) + 1;\n      }\n      if (quiz.blockId) {\n        analysis.quizzesByBlock[quiz.blockId] = (analysis.quizzesByBlock[quiz.blockId] || 0) + 1;\n      }\n    }\n\n    console.log('Quiz Analysis:', analysis);\n    return analysis;\n\n  } catch (error) {\n    if (error instanceof QuizError) {\n      console.error('Analysis error:', error.message);\n    }\n    throw error;\n  }\n}\n"})}),"\n",(0,t.jsx)(i.h3,{id:"topic-based-quiz-management",children:"Topic-Based Quiz Management"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"async function manageTopicQuizzes(topicId: string) {\n  try {\n    // Get all quizzes for a topic\n    const topicQuizzes = await getQuizzesByTopic(topicId);\n    \n    console.log(`Topic has ${topicQuizzes.length} quizzes`);\n\n    // Analyze quiz difficulty\n    const easyQuizzes = topicQuizzes.filter(q => (q.passingScore || 0) <= 70);\n    const mediumQuizzes = topicQuizzes.filter(q => (q.passingScore || 0) > 70 && (q.passingScore || 0) <= 85);\n    const hardQuizzes = topicQuizzes.filter(q => (q.passingScore || 0) > 85);\n\n    console.log(`Difficulty breakdown: Easy: ${easyQuizzes.length}, Medium: ${mediumQuizzes.length}, Hard: ${hardQuizzes.length}`);\n\n    // Create additional quizzes if needed\n    if (easyQuizzes.length === 0) {\n      const easyQuiz = await createQuiz({\n        title: 'Basic Topic Quiz',\n        description: 'Fundamental concepts assessment',\n        topicId: topicId,\n        timeLimit: 15,\n        passingScore: 65\n      });\n      console.log(`Created easy quiz: ${easyQuiz.title}`);\n    }\n\n    if (hardQuizzes.length === 0) {\n      const hardQuiz = await createQuiz({\n        title: 'Advanced Topic Quiz',\n        description: 'Advanced concepts assessment',\n        topicId: topicId,\n        timeLimit: 30,\n        passingScore: 90\n      });\n      console.log(`Created hard quiz: ${hardQuiz.title}`);\n    }\n\n  } catch (error) {\n    if (error instanceof QuizError) {\n      console.error('Topic quiz management error:', error.message);\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(i.h3,{id:"block-quiz-integration",children:"Block Quiz Integration"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"async function integrateBlockQuizzes(blockId: string) {\n  try {\n    // Get existing quizzes for the block\n    const existingQuizzes = await getQuizzesByBlock(blockId);\n    \n    // Get block topics\n    const block = await getBlockById(blockId);\n    if (!block) {\n      throw new QuizError('Block not found');\n    }\n\n    const topics = await getBlockTopics(blockId);\n    \n    console.log(`Block \"${block.title}\" has ${existingQuizzes.length} quizzes and ${topics.length} topics`);\n\n    // Create quizzes for topics that don't have them\n    for (const topic of topics) {\n      const topicQuizzes = existingQuizzes.filter(q => q.topicId === topic.id);\n      \n      if (topicQuizzes.length === 0) {\n        const quiz = await createQuiz({\n          title: `${topic.name} Assessment`,\n          description: `Quiz for topic: ${topic.name}`,\n          blockId: blockId,\n          topicId: topic.id,\n          timeLimit: 20,\n          passingScore: 75\n        });\n        console.log(`Created quiz for topic \"${topic.name}\": ${quiz.title}`);\n      }\n    }\n\n    // Update block quiz settings\n    for (const quiz of existingQuizzes) {\n      if (!quiz.timeLimit) {\n        await updateQuiz(quiz.id, {\n          timeLimit: 20\n        });\n        console.log(`Added time limit to quiz: ${quiz.title}`);\n      }\n    }\n\n  } catch (error) {\n    if (error instanceof QuizError) {\n      console.error('Block quiz integration error:', error.message);\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(i.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(i.h3,{id:"1-validate-quiz-settings",children:"1. Validate Quiz Settings"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"// \u2705 Good - Validate time limits\nif (timeLimit && (timeLimit < 1 || timeLimit > 180)) {\n  throw new QuizError('Time limit must be between 1 and 180 minutes');\n}\n\n// \u2705 Good - Validate passing scores\nif (passingScore && (passingScore < 0 || passingScore > 100)) {\n  throw new QuizError('Passing score must be between 0 and 100');\n}\n"})}),"\n",(0,t.jsx)(i.h3,{id:"2-handle-relationships-properly",children:"2. Handle Relationships Properly"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"// \u2705 Good - Check block exists before creating quiz\nif (blockId && !await blockExists(blockId)) {\n  throw new QuizError('Block does not exist');\n}\n\n// \u2705 Good - Check topic exists before creating quiz\nif (topicId && !await topicExists(topicId)) {\n  throw new QuizError('Topic does not exist');\n}\n"})}),"\n",(0,t.jsx)(i.h3,{id:"3-use-efficient-queries",children:"3. Use Efficient Queries"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"// \u2705 Good - Use Promise.all for parallel queries\nconst [block, topic] = await Promise.all([\n  getQuizBlock(quizId),\n  getQuizTopic(quizId)\n]);\n\n// \u274c Avoid - Sequential queries\nconst block = await getQuizBlock(quizId);\nconst topic = await getQuizTopic(quizId);\n"})}),"\n",(0,t.jsx)(i.h3,{id:"4-implement-quiz-validation",children:"4. Implement Quiz Validation"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"// \u2705 Good - Validate quiz completeness\nasync function validateQuiz(quizId: string) {\n  const quiz = await getQuizById(quizId);\n  if (!quiz) {\n    throw new QuizError('Quiz not found');\n  }\n\n  if (!quiz.title.trim()) {\n    throw new QuizError('Quiz must have a title');\n  }\n\n  if (quiz.timeLimit && quiz.timeLimit < 1) {\n    throw new QuizError('Time limit must be at least 1 minute');\n  }\n\n  return true;\n}\n"})}),"\n",(0,t.jsx)(i.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Indexing"}),": Ensure blockId and topicId fields are indexed"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Batch Operations"}),": Use ",(0,t.jsx)(i.code,{children:"getAllQuizzes()"})," for bulk operations"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Caching"}),": Consider caching frequently accessed quiz data"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Pagination"}),": For large quiz lists, implement pagination"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Selective Loading"}),": Only load related data when needed"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.a,{href:"./block",children:"Block Management"})})," - Associate quizzes with content blocks"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.a,{href:"./topic",children:"Topic Management"})})," - Link quizzes to specific topics"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.a,{href:"./question",children:"Question Management"})})," - Add questions to quizzes"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.a,{href:"./user",children:"User Management"})})," - Track quiz creators and participants"]}),"\n"]}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsxs)(i.p,{children:["Next: ",(0,t.jsx)(i.a,{href:"./question",children:"Question Management"})," - Learn how to create and manage questions for quizzes and blocks."]})]})}function u(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>c});var s=n(6540);const t={},o=s.createContext(t);function r(e){const i=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:i},e.children)}}}]);